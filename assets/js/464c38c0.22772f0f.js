"use strict";(self.webpackChunkchakra_ui_docs=self.webpackChunkchakra_ui_docs||[]).push([[4264],{3905:(e,n,t)=>{t.d(n,{Zo:()=>m,kt:()=>c});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=a.createContext({}),p=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},m=function(e){var n=p(e.components);return a.createElement(l.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),u=p(t),c=r,k=u["".concat(l,".").concat(c)]||u[c]||d[c]||o;return t?a.createElement(k,s(s({ref:n},m),{},{components:t})):a.createElement(k,s({ref:n},m))}));function c(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,s=new Array(o);s[0]=u;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,s[1]=i;for(var p=2;p<o;p++)s[p]=t[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},35409:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var a=t(87462),r=(t(67294),t(3905));const o={title:"Responsive Styles",description:"Chakra UI supports responsive styles out of the box",category:"features"},s=void 0,i={unversionedId:"styled-system/responsive-styles",id:"styled-system/responsive-styles",title:"Responsive Styles",description:"Chakra UI supports responsive styles out of the box",source:"@site/content/docs/styled-system/responsive-styles.mdx",sourceDirName:"styled-system",slug:"/styled-system/responsive-styles",permalink:"/docs/styled-system/responsive-styles",draft:!1,tags:[],version:"current",lastUpdatedBy:"IshikawaMasashi",lastUpdatedAt:1675135144,formattedLastUpdatedAt:"Jan 31, 2023",frontMatter:{title:"Responsive Styles",description:"Chakra UI supports responsive styles out of the box",category:"features"},sidebar:"defaultSidebar",previous:{title:"Gradient",permalink:"/docs/styled-system/gradient"},next:{title:"RTL Support",permalink:"/docs/styled-system/rtl-support"}},l={},p=[{value:"The Array syntax",id:"the-array-syntax",level:2},{value:"The Object syntax",id:"the-object-syntax",level:2},{value:"More Examples",id:"more-examples",level:2},{value:"Under the hood",id:"under-the-hood",level:2},{value:"Customizing Breakpoints",id:"customizing-breakpoints",level:2},{value:"Demo",id:"demo",level:2}],m={toc:p};function d(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Chakra UI supports responsive styles out of the box. Instead of manually adding\n",(0,r.kt)("inlineCode",{parentName:"p"},"@media")," queries and adding nested styles throughout your code, Chakra UI allows\nyou to provide object and array values to add mobile-first responsive styles."),(0,r.kt)("p",null,"We use the ",(0,r.kt)("inlineCode",{parentName:"p"},"@media(min-width)")," media query to ensure your interfaces are\nmobile-first."),(0,r.kt)("p",null,"Responsive syntax relies on the breakpoints defined in the theme object. Chakra\nUI provides default breakpoints, here's what it looks like:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const breakpoints = {\n  sm: '30em',\n  md: '48em',\n  lg: '62em',\n  xl: '80em',\n  '2xl': '96em',\n};\n")),(0,r.kt)("p",null,"To make styles responsive, you can use either the array or object syntax."),(0,r.kt)("h2",{id:"the-array-syntax"},"The Array syntax"),(0,r.kt)("p",null,"All style props accept arrays as values for mobile-first responsive styles. This\nis the recommended method."),(0,r.kt)("p",null,"Let's say you have a ",(0,r.kt)("inlineCode",{parentName:"p"},"Box")," with the following properties:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"<Box bg='red.200' w='400px'>\n  This is a box\n</Box>\n")),(0,r.kt)("p",null,"To make the ",(0,r.kt)("inlineCode",{parentName:"p"},"width")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"w")," responsive using the array syntax, here's what you\nneed to do:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"<Box bg='red.200' w={[300, 400, 500]}>\n  This is a box\n</Box>\n")),(0,r.kt)("p",null,"To interpret array responsive values, Chakra UI converts the values defined in\n",(0,r.kt)("inlineCode",{parentName:"p"},"theme.breakpoints")," and sorts them in ascending order. Afterward, we map the\nvalues defined in the array to the breakpoints"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// These are the default breakpoints\nconst breakpoints = {\n  sm: '30em',\n  md: '48em',\n  lg: '62em',\n  xl: '80em',\n  '2xl': '96em',\n};\n\n// Internally, we transform to this\nconst breakpoints = ['0em', '30em', '48em', '62em', '80em', '96em'];\n")),(0,r.kt)("p",null,"Here's how to interpret this syntax:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"300px"),": From ",(0,r.kt)("inlineCode",{parentName:"li"},"0em")," upwards"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"400px"),": From ",(0,r.kt)("inlineCode",{parentName:"li"},"30em")," upwards"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"500px"),": From ",(0,r.kt)("inlineCode",{parentName:"li"},"48em")," upwards")),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"To skip certain breakpoints, you can pass ",(0,r.kt)("inlineCode",{parentName:"p"},"null")," to any position in the array\nto avoid generating unnecessary CSS.")),(0,r.kt)("h2",{id:"the-object-syntax"},"The Object syntax"),(0,r.kt)("p",null,"You can also define responsive values with breakpoint aliases in an object. Any\nundefined alias key will define the base, non-responsive value."),(0,r.kt)("p",null,"Let's say you have a ",(0,r.kt)("inlineCode",{parentName:"p"},"Text")," that looks like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"<Text fontSize='40px'>This is a text</Text>\n")),(0,r.kt)("p",null,"To make the ",(0,r.kt)("inlineCode",{parentName:"p"},"fontSize")," responsive using the object syntax, here's what you need\nto do:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"<Text fontSize={{ base: '24px', md: '40px', lg: '56px' }}>\n  This is responsive text\n</Text>\n")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("strong",{parentName:"p"},"Remember, Chakra UI uses the min-width media query for responsive design"),".\nThe breakpoints are: ",(0,r.kt)("inlineCode",{parentName:"p"},"sm = 30em"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"md = 48em"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"lg = 62em"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"xl = 80em"))),(0,r.kt)("p",null,"Here's how to interpret this syntax:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"base"),": From ",(0,r.kt)("inlineCode",{parentName:"li"},"0em")," upwards"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"md"),": From ",(0,r.kt)("inlineCode",{parentName:"li"},"48em")," upwards"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"lg"),": From ",(0,r.kt)("inlineCode",{parentName:"li"},"62em")," upwards")),(0,r.kt)("h2",{id:"more-examples"},"More Examples"),(0,r.kt)("p",null,"This works for every style prop in the theme specification, which means you can\nchange the style of most properties at a given breakpoint."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"<>\n  <Box\n    height={{\n      base: '100%', // 0-48em\n      md: '50%', // 48em-80em,\n      xl: '25%', // 80em+\n    }}\n    bg='teal.400'\n    width={[\n      '100%', // 0-30em\n      '50%', // 30em-48em\n      '25%', // 48em-62em\n      '15%', // 62em+\n    ]}\n  />\n  {/* responsive font size */}\n  <Box fontSize={['sm', 'md', 'lg', 'xl']}>Font Size</Box>\n  {/* responsive margin */}\n  <Box mt={[2, 4, 6, 8]} width='full' height='24px' bg='tomato' />\n  {/* responsive padding */}\n  <Box bg='papayawhip' p={[2, 4, 6, 8]}>\n    Padding\n  </Box>\n</>\n")),(0,r.kt)("h2",{id:"under-the-hood"},"Under the hood"),(0,r.kt)("p",null,"This shortcut is an alternative to writing media queries out by hand. Given the\nfollowing:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"<Box width={[1, 1 / 2, 1 / 4]} />\n")),(0,r.kt)("p",null,"It'll generate a CSS that looks like this"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-css"},".Box {\n  width: 100%;\n}\n\n@media screen and (min-width: 30em) {\n  .Box {\n    width: 50%;\n  }\n}\n\n@media screen and (min-width: 48em) {\n  .Box {\n    width: 25%;\n  }\n}\n")),(0,r.kt)("p",null,"The equivalent of this style if you passed it as an object."),(0,r.kt)("h2",{id:"customizing-breakpoints"},"Customizing Breakpoints"),(0,r.kt)("p",null,"In some scenarios, you might need to define custom breakpoints for your\napplication. We recommended using common aliases like ",(0,r.kt)("inlineCode",{parentName:"p"},"sm"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"md"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"lg"),", and\n",(0,r.kt)("inlineCode",{parentName:"p"},"xl"),"."),(0,r.kt)("p",null,"To define custom breakpoints, just pass them as an object into the theme."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Ensure the css unit of your breakpoints are the same. Use all ",(0,r.kt)("inlineCode",{parentName:"p"},"px")," or\nall ",(0,r.kt)("inlineCode",{parentName:"p"},"em"),", don't mix them.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"// 1. Import the utilities\nimport { extendTheme } from '@chakra-ui/react';\n\n// 2. Update the breakpoints as key-value pairs\nconst breakpoints = {\n  sm: '320px',\n  md: '768px',\n  lg: '960px',\n  xl: '1200px',\n  '2xl': '1536px',\n};\n\n// 3. Extend the theme\nconst theme = extendTheme({ breakpoints });\n\n// 4. Now you can use the custom breakpoints\nfunction Example() {\n  return <Box width={{ base: '100%', sm: '50%', md: '25%' }} />;\n}\n")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"If you're using ",(0,r.kt)("strong",{parentName:"p"},"pixels")," as breakpoint values make sure to ",(0,r.kt)("strong",{parentName:"p"},"always"),"\nprovide a value for the ",(0,r.kt)("inlineCode",{parentName:"p"},"2xl")," breakpoint, which by its default pixels value is\n",(0,r.kt)("strong",{parentName:"p"},'"1536px"'),".")),(0,r.kt)("h2",{id:"demo"},"Demo"),(0,r.kt)("p",null,"Here's a simple example of a marketing page component that uses a stacked layout\non small screens, and a side-by-side layout on larger screens ",(0,r.kt)("strong",{parentName:"p"},"(resize your\nbrowser to see it in action)"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"<Box p={4} display={{ md: 'flex' }}>\n  <Box flexShrink={0}>\n    <Image\n      borderRadius='lg'\n      width={{ md: 40 }}\n      src='https://bit.ly/2jYM25F'\n      alt='Woman paying for a purchase'\n    />\n  </Box>\n  <Box mt={{ base: 4, md: 0 }} ml={{ md: 6 }}>\n    <Text\n      fontWeight='bold'\n      textTransform='uppercase'\n      fontSize='sm'\n      letterSpacing='wide'\n      color='teal.600'\n    >\n      Marketing\n    </Text>\n    <Link\n      mt={1}\n      display='block'\n      fontSize='lg'\n      lineHeight='normal'\n      fontWeight='semibold'\n      href='#'\n    >\n      Finding customers for your new business\n    </Link>\n    <Text mt={2} color='gray.500'>\n      Getting a new business off the ground is a lot of hard work. Here are five\n      ideas you can use to find your first customers.\n    </Text>\n  </Box>\n</Box>\n")))}d.isMDXComponent=!0}}]);