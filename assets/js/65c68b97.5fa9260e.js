"use strict";(self.webpackChunkchakra_ui_docs=self.webpackChunkchakra_ui_docs||[]).push([[204],{3905:(e,o,t)=>{t.d(o,{Zo:()=>p,kt:()=>u});var n=t(67294);function r(e,o,t){return o in e?Object.defineProperty(e,o,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[o]=t,e}function a(e,o){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);o&&(n=n.filter((function(o){return Object.getOwnPropertyDescriptor(e,o).enumerable}))),t.push.apply(t,n)}return t}function l(e){for(var o=1;o<arguments.length;o++){var t=null!=arguments[o]?arguments[o]:{};o%2?a(Object(t),!0).forEach((function(o){r(e,o,t[o])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(o){Object.defineProperty(e,o,Object.getOwnPropertyDescriptor(t,o))}))}return e}function i(e,o){if(null==e)return{};var t,n,r=function(e,o){if(null==e)return{};var t,n,r={},a=Object.keys(e);for(n=0;n<a.length;n++)t=a[n],o.indexOf(t)>=0||(r[t]=e[t]);return r}(e,o);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)t=a[n],o.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var d=n.createContext({}),s=function(e){var o=n.useContext(d),t=o;return e&&(t="function"==typeof e?e(o):l(l({},o),e)),t},p=function(e){var o=s(e.components);return n.createElement(d.Provider,{value:o},e.children)},c={inlineCode:"code",wrapper:function(e){var o=e.children;return n.createElement(n.Fragment,{},o)}},m=n.forwardRef((function(e,o){var t=e.components,r=e.mdxType,a=e.originalType,d=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),m=s(t),u=r,k=m["".concat(d,".").concat(u)]||m[u]||c[u]||a;return t?n.createElement(k,l(l({ref:o},p),{},{components:t})):n.createElement(k,l({ref:o},p))}));function u(e,o){var t=arguments,r=o&&o.mdxType;if("string"==typeof e||r){var a=t.length,l=new Array(a);l[0]=m;var i={};for(var d in o)hasOwnProperty.call(o,d)&&(i[d]=o[d]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var s=2;s<a;s++)l[s]=t[s];return n.createElement.apply(null,l)}return n.createElement.apply(null,t)}m.displayName="MDXCreateElement"},8046:(e,o,t)=>{t.r(o),t.d(o,{assets:()=>d,contentTitle:()=>l,default:()=>c,frontMatter:()=>a,metadata:()=>i,toc:()=>s});var n=t(87462),r=(t(67294),t(3905));const a={title:"Color Mode",package:"@chakra-ui/color-mode",description:"Working with color mode (light and dark mode) in Chakra UI",category:"features"},l=void 0,i={unversionedId:"styled-system/color-mode",id:"styled-system/color-mode",title:"Color Mode",description:"Working with color mode (light and dark mode) in Chakra UI",source:"@site/content/docs/styled-system/color-mode.mdx",sourceDirName:"styled-system",slug:"/styled-system/color-mode",permalink:"/docs/styled-system/color-mode",draft:!1,tags:[],version:"current",lastUpdatedBy:"IshikawaMasashi",lastUpdatedAt:1675135144,formattedLastUpdatedAt:"Jan 31, 2023",frontMatter:{title:"Color Mode",package:"@chakra-ui/color-mode",description:"Working with color mode (light and dark mode) in Chakra UI",category:"features"},sidebar:"defaultSidebar",previous:{title:"CLI",permalink:"/docs/styled-system/cli"},next:{title:"CSS Variables",permalink:"/docs/styled-system/css-variables"}},d={},s=[{value:"Setup",id:"setup",level:2},{value:"Updating the theme config",id:"updating-the-theme-config",level:3},{value:"Behavior of ColorMode",id:"behavior-of-colormode",level:4},{value:"Difference between <code>initialColorMode=&#39;system&#39;</code> and <code>useSystemColorMode</code>",id:"difference-between-initialcolormodesystem-and-usesystemcolormode",level:4},{value:"Adding the <code>ColorModeScript</code>",id:"adding-the-colormodescript",level:3},{value:"For Next.js",id:"for-nextjs",level:4},{value:"For Create React App",id:"for-create-react-app",level:4},{value:"For Gatsby",id:"for-gatsby",level:4},{value:"Changing Color Mode",id:"changing-color-mode",level:2},{value:"useColorMode",id:"usecolormode",level:3},{value:"useColorModeValue",id:"usecolormodevalue",level:3},{value:"Forcing a specific mode",id:"forcing-a-specific-mode",level:2},{value:"Add colorModeManager (Optional, for SSR)",id:"add-colormodemanager-optional-for-ssr",level:2},{value:"Color Mode Flash Issue",id:"color-mode-flash-issue",level:2}],p={toc:s};function c(e){let{components:o,...t}=e;return(0,r.kt)("wrapper",(0,n.Z)({},p,t,{components:o,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Chakra UI comes with built-in support for managing color mode in your apps."),(0,r.kt)("p",null,"By default, most of Chakra's components are dark mode compatible. In some\nscenarios, you might need to make your component respond to color mode."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},"Tip:")," Chakra stores the color mode in ",(0,r.kt)("inlineCode",{parentName:"p"},"localStorage")," and appends a\nclassName to the ",(0,r.kt)("inlineCode",{parentName:"p"},"body")," to ensure the color mode is persistent.")),(0,r.kt)("h2",{id:"setup"},"Setup"),(0,r.kt)("p",null,"To get dark mode working correctly, you need to do two things:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Update your theme config to determine how Chakra should manage color mode\nupdates.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Add the ",(0,r.kt)("inlineCode",{parentName:"p"},"ColorModeScript")," to your application, and set the initial color mode\nyour application should start with to either ",(0,r.kt)("inlineCode",{parentName:"p"},"light"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"dark")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"system"),". It\nis ",(0,r.kt)("inlineCode",{parentName:"p"},"light")," by default."))),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},"Note:")," When using ",(0,r.kt)("inlineCode",{parentName:"p"},"system")," as initial color mode, the theme will change\nwith the system preference. However, if another theme is manually selected by\nthe user then that theme will be used on the next page load. To reset it to\nsystem preference, simply remove the ",(0,r.kt)("inlineCode",{parentName:"p"},"chakra-ui-color-mode")," entry from\nlocalStorage.")),(0,r.kt)("h3",{id:"updating-the-theme-config"},"Updating the theme config"),(0,r.kt)("p",null,"The theme config for color mode has 2 options:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"initialColorMode"),": The initial mode you'd like your app to start with"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"useSystemColorMode"),": If ",(0,r.kt)("inlineCode",{parentName:"li"},"true"),", your app will change color mode based on the\nuser's system preferences.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'// theme.js\n\n// 1. import `extendTheme` function\nimport { extendTheme } from "@chakra-ui/react";\n\n// 2. Add your color mode config\nconst config = {\n  initialColorMode: "light",\n  useSystemColorMode: false,\n};\n\n// 3. extend the theme\nconst theme = extendTheme({ config });\n\nexport default theme;\n')),(0,r.kt)("p",null,"For typescript, you need to explicitly describe the theme config type as\n",(0,r.kt)("inlineCode",{parentName:"p"},"ThemeConfig")," object."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'// theme.ts\n\n// 1. import `extendTheme` function\nimport { extendTheme, type ThemeConfig } from "@chakra-ui/react";\n\n// 2. Add your color mode config\nconst config: ThemeConfig = {\n  initialColorMode: "light",\n  useSystemColorMode: false,\n};\n\n// 3. extend the theme\nconst theme = extendTheme({ config });\n\nexport default theme;\n')),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Remember to pass your custom ",(0,r.kt)("inlineCode",{parentName:"p"},"theme")," to the ",(0,r.kt)("inlineCode",{parentName:"p"},"ChakraProvider"),", otherwise your\ncolor mode config won't be taken into consideration.")),(0,r.kt)("h4",{id:"behavior-of-colormode"},"Behavior of ColorMode"),(0,r.kt)("p",null,"The current hierarchy of how the color mode is defined is as follows:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"if ",(0,r.kt)("inlineCode",{parentName:"p"},"useSystemColorMode")," is true ",(0,r.kt)("inlineCode",{parentName:"p"},"system"),"-color will be used as default -\n",(0,r.kt)("inlineCode",{parentName:"p"},"initialColorMode")," is the fallback if system color mode can't be resolved")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"if ",(0,r.kt)("inlineCode",{parentName:"p"},"data-theme")," prop is defined through e.g. ",(0,r.kt)("inlineCode",{parentName:"p"},"ColorModeScript")," / after\nmodification/initial load of the colorMode this value will be used")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"if ",(0,r.kt)("inlineCode",{parentName:"p"},"colorModeManager")," = ",(0,r.kt)("inlineCode",{parentName:"p"},"localStorage")," and a value is defined for\n",(0,r.kt)("inlineCode",{parentName:"p"},"chakra-ui-color-mode")," this will be used")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"if ",(0,r.kt)("inlineCode",{parentName:"p"},"initialColorMode")," = ",(0,r.kt)("inlineCode",{parentName:"p"},"system")," system-color will be used as default -\n",(0,r.kt)("inlineCode",{parentName:"p"},"initialColorMode")," is the fallback if system color mode isn't resolved")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"if ",(0,r.kt)("inlineCode",{parentName:"p"},"initialColorMode")," = ",(0,r.kt)("inlineCode",{parentName:"p"},"'light'|'dark'")," the corresponding value will be used"))),(0,r.kt)("p",null,"We currently accept 3 different values for ",(0,r.kt)("inlineCode",{parentName:"p"},"initialColorMode"),":\n",(0,r.kt)("inlineCode",{parentName:"p"},"light"),",",(0,r.kt)("inlineCode",{parentName:"p"},"dark"),",",(0,r.kt)("inlineCode",{parentName:"p"},"system")),(0,r.kt)("h4",{id:"difference-between-initialcolormodesystem-and-usesystemcolormode"},"Difference between ",(0,r.kt)("inlineCode",{parentName:"h4"},"initialColorMode='system'")," and ",(0,r.kt)("inlineCode",{parentName:"h4"},"useSystemColorMode")),(0,r.kt)("p",null,"if ",(0,r.kt)("inlineCode",{parentName:"p"},"useSystemColorMode=true")," we will always try to match the users\n",(0,r.kt)("inlineCode",{parentName:"p"},"system"),"-color and fallback to ",(0,r.kt)("inlineCode",{parentName:"p"},"initialColorMode"),". With this behavior, the\ncolorMode toggle won't have any effect."),(0,r.kt)("p",null,"if ",(0,r.kt)("inlineCode",{parentName:"p"},"initialColorMode='system'")," we will as well always try to match the users\n",(0,r.kt)("inlineCode",{parentName:"p"},"system"),"-color and fallback to ",(0,r.kt)("inlineCode",{parentName:"p"},"light"),". After the user has toggled the value,\nthis value will be used."),(0,r.kt)("h3",{id:"adding-the-colormodescript"},"Adding the ",(0,r.kt)("inlineCode",{parentName:"h3"},"ColorModeScript")),(0,r.kt)("p",null,"The color mode script needs to be added before the content inside the ",(0,r.kt)("inlineCode",{parentName:"p"},"body")," tag\nfor local storage syncing to work correctly."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"When setting the initial color mode, we recommend adding it as a config to\nyour theme and reference that in the ",(0,r.kt)("inlineCode",{parentName:"p"},"ColorModeScript"),".")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"To use ",(0,r.kt)("inlineCode",{parentName:"p"},"ColorModeScript")," on a site with strict ",(0,r.kt)("inlineCode",{parentName:"p"},"Content-Security-Policy"),", you\ncan use the ",(0,r.kt)("inlineCode",{parentName:"p"},"nonce")," prop that will be passed to the ",(0,r.kt)("inlineCode",{parentName:"p"},"<script>")," tag.")),(0,r.kt)("h4",{id:"for-nextjs"},"For Next.js"),(0,r.kt)("p",null,"For Next.js, you need to add the ",(0,r.kt)("inlineCode",{parentName:"p"},"ColorModeScript")," to the ",(0,r.kt)("inlineCode",{parentName:"p"},"_document.js")," file."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"ln={14}",ln:"{14}"},'// pages/_document.js\n\nimport { ColorModeScript } from "@chakra-ui/react";\nimport NextDocument, { Html, Head, Main, NextScript } from "next/document";\nimport theme from "./theme";\n\nexport default class Document extends NextDocument {\n  render() {\n    return (\n      <Html lang="en">\n        <Head />\n        <body>\n          {/* \ud83d\udc47 Here\'s the script */}\n          <ColorModeScript initialColorMode={theme.config.initialColorMode} />\n          <Main />\n          <NextScript />\n        </body>\n      </Html>\n    );\n  }\n}\n')),(0,r.kt)("h4",{id:"for-create-react-app"},"For Create React App"),(0,r.kt)("p",null,"For Create React App, you need to add the ",(0,r.kt)("inlineCode",{parentName:"p"},"ColorModeScript")," to the ",(0,r.kt)("inlineCode",{parentName:"p"},"index.js"),"\nfile."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"ln={11}",ln:"{11}"},'// index.js\n\nimport { ColorModeScript } from "@chakra-ui/react";\nimport * as ReactDOM from "react-dom/client";\nimport App from "./App";\nimport theme from "./theme";\n\nconst rootElement = document.getElementById("root");\nReactDOM.createRoot(rootElement).render(\n  <>\n    {/* \ud83d\udc47 Here\'s the script */}\n    <ColorModeScript initialColorMode={theme.config.initialColorMode} />\n    <App />\n  </>\n);\n')),(0,r.kt)("h4",{id:"for-gatsby"},"For Gatsby"),(0,r.kt)("p",null,"Install ",(0,r.kt)("inlineCode",{parentName:"p"},"@chakra-ui/gatsby-plugin")," in your project. You can read more in the\n",(0,r.kt)("a",{parentName:"p",href:"/gatsby-guide"},"Chakra UI + Gatsby guide"),"."),(0,r.kt)("h2",{id:"changing-color-mode"},"Changing Color Mode"),(0,r.kt)("p",null,"To manage color mode in your application, chakra exposes the ",(0,r.kt)("inlineCode",{parentName:"p"},"useColorMode")," or\n",(0,r.kt)("inlineCode",{parentName:"p"},"useColorModeValue")," hooks."),(0,r.kt)("h3",{id:"usecolormode"},"useColorMode"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"useColorMode")," is a React hook that gives you access to the current color mode,\nand a function to toggle the color mode."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'function Example() {\n  const { colorMode, toggleColorMode } = useColorMode();\n  return (\n    <header>\n      <Button onClick={toggleColorMode}>\n        Toggle {colorMode === "light" ? "Dark" : "Light"}\n      </Button>\n    </header>\n  );\n}\n')),(0,r.kt)("p",null,"Calling ",(0,r.kt)("inlineCode",{parentName:"p"},"toggleColorMode")," anywhere in your app tree toggles the color mode from\n",(0,r.kt)("inlineCode",{parentName:"p"},"light")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"dark")," and vice versa."),(0,r.kt)("h3",{id:"usecolormodevalue"},"useColorModeValue"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"useColorModeValue")," is a React hook used to change any value or style based on\nthe color mode. It takes 2 arguments: the value in light mode, and the value in\ndark mode."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"// Here's the signature\nconst value = useColorModeValue(lightModeValue, darkModeValue);\n")),(0,r.kt)("p",null,"Here's an example that changes the ",(0,r.kt)("inlineCode",{parentName:"p"},"background-color")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"color")," using the\n",(0,r.kt)("inlineCode",{parentName:"p"},"useColorModeValue")," hook."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Click the ",(0,r.kt)("strong",{parentName:"p"},"Toggle Mode")," button to see it in action.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'function StyleColorMode() {\n  const { toggleColorMode } = useColorMode();\n\n  const bg = useColorModeValue("red.500", "red.200");\n  const color = useColorModeValue("white", "gray.800");\n\n  return (\n    <>\n      <Box mb={4} bg={bg} color={color}>\n        This box\'s style will change based on the color mode.\n      </Box>\n      <Button size="sm" onClick={toggleColorMode}>\n        Toggle Mode\n      </Button>\n    </>\n  );\n}\n')),(0,r.kt)("h2",{id:"forcing-a-specific-mode"},"Forcing a specific mode"),(0,r.kt)("p",null,"In some occasions, you might want Chakra components to look the same in both\nlight and dark modes. To achieve this, wrap the component in a ",(0,r.kt)("inlineCode",{parentName:"p"},"LightMode")," or\n",(0,r.kt)("inlineCode",{parentName:"p"},"DarkMode")," component. Doing this will override the global ",(0,r.kt)("inlineCode",{parentName:"p"},"colorMode"),"."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Click the ",(0,r.kt)("strong",{parentName:"p"},'"Toggle Mode"')," button to see it in action.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'function Example() {\n  const { colorMode, toggleColorMode } = useColorMode();\n\n  return (\n    <HStack>\n      <LightMode>\n        <Button size="sm" colorScheme="blue">\n          Light Mode Always\n        </Button>\n      </LightMode>\n\n      <DarkMode>\n        <Button size="sm" colorScheme="blue">\n          Dark Mode Always\n        </Button>\n      </DarkMode>\n\n      <Button size="sm" colorScheme="blue" onClick={toggleColorMode}>\n        Toggle Mode\n      </Button>\n    </HStack>\n  );\n}\n')),(0,r.kt)("h2",{id:"add-colormodemanager-optional-for-ssr"},"Add colorModeManager (Optional, for SSR)"),(0,r.kt)("p",null,"For server-side rendered sites, e.g. in Next.js, you may want to know the color\npreference of a user upfront so you can avoid rendering the initial color mode\nand then changing it during hydration (so-called ",(0,r.kt)("inlineCode",{parentName:"p"},"flashing"),")."),(0,r.kt)("p",null,"If you don't use SSR or don't care about this, you don't need to pass anything.\nChakra will use ",(0,r.kt)("inlineCode",{parentName:"p"},"localStorageManager")," by default."),(0,r.kt)("p",null,"Here's how to do this in Next.js 9.3 or newer:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Create a reusable wrapper as demonstrated in the examples:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'// e.g. src/Chakra.js\n// a) import `ChakraProvider` component as well as the storageManagers\nimport {\n  ChakraProvider,\n  cookieStorageManagerSSR,\n  localStorageManager,\n} from "@chakra-ui/react";\n\nexport function Chakra({ cookies, children }) {\n  // b) Pass `colorModeManager` prop\n  const colorModeManager =\n    typeof cookies === "string"\n      ? cookieStorageManagerSSR(cookies)\n      : localStorageManager;\n\n  return (\n    <ChakraProvider colorModeManager={colorModeManager}>\n      {children}\n    </ChakraProvider>\n  );\n}\n\n// also export a reusable function getServerSideProps\nexport function getServerSideProps({ req }) {\n  return {\n    props: {\n      // first time users will not have any cookies and you may not return\n      // undefined here, hence ?? is necessary\n      cookies: req.headers.cookie ?? "",\n    },\n  };\n}\n')),(0,r.kt)("ol",{start:2},(0,r.kt)("li",{parentName:"ol"},"Import your wrapper component setting up Chakra:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'// setup your wrapper in the _app file (e.g: pages/_app.js)\nimport { Chakra } from "../src/Chakra";\n\nexport default function App({ Component, pageProps }) {\n  return (\n    <Chakra cookies={pageProps.cookies}>\n      <Component {...pageProps} />\n    </Chakra>\n  );\n}\n\n// e.g pages/index.js\nexport default function Index() {\n  return <h1>Example</h1>;\n}\n\n// re-export the reusable `getServerSideProps` function\nexport { getServerSideProps } from "./Chakra";\n')),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"If you need to know the name of the Chakra cookie for specific reasons, it's\n",(0,r.kt)("inlineCode",{parentName:"p"},"chakra-ui-color-mode"),". Also, if you use ",(0,r.kt)("inlineCode",{parentName:"p"},"colorModeManager"),", you can avoid\nadding the ",(0,r.kt)("inlineCode",{parentName:"p"},"<ColorModeScript />")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"_document.js"),".")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},"Important:")," if you're using ",(0,r.kt)("inlineCode",{parentName:"p"},"Next.js 9.3")," or newer, the Next.js team\nrecommends avoiding ",(0,r.kt)("inlineCode",{parentName:"p"},"getInitialProps"),". The following example is for Next 9.2\nor older!")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'// pages/_app.js\nimport {\n  ChakraProvider,\n  cookieStorageManagerSSR,\n  localStorageManager,\n} from "@chakra-ui/react";\n\nexport default function App({ cookies }) {\n  // 2. Pass `colorModeManager` prop - it finds the relevant cookie on its own\n  return (\n    <ChakraProvider\n      colorModeManager={\n        typeof cookies === "string"\n          ? cookieStorageManagerSSR(cookies)\n          : localStorageManager\n      }\n    >\n      <h1>Example</h1>\n    </ChakraProvider>\n  );\n}\n\nApp.getInitialProps = ({ req }) => {\n  return {\n    // first time users will not have any cookies and you may not return\n    // undefined here, hence ?? is necessary\n    cookies: req.headers.cookie ?? "",\n  };\n};\n')),(0,r.kt)("h2",{id:"color-mode-flash-issue"},"Color Mode Flash Issue"),(0,r.kt)("p",null,"In some cases, when you switch to dark mode and refresh the page, you might\nexperience a quick flash of light mode before it switches correctly."),(0,r.kt)("p",null,"This is a known issue and we're looking to fix it. If you have some ideas, feel\nfree to share with us on Discord or Github."))}c.isMDXComponent=!0}}]);