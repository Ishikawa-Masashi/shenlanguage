"use strict";(self.webpackChunkchakra_ui_docs=self.webpackChunkchakra_ui_docs||[]).push([[3562],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>u});var l=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);t&&(l=l.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,l)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,l,o=function(e,t){if(null==e)return{};var n,l,o={},a=Object.keys(e);for(l=0;l<a.length;l++)n=a[l],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(l=0;l<a.length;l++)n=a[l],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var i=l.createContext({}),p=function(e){var t=l.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},d=function(e){var t=p(e.components);return l.createElement(i.Provider,{value:t},e.children)},c="mdxType",y={inlineCode:"code",wrapper:function(e){var t=e.children;return l.createElement(l.Fragment,{},t)}},m=l.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),c=p(n),m=o,u=c["".concat(i,".").concat(m)]||c[m]||y[m]||a;return n?l.createElement(u,r(r({ref:t},d),{},{components:n})):l.createElement(u,r({ref:t},d))}));function u(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,r=new Array(a);r[0]=m;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s[c]="string"==typeof e?e:o,r[1]=s;for(var p=2;p<a;p++)r[p]=n[p];return l.createElement.apply(null,r)}return l.createElement.apply(null,n)}m.displayName="MDXCreateElement"},92796:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>r,default:()=>c,frontMatter:()=>a,metadata:()=>s,toc:()=>p});var l=n(87462),o=(n(67294),n(3905));const a={title:"Global Styles",description:"How to manage and inject global styles in Chakra UI",category:"features"},r=void 0,s={unversionedId:"styled-system/global-styles",id:"styled-system/global-styles",title:"Global Styles",description:"How to manage and inject global styles in Chakra UI",source:"@site/content/docs/styled-system/global-styles.mdx",sourceDirName:"styled-system",slug:"/styled-system/global-styles",permalink:"/docs/styled-system/global-styles",draft:!1,tags:[],version:"current",lastUpdatedBy:"IshikawaMasashi",lastUpdatedAt:1675293453,formattedLastUpdatedAt:"Feb 1, 2023",frontMatter:{title:"Global Styles",description:"How to manage and inject global styles in Chakra UI",category:"features"},sidebar:"defaultSidebar",previous:{title:"CSS Variables",permalink:"/docs/styled-system/css-variables"},next:{title:"Gradient",permalink:"/docs/styled-system/gradient"}},i={},p=[{value:"How it works",id:"how-it-works",level:2},{value:"Default styles",id:"default-styles",level:2},{value:"Styling non-Chakra elements globally",id:"styling-non-chakra-elements-globally",level:2}],d={toc:p};function c(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,l.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"GlobalStyle")," is a new component in v1 that injects styles defined in\n",(0,o.kt)("inlineCode",{parentName:"p"},"theme.styles.global")," into the global styles of your app or website."),(0,o.kt)("p",null,"This allows you to define theme-aware styles for any elements."),(0,o.kt)("h2",{id:"how-it-works"},"How it works"),(0,o.kt)("p",null,"By using ",(0,o.kt)("inlineCode",{parentName:"p"},"ChakraProvider")," at the root of your application, we automatically\nrender a ",(0,o.kt)("inlineCode",{parentName:"p"},"GlobalStyle")," component. Here's what ",(0,o.kt)("inlineCode",{parentName:"p"},"GlobalStyle")," does under the hood:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Reads the styles defined in ",(0,o.kt)("inlineCode",{parentName:"li"},"theme.styles.global"),", this style can be a style\nobject or a function that returns a style object."),(0,o.kt)("li",{parentName:"ul"},"Process the styles and pass it to emotion's ",(0,o.kt)("inlineCode",{parentName:"li"},"Global")," component which is used\nto handle global style injection.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"// 1. Using a style object\nconst theme = {\n  styles: {\n    global: {\n      'html, body': {\n        color: 'gray.600',\n        lineHeight: 'tall',\n      },\n      a: {\n        color: 'teal.500',\n      },\n    },\n  },\n};\n\n// 2. Using a function\n// NB: Chakra gives you access to `colorMode` and `theme` in `props`\nconst theme = {\n  styles: {\n    global: (props) => ({\n      'html, body': {\n        fontSize: 'sm',\n        color: props.colorMode === 'dark' ? 'white' : 'gray.600',\n        lineHeight: 'tall',\n      },\n      a: {\n        color: props.colorMode === 'dark' ? 'teal.300' : 'teal.500',\n      },\n    }),\n  },\n};\n")),(0,o.kt)("h2",{id:"default-styles"},"Default styles"),(0,o.kt)("p",null,"The default Chakra theme provides sensible global styles. Here's what it looks\nlike:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import { mode } from '@chakra-ui/theme-tools';\n\nconst styles = {\n  global: (props) => ({\n    body: {\n      fontFamily: 'body',\n      color: mode('gray.800', 'whiteAlpha.900')(props),\n      bg: mode('white', 'gray.800')(props),\n      lineHeight: 'base',\n    },\n    '*::placeholder': {\n      color: mode('gray.400', 'whiteAlpha.400')(props),\n    },\n    '*, *::before, &::after': {\n      borderColor: mode('gray.200', 'whiteAlpha.300')(props),\n      wordWrap: 'break-word',\n    },\n  }),\n};\n")),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("inlineCode",{parentName:"p"},"mode(lightMode, darkMode)(props)")," function is the same as\n",(0,o.kt)("inlineCode",{parentName:"p"},'props.colorMode === "dark" ? darkMode : lightMode'),".")),(0,o.kt)("h2",{id:"styling-non-chakra-elements-globally"},"Styling non-Chakra elements globally"),(0,o.kt)("p",null,"When combining Chakra with other libraries, you might need a way to style some\nelements in those libraries using the theme defined tokens."),(0,o.kt)("p",null,"Let's say you have a blog written in ",(0,o.kt)("inlineCode",{parentName:"p"},"mdx")," and you'd like to style all the MDX\nelements globally. Here's what you'll do."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"// 1. Wrap the rendered mdx in a container\nconst MDXWrapper = (props) => <div className='mdx-prose' {...props} />;\n\n// 2. Define global styles\n// PRO TIP: Again, you can also use the function version here\nconst theme = {\n  styles: {\n    global: {\n      '.mdx-prose': {\n        h1: {\n          fontSize: 'xl',\n          mb: '4',\n        },\n        p: {\n          fontSize: 'sm',\n          lineHeight: '1.4',\n        },\n      },\n    },\n  },\n};\n\n// 3. That's it! Your app will now read and use the global styles\n")))}c.isMDXComponent=!0}}]);