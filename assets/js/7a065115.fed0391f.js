"use strict";(self.webpackChunkchakra_ui_docs=self.webpackChunkchakra_ui_docs||[]).push([[4416],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>u});var o=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=o.createContext({}),p=function(e){var n=o.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},d=function(e){var n=p(e.components);return o.createElement(s.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},k=o.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),k=p(t),u=a,m=k["".concat(s,".").concat(u)]||k[u]||c[u]||r;return t?o.createElement(m,l(l({ref:n},d),{},{components:t})):o.createElement(m,l({ref:n},d))}));function u(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,l=new Array(r);l[0]=k;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var p=2;p<r;p++)l[p]=t[p];return o.createElement.apply(null,l)}return o.createElement.apply(null,t)}k.displayName="MDXCreateElement"},60854:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>m,frontMatter:()=>r,metadata:()=>i,toc:()=>p});var o=t(87462),a=(t(67294),t(3905));const r={},l="Skeleton",i={unversionedId:"components/feedback/skeleton/index",id:"components/feedback/skeleton/index",title:"Skeleton",description:"Skeleton is used to display the loading state of some component.",source:"@site/content/docs/components/feedback/skeleton/index.mdx",sourceDirName:"components/feedback/skeleton",slug:"/components/feedback/skeleton/",permalink:"/shenlanguage/docs/components/feedback/skeleton/",draft:!1,tags:[],version:"current",lastUpdatedBy:"IshikawaMasashi",lastUpdatedAt:1675135144,formattedLastUpdatedAt:"Jan 31, 2023",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"Theming",permalink:"/shenlanguage/docs/components/feedback/progress/theming"},next:{title:"Theming",permalink:"/shenlanguage/docs/components/feedback/skeleton/theming"}},s={},p=[{value:"Import",id:"import",level:2},{value:"Usage",id:"usage",level:2},{value:"Circle and Text Skeleton",id:"circle-and-text-skeleton",level:3},{value:"Skeleton color",id:"skeleton-color",level:3},{value:"Skipping the skeleton when content is loaded",id:"skipping-the-skeleton-when-content-is-loaded",level:3},{value:"<code>fadeDuration</code> with <code>isLoaded</code>",id:"fadeduration-with-isloaded",level:3},{value:"Props",id:"props",level:2}],d=e=>function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",n)},c=d("ComponentLinks"),k=d("PropsTable"),u={toc:p};function m(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,o.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"skeleton"},"Skeleton"),(0,a.kt)("p",null,"Skeleton is used to display the loading state of some component."),(0,a.kt)(c,{github:{package:"skeleton"},npm:{package:"@chakra-ui/skeleton"},theme:{componentName:"skeleton"},mdxType:"ComponentLinks"}),(0,a.kt)("h2",{id:"import"},"Import"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"import { Skeleton, SkeletonCircle, SkeletonText } from '@chakra-ui/react';\n")),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)("p",null,"You can use it as a standalone component."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"<Stack>\n  <Skeleton height='20px' />\n  <Skeleton height='20px' />\n  <Skeleton height='20px' />\n</Stack>\n")),(0,a.kt)("p",null,"Or to wrap another component to take the same height and width."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"<Skeleton>\n  <div>contents wrapped</div>\n  <div>won't be visible</div>\n</Skeleton>\n")),(0,a.kt)("p",null,"Useful when fetching remote data."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"import { Box } from '@chakra-ui/react';\n\nfunction Card() {\n  const { data, loading, error } = useRemoteData();\n  if (error) return <Box children='error' />;\n  return (\n    <Box>\n      <Skeleton isLoaded={!loading}>\n        <Heading>{data.title}</Heading>\n      </Skeleton>\n    </Box>\n  );\n}\n")),(0,a.kt)("h3",{id:"circle-and-text-skeleton"},"Circle and Text Skeleton"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"<Box padding='6' boxShadow='lg' bg='white'>\n  <SkeletonCircle size='10' />\n  <SkeletonText mt='4' noOfLines={4} spacing='4' />\n</Box>\n")),(0,a.kt)("h3",{id:"skeleton-color"},"Skeleton color"),(0,a.kt)("p",null,"You can change the animation color with ",(0,a.kt)("inlineCode",{parentName:"p"},"startColor")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"endColor"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"<Skeleton startColor='pink.500' endColor='orange.500' height='20px' />\n")),(0,a.kt)("h3",{id:"skipping-the-skeleton-when-content-is-loaded"},"Skipping the skeleton when content is loaded"),(0,a.kt)("p",null,"You can prevent the skeleton from rendering using the ",(0,a.kt)("inlineCode",{parentName:"p"},"isLoaded")," prop."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"<Skeleton isLoaded>\n  <span>Chakra ui is cool</span>\n</Skeleton>\n")),(0,a.kt)("h3",{id:"fadeduration-with-isloaded"},(0,a.kt)("inlineCode",{parentName:"h3"},"fadeDuration")," with ",(0,a.kt)("inlineCode",{parentName:"h3"},"isLoaded")),(0,a.kt)("p",null,"With the ",(0,a.kt)("inlineCode",{parentName:"p"},"fadeDuration")," prop, you can control the duration of the content fading\ninto view. The value in this prop is a number representing seconds which is part\nof the ",(0,a.kt)("inlineCode",{parentName:"p"},"animation")," style prop that is rendered to the component. Default value\nis ",(0,a.kt)("inlineCode",{parentName:"p"},"0.4")," seconds."),(0,a.kt)("p",null,"This requires the ",(0,a.kt)("inlineCode",{parentName:"p"},"isLoaded")," prop, and the animation is best visible when the\n",(0,a.kt)("inlineCode",{parentName:"p"},"isLoaded")," prop is toggled to ",(0,a.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"function Example() {\n  const [isLoaded, setIsLoaded] = React.useState(false);\n  return (\n    <Stack padding={4} spacing={1}>\n      <Skeleton height='40px' isLoaded={isLoaded}>\n        <Box>Hello World!</Box>\n      </Skeleton>\n      <Skeleton\n        height='40px'\n        isLoaded={isLoaded}\n        bg='green.500'\n        color='white'\n        fadeDuration={1}\n      >\n        <Box>Hello React!</Box>\n      </Skeleton>\n      <Skeleton\n        height='40px'\n        isLoaded={isLoaded}\n        fadeDuration={4}\n        bg='blue.500'\n        color='white'\n      >\n        <Box>Hello ChakraUI!</Box>\n      </Skeleton>\n\n      <Box textAlign='center'>\n        <Button onClick={() => setIsLoaded((v) => !v)}>toggle</Button>\n      </Box>\n    </Stack>\n  );\n}\n")),(0,a.kt)("h2",{id:"props"},"Props"),(0,a.kt)(k,{of:"Skeleton",mdxType:"PropsTable"}))}m.isMDXComponent=!0}}]);