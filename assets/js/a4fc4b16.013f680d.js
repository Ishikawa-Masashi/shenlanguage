"use strict";(self.webpackChunkchakra_ui_docs=self.webpackChunkchakra_ui_docs||[]).push([[2175],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>u});var a=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=a.createContext({}),d=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=d(e.components);return a.createElement(s.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},p=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=d(t),u=o,g=p["".concat(s,".").concat(u)]||p[u]||m[u]||r;return t?a.createElement(g,i(i({ref:n},c),{},{components:t})):a.createElement(g,i({ref:n},c))}));function u(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,i=new Array(r);i[0]=p;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var d=2;d<r;d++)i[d]=t[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}p.displayName="MDXCreateElement"},30999:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>c,default:()=>h,frontMatter:()=>d,metadata:()=>m,toc:()=>u});var a=t(87462),o=(t(67294),t(3905));const r=(i="SandpackEditor",function(e){return console.warn("Component "+i+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",e)});var i;const l={toc:[]};function s(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,a.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)(r,{mdxType:"SandpackEditor"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"badge-theme.tsx","badge-theme.tsx":!0},'import { defineStyle, defineStyleConfig } from "@chakra-ui/react";\n\nconst baseStyle = defineStyle({\n  borderRadius: 0, // disable the border radius\n});\n\nconst sizes = {\n  xl: defineStyle({\n    fontSize: "xl",\n  }),\n};\n\nconst customVariant = defineStyle((props) => {\n  const { colorScheme: c } = props;\n  return {\n    borderRadius: "xl",\n    bg: `${c}.500`,\n    _dark: {\n      bg: `${c}.300`,\n    },\n  };\n});\n\nexport const badgeTheme = defineStyleConfig({\n  baseStyle,\n  sizes,\n  variants: {\n    custom: customVariant,\n  },\n  defaultProps: {\n    colorScheme: "green", // set the default color scheme to green\n  },\n});\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"badge.tsx","badge.tsx":!0},'import { Badge, Box, HStack, IconButton, useColorMode } from "@chakra-ui/react";\nimport { FaMoon, FaSun } from "react-icons/fa";\n\nconst BadgePreview = () => {\n  const { toggleColorMode, colorMode } = useColorMode();\n\n  return (\n    <Box position="relative" h="100vh">\n      <HStack spacing={8} p={12}>\n        <Badge>Themed subtle badge</Badge>\n        <Badge variant="solid">Themed solid badge</Badge>\n        <Badge variant="outline">Themed outline badge</Badge>\n      </HStack>\n      <HStack spacing={8} p={12}>\n        <Badge variant="custom">Themed custom badge</Badge>\n        <Badge size="xl">XL Badge</Badge>\n      </HStack>\n      <IconButton\n        aria-label="toggle theme"\n        rounded="full"\n        size="xs"\n        position="absolute"\n        bottom={4}\n        left={4}\n        onClick={toggleColorMode}\n        icon={colorMode === "dark" ? <FaSun /> : <FaMoon />}\n      />\n    </Box>\n  );\n};\n\nexport default BadgePreview;\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"App.tsx","App.tsx":!0},'import { ChakraProvider, extendTheme } from "@chakra-ui/react";\nimport Badge from "./badge";\nimport { badgeTheme } from "./badge-theme";\n\nconst theme = extendTheme({\n  components: {\n    Badge: badgeTheme,\n  },\n});\n\nconst App = () => {\n  return (\n    <ChakraProvider theme={theme}>\n      <Badge />\n    </ChakraProvider>\n  );\n};\n\nexport default App;\n'))))}s.isMDXComponent=!0;const d={},c="Theming",m={unversionedId:"components/data-display/badge/theming",id:"components/data-display/badge/theming",title:"Theming",description:"The Badge component is a single part component. All of the styling is applied",source:"@site/content/docs/components/data-display/badge/theming.mdx",sourceDirName:"components/data-display/badge",slug:"/components/data-display/badge/theming",permalink:"/docs/components/data-display/badge/theming",draft:!1,tags:[],version:"current",lastUpdatedBy:"IshikawaMasashi",lastUpdatedAt:1675135144,formattedLastUpdatedAt:"Jan 31, 2023",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"Badge",permalink:"/docs/components/data-display/badge/"},next:{title:"Code",permalink:"/docs/components/data-display/code/"}},p={},u=[{value:"Theming properties",id:"theming-properties",level:2},{value:"Theming utilities",id:"theming-utilities",level:2},{value:"Customizing the default theme",id:"customizing-the-default-theme",level:2},{value:"Adding a custom size",id:"adding-a-custom-size",level:2},{value:"Adding a custom variant",id:"adding-a-custom-variant",level:2},{value:"Using a custom color scheme",id:"using-a-custom-color-scheme",level:2},{value:"Changing the default properties",id:"changing-the-default-properties",level:2},{value:"Showcase",id:"showcase",level:2}],g={toc:u};function h(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,a.Z)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"theming"},"Theming"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"Badge")," component is a single part component. All of the styling is applied\ndirectly to the ",(0,o.kt)("inlineCode",{parentName:"p"},"span")," element."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"To learn more about styling single part components, visit the\n",(0,o.kt)("a",{parentName:"p",href:"/docs/styled-system/theming/component-style#styling-single-part-components"},"Component Style"),"\npage.")),(0,o.kt)("h2",{id:"theming-properties"},"Theming properties"),(0,o.kt)("p",null,"The properties that affect the theming of the ",(0,o.kt)("inlineCode",{parentName:"p"},"Badge")," component are:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"variant"),": The visual variant of the badge. Defaults to ",(0,o.kt)("inlineCode",{parentName:"li"},"subtle"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"colorScheme"),": The color scheme of the badge. Defaults to ",(0,o.kt)("inlineCode",{parentName:"li"},"gray"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"size"),": The size of the badge.")),(0,o.kt)("h2",{id:"theming-utilities"},"Theming utilities"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"defineStyle"),": a function used to create style objects."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"defineStyleConfig"),": a function used to define the style configuration for a\nsingle part component.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},'import { defineStyle, defineStyleConfig } from "@chakra-ui/react";\n')),(0,o.kt)("h2",{id:"customizing-the-default-theme"},"Customizing the default theme"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},'import { defineStyle, defineStyleConfig } from "@chakra-ui/react";\n\nconst boxy = defineStyle({\n  border: "1px solid", // change the appearance of the border\n  borderRadius: 0, // remove the border radius\n});\n\nexport const badgeTheme = defineStyleConfig({\n  variants: { outline },\n});\n')),(0,o.kt)("p",null,"After customizing the badge theme, we can import it in our theme file and add it\nin the ",(0,o.kt)("inlineCode",{parentName:"p"},"components")," property:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},'import { extendTheme } from "@chakra-ui/react";\nimport { badgeTheme } from "./components/badge";\n\nexport const theme = extendTheme({\n  components: { Badge: badgeTheme },\n});\n')),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"This is a crucial step to make sure that any changes that we make to the badge\ntheme are applied.")),(0,o.kt)("h2",{id:"adding-a-custom-size"},"Adding a custom size"),(0,o.kt)("p",null,"Let's assume we want to include an extra large badge size. Here's how we can do\nthat:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { defineStyle, defineStyleConfig } from '@chakra-ui/react'\n\nconst xl = defineStyle({\n  fontSize: 'xl',\n})\n\nexport const badgeTheme = defineStyleConfig({\n  sizes: { xl },\n})\n\n// Now we can use the new `xl` size\n<Badge size='xl'>XL Badge</Badge>\n")),(0,o.kt)("p",null,"Every time you're adding anything new to the theme, you'd need to run the CLI\ncommand to get proper autocomplete in your IDE. You can learn more about the CLI\ntool ",(0,o.kt)("a",{parentName:"p",href:"/docs/styled-system/cli"},"here"),"."),(0,o.kt)("h2",{id:"adding-a-custom-variant"},"Adding a custom variant"),(0,o.kt)("p",null,"Let's assume we want to include a custom branded variant. Here's how we can do\nthat:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { defineStyle, defineStyleConfig } from '@chakra-ui/react'\n\nconst brandPrimary = defineStyle({\n  background: 'orange.500',\n  color: 'white',\n  fontFamily: 'serif',\n  fontWeight: 'normal',\n\n  // let's also provide dark mode alternatives\n  _dark: {\n    background: 'orange.300',\n    color: 'orange.800',\n  }\n})\n\nexport const badgeTheme = defineStyleConfig({\n  variants: { brandPrimary }\n})\n\n// Now we can use the new `brandPrimary` variant\n<Badge variant='brandPrimary'>...</Badge>\n")),(0,o.kt)("h2",{id:"using-a-custom-color-scheme"},"Using a custom color scheme"),(0,o.kt)("p",null,"Let's assume we want to use our own custom color scale based on our brand. We'd\nneed to define the color scale first in the main theme file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { extendTheme } from '@chakra-ui/react'\n\nexport const theme = extendTheme({\n  colors: {\n    brand: {\n      100: '#9520e4',\n      ...\n      200: '#33006d',\n      ...\n      800: '#1a0044',\n    }\n  }\n})\n")),(0,o.kt)("p",null,"Then, we can use the custom color scale as the color scheme for the badge:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},'<Badge colorScheme="brand">...</Badge>\n')),(0,o.kt)("h2",{id:"changing-the-default-properties"},"Changing the default properties"),(0,o.kt)("p",null,"Let's assume we want to change the default size, variant or color scheme of\nevery badge in our app. Here's how we can do that:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { defineStyleConfig } from '@chakra-ui/react'\n\nexport const badgeTheme = defineStyleConfig({\n  defaultProps: {\n    size: 'xl',\n    variant: 'outline',\n    colorScheme: 'brand',\n  },\n})\n\n// This saves you time, instead of manually setting the size,\n// variant and color scheme every time you use a badge:\n<Badge size=\"xl\" variant=\"outline\" colorScheme=\"brand\">...</Badge>\n")),(0,o.kt)("h2",{id:"showcase"},"Showcase"),(0,o.kt)(s,{mdxType:"Showcase"}))}h.isMDXComponent=!0}}]);