"use strict";(self.webpackChunkchakra_ui_docs=self.webpackChunkchakra_ui_docs||[]).push([[8978],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>d});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var i=n.createContext({}),c=function(e){var t=n.useContext(i),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},p=function(e){var t=c(e.components);return n.createElement(i.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(a),d=r,h=u["".concat(i,".").concat(d)]||u[d]||m[d]||o;return a?n.createElement(h,s(s({ref:t},p),{},{components:a})):n.createElement(h,s({ref:t},p))}));function d(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,s=new Array(o);s[0]=u;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:r,s[1]=l;for(var c=2;c<o;c++)s[c]=a[c];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},87222:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var n=a(87462),r=(a(67294),a(3905));const o={title:"CSS Variables",description:"Working with color mode (light and dark mode) in Chakra UI",category:"features"},s=void 0,l={unversionedId:"styled-system/css-variables",id:"styled-system/css-variables",title:"CSS Variables",description:"Working with color mode (light and dark mode) in Chakra UI",source:"@site/content/docs/styled-system/css-variables.mdx",sourceDirName:"styled-system",slug:"/styled-system/css-variables",permalink:"/shenlanguage/docs/styled-system/css-variables",draft:!1,tags:[],version:"current",lastUpdatedBy:"IshikawaMasashi",lastUpdatedAt:1675135144,formattedLastUpdatedAt:"Jan 31, 2023",frontMatter:{title:"CSS Variables",description:"Working with color mode (light and dark mode) in Chakra UI",category:"features"},sidebar:"defaultSidebar",previous:{title:"Color Mode",permalink:"/shenlanguage/docs/styled-system/color-mode"},next:{title:"Global Styles",permalink:"/shenlanguage/docs/styled-system/global-styles"}},i={},c=[{value:"Overview",id:"overview",level:2},{value:"Converting theme tokens to CSS variables",id:"converting-theme-tokens-to-css-variables",level:2},{value:"Consuming CSS Variables",id:"consuming-css-variables",level:2},{value:"Styling non-chakra components",id:"styling-non-chakra-components",level:3},{value:"Attaching the CSS variables",id:"attaching-the-css-variables",level:2},{value:"Creating scoped, theme-aware CSS variables",id:"creating-scoped-theme-aware-css-variables",level:2}],p={toc:c};function m(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,'Chakra UI now converts theme tokens (colors, font sizes, etc) to CSS Custom\nProperties (also known as "CSS variables").'),(0,r.kt)("p",null,"CSS variables are now supported in all modern browsers, and we think they are\nuseful to:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"avoid prop interpolations;"),(0,r.kt)("li",{parentName:"ul"},"avoid classname regeneration from\n",(0,r.kt)("a",{parentName:"li",href:"https://emotion.sh/docs/introduction"},"emotion"),";"),(0,r.kt)("li",{parentName:"ul"},"reduce runtime evaluation of token values in Theme context;"),(0,r.kt)("li",{parentName:"ul"},"use theme token outside Chakra's component (embedded forms, markdown content,\netc.)")),(0,r.kt)("h2",{id:"overview"},"Overview"),(0,r.kt)("p",null,"There are three main components you should know about when using CSS variables:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"How Chakra converts tokens to custom properties"),(0,r.kt)("li",{parentName:"ul"},"How to consume them in and outside Chakra's component"),(0,r.kt)("li",{parentName:"ul"},"Where we attach the custom properties to")),(0,r.kt)("h2",{id:"converting-theme-tokens-to-css-variables"},"Converting theme tokens to CSS variables"),(0,r.kt)("p",null,"By default, Chakra UI converts theme tokens defined in your theme (or our\ndefault theme) to CSS variables internally so you don't have to."),(0,r.kt)("p",null,"Given a theme object that looks like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"const theme = {\n  fontSizes: {\n    lg: '18px',\n  },\n  colors: {\n    gray: {\n      100: '#fafafa',\n      200: '#f7f7f7',\n    },\n  },\n};\n")),(0,r.kt)("p",null,"When you pass this theme to the ",(0,r.kt)("inlineCode",{parentName:"p"},"ChakraProvider"),", we'll automatically generate\nCSS variables that look like:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-css"},":root {\n  --chakra-fontSizes-lg: '18px';\n  --chakra-colors-gray-100: '#fafafa';\n  --chakra-colors-gray-200: '#f7f7f7';\n}\n")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"The generated custom properties are prefixed with ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"chakra-*"))," to\navoid conflicts with third party CSS.")),(0,r.kt)("h2",{id:"consuming-css-variables"},"Consuming CSS Variables"),(0,r.kt)("p",null,"When using Chakra's components, we manage the conversion of theme tokens to\ntheir respective css variable."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'// You type this\n<Box color="gray.100" />\n\n// Chakra generates something like\n.css-box {\n   color: "var(--chakra-colors-gray-100)"\n}\n')),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"We do this automatically when you pass style props or use the ",(0,r.kt)("inlineCode",{parentName:"p"},"sx")," prop.")),(0,r.kt)("h3",{id:"styling-non-chakra-components"},"Styling non-chakra components"),(0,r.kt)("p",null,"In certain scenarios, you might need to style components that are not managed by\nChakra. In this case, you can use the raw CSS variable values."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"// let's say you have an embedded form\n<FormiumForm />\n")),(0,r.kt)("p",null,"You can write custom CSS to style the components"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-css"},".formium-form {\n  color: var(--chakra-colors-gray-700);\n  background-color: var(--chakra-colors-gray-50);\n}\n")),(0,r.kt)("p",null,"or wrap the component in ",(0,r.kt)("inlineCode",{parentName:"p"},"<Box/>")," and style it with convenience."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"<Box sx={{ '.formium': { bg: 'gray.50', color: 'gray.700' } }}>\n  <FormiumForm />\n</Box>\n")),(0,r.kt)("h2",{id:"attaching-the-css-variables"},"Attaching the CSS variables"),(0,r.kt)("p",null,"By default, Chakra attaches the generated CSS variables to the ",(0,r.kt)("inlineCode",{parentName:"p"},":root")," element."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"The ",(0,r.kt)("inlineCode",{parentName:"p"},":root")," pseudo-class represents the top level of the HTML document.")),(0,r.kt)("p",null,"To change the root element that Chakra attaches the CSS variables to, pass the\n",(0,r.kt)("inlineCode",{parentName:"p"},"cssVarsRoot")," prop to ",(0,r.kt)("inlineCode",{parentName:"p"},"ChakraProvider")," and set its value to the css selector of\nthe element you want."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"<ChakraProvider cssVarsRoot='#app'>\n  <App />\n</ChakraProvider>\n")),(0,r.kt)("h2",{id:"creating-scoped-theme-aware-css-variables"},"Creating scoped, theme-aware CSS variables"),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"This is experimental and might be removed in future versions")),(0,r.kt)("p",null,"When using the ",(0,r.kt)("inlineCode",{parentName:"p"},"sx")," prop or the ",(0,r.kt)("inlineCode",{parentName:"p"},"chakra(...)")," factory, you can create variables\nthat reference theme tokens. This makes it possible to change property values\nbased on breakpoint, or light/dark mode with ease."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"<Box\n  sx={{\n    // \"colors.gray.100\" is shorthand for `var(--chakra-colors-gray.100)`\n    '--banner-color': 'colors.gray.100',\n    '.external-banner': {\n      bg: 'var(--banner-color)',\n      '.button': {\n        borderColor: 'var(--banner-color)',\n      },\n    },\n  }}\n>\n  <ExternalBanner />\n</Box>\n")))}m.isMDXComponent=!0}}]);