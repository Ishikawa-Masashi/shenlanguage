"use strict";(self.webpackChunkchakra_ui_docs=self.webpackChunkchakra_ui_docs||[]).push([[7694],{3905:(e,t,a)=>{a.d(t,{Zo:()=>i,kt:()=>m});var r=a(67294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function p(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},o=Object.keys(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var l=r.createContext({}),c=function(e){var t=r.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},i=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,o=e.originalType,l=e.parentName,i=p(e,["components","mdxType","originalType","parentName"]),d=c(a),m=n,h=d["".concat(l,".").concat(m)]||d[m]||u[m]||o;return a?r.createElement(h,s(s({ref:t},i),{},{components:a})):r.createElement(h,s({ref:t},i))}));function m(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=a.length,s=new Array(o);s[0]=d;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p.mdxType="string"==typeof e?e:n,s[1]=p;for(var c=2;c<o;c++)s[c]=a[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,a)}d.displayName="MDXCreateElement"},81645:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>p,toc:()=>c});var r=a(87462),n=(a(67294),a(3905));const o={title:"Chakra Factory",package:"@chakra-ui/system",description:"Using the chakra factory and elements",category:"features"},s=void 0,p={unversionedId:"styled-system/chakra-factory",id:"styled-system/chakra-factory",title:"Chakra Factory",description:"Using the chakra factory and elements",source:"@site/content/docs/styled-system/chakra-factory.mdx",sourceDirName:"styled-system",slug:"/styled-system/chakra-factory",permalink:"/shenlanguage/docs/styled-system/chakra-factory",draft:!1,tags:[],version:"current",lastUpdatedBy:"IshikawaMasashi",lastUpdatedAt:1675135144,formattedLastUpdatedAt:"Jan 31, 2023",frontMatter:{title:"Chakra Factory",package:"@chakra-ui/system",description:"Using the chakra factory and elements",category:"features"},sidebar:"defaultSidebar",previous:{title:"useToken",permalink:"/shenlanguage/docs/hooks/use-token"},next:{title:"CLI",permalink:"/shenlanguage/docs/styled-system/cli"}},l={},c=[{value:"Chakra JSX Elements",id:"chakra-jsx-elements",level:2},{value:"Chakra factory function",id:"chakra-factory-function",level:2},{value:"Attaching styles",id:"attaching-styles",level:3},{value:"Allowing custom props to be forwarded",id:"allowing-custom-props-to-be-forwarded",level:3}],i={toc:c};function u(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,r.Z)({},i,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"Chakra factory serves as an ",(0,n.kt)("strong",{parentName:"p"},"object of chakra enabled JSX elements"),", and also\n",(0,n.kt)("strong",{parentName:"p"},"a function that can be used to enable custom component")," receive chakra's\nstyle props."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},'import { chakra } from "@chakra-ui/react"\n')),(0,n.kt)("h2",{id:"chakra-jsx-elements"},"Chakra JSX Elements"),(0,n.kt)("p",null,"Create base html elements with theme-aware style props using ",(0,n.kt)("inlineCode",{parentName:"p"},"chakra.<element>"),"\nnotation. For example, if you want a plain html button with ability to pass\nchakra styles, you can write ",(0,n.kt)("inlineCode",{parentName:"p"},"<chakra.button />"),"."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-tsx"},"<chakra.button\n  px='3'\n  py='2'\n  bg='green.200'\n  rounded='md'\n  _hover={{ bg: 'green.300' }}\n>\n  Click me\n</chakra.button>\n")),(0,n.kt)("p",null,"This reduces the need to create custom component wrappers and name them. This\nsyntax is available for common html elements. See the reference for the full\n",(0,n.kt)("a",{parentName:"p",href:"https://github.com/chakra-ui/chakra-ui/blob/main/packages/system/src/system.utils.ts#L9"},"list of elements"),"\nsupported."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-tsx"},"<chakra.h1 fontSize='lg'> Heading </chakra.h1>\n")),(0,n.kt)("h2",{id:"chakra-factory-function"},"Chakra factory function"),(0,n.kt)("p",null,"This is a function that converts ",(0,n.kt)("strong",{parentName:"p"},"non-chakra components")," or ",(0,n.kt)("strong",{parentName:"p"},"jsx element")," to\nchakra-enabled components so you can pass style props to them."),(0,n.kt)("p",null,"Consider a package called ",(0,n.kt)("inlineCode",{parentName:"p"},"react-input-autoresize"),", let's use the chakra factory\nfunction to make possible to pass style props."),(0,n.kt)("p",null,"The function will infer the prop types from the wrapped component and also add\nchakra style props."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-tsx"},"import { chakra } from '@chakra-ui/react';\nimport Textarea from 'react-input-autoresize';\n\nconst AutoResizeInput = chakra(Textarea);\n\nfunction Example() {\n  return <AutoResizeInput bg='red.200' fontSize='12px' />;\n}\n")),(0,n.kt)("admonition",{type:"note"},(0,n.kt)("p",{parentName:"admonition"},"Considering that Chakra uses ",(0,n.kt)("inlineCode",{parentName:"p"},"emotion")," under the hood, ensure the non-chakra\ncomponent accepts ",(0,n.kt)("inlineCode",{parentName:"p"},"className")," as props for this to work correctly")),(0,n.kt)("h3",{id:"attaching-styles"},"Attaching styles"),(0,n.kt)("p",null,"In some instances, you might need to attach specific styles to the component\nwrapped in the chakra factory"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-tsx"},"const AutoResizeInput = chakra(AutoResizeInput, {\n  baseStyle: {\n    bg: 'papayawhip',\n    color: 'red.500',\n  },\n});\n")),(0,n.kt)("p",null,"You can also use the chakra factory on jsx elements as well."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-tsx"},"const Card = chakra('div', {\n  baseStyle: {\n    shadow: 'lg',\n    rounded: 'lg',\n    bg: 'white',\n  },\n});\n")),(0,n.kt)("h3",{id:"allowing-custom-props-to-be-forwarded"},"Allowing custom props to be forwarded"),(0,n.kt)("p",null,"By default, the ",(0,n.kt)("inlineCode",{parentName:"p"},"chakra")," factory only filters chakra related style props from\ngetting to the DOM. For more fine-grained control of how and what prop should be\nforwarded, pass the ",(0,n.kt)("inlineCode",{parentName:"p"},"shouldForwardProp")," option."),(0,n.kt)("p",null,"Here's a simple example that allows all props (including chakra's style props)\nto pass through except the ",(0,n.kt)("inlineCode",{parentName:"p"},"sample")," prop."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-tsx"},"const Div = chakra('div', {\n  shouldForwardProp: (prop) => !['sample'].includes(prop),\n});\n")),(0,n.kt)("p",null,"Another example that combines the default ",(0,n.kt)("inlineCode",{parentName:"p"},"shouldForwardProp")," from Chakra UI\nwith custom logic."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-tsx"},"import { chakra, shouldForwardProp } from '@chakra-ui/react';\n\nconst Div = chakra('div', {\n  shouldForwardProp: (prop) => {\n    // don't forward Chakra's props\n    const isChakraProp = !shouldForwardProp(prop);\n    if (isChakraProp) return false;\n\n    // else, only forward `sample` prop\n    return ['sample'].includes(prop);\n  },\n});\n")),(0,n.kt)("p",null,"To filter non-HTML attributes, you can leverage\n",(0,n.kt)("a",{parentName:"p",href:"https://github.com/emotion-js/emotion/tree/master/packages/is-prop-valid"},"@emotion/is-prop-valid"),"\npackage."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-tsx"},"import isValidHTMLProp from '@emotion/is-prop-valid';\nimport { chakra, shouldForwardProp } from '@chakra-ui/react';\n\nconst Div = chakra('div', {\n  shouldForwardProp: (prop) => {\n    // don't forward Chakra's props\n    const isChakraProp = !shouldForwardProp(prop);\n    if (isChakraProp) return false;\n\n    // forward valid HTML props\n    const isValidProp = isValidHTMLProp(prop);\n    if (isValidProp) return true;\n\n    // else, only forward `sample` prop\n    return ['sample'].includes(prop);\n  },\n});\n")))}u.isMDXComponent=!0}}]);