"use strict";(self.webpackChunkchakra_ui_docs=self.webpackChunkchakra_ui_docs||[]).push([[8944],{3905:(e,n,o)=>{o.d(n,{Zo:()=>p,kt:()=>m});var t=o(67294);function a(e,n,o){return n in e?Object.defineProperty(e,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[n]=o,e}function l(e,n){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),o.push.apply(o,t)}return o}function i(e){for(var n=1;n<arguments.length;n++){var o=null!=arguments[n]?arguments[n]:{};n%2?l(Object(o),!0).forEach((function(n){a(e,n,o[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):l(Object(o)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(o,n))}))}return e}function r(e,n){if(null==e)return{};var o,t,a=function(e,n){if(null==e)return{};var o,t,a={},l=Object.keys(e);for(t=0;t<l.length;t++)o=l[t],n.indexOf(o)>=0||(a[o]=e[o]);return a}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(t=0;t<l.length;t++)o=l[t],n.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(a[o]=e[o])}return a}var s=t.createContext({}),d=function(e){var n=t.useContext(s),o=n;return e&&(o="function"==typeof e?e(n):i(i({},n),e)),o},p=function(e){var n=d(e.components);return t.createElement(s.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},u=t.forwardRef((function(e,n){var o=e.components,a=e.mdxType,l=e.originalType,s=e.parentName,p=r(e,["components","mdxType","originalType","parentName"]),u=d(o),m=a,h=u["".concat(s,".").concat(m)]||u[m]||c[m]||l;return o?t.createElement(h,i(i({ref:n},p),{},{components:o})):t.createElement(h,i({ref:n},p))}));function m(e,n){var o=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var l=o.length,i=new Array(l);i[0]=u;var r={};for(var s in n)hasOwnProperty.call(n,s)&&(r[s]=n[s]);r.originalType=e,r.mdxType="string"==typeof e?e:a,i[1]=r;for(var d=2;d<l;d++)i[d]=o[d];return t.createElement.apply(null,i)}return t.createElement.apply(null,o)}u.displayName="MDXCreateElement"},76977:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>h,frontMatter:()=>l,metadata:()=>r,toc:()=>d});var t=o(87462),a=(o(67294),o(3905));const l={},i="Modal",r={unversionedId:"components/overlay/modal/index",id:"components/overlay/modal/index",title:"Modal",description:"A modal is a dialog that focuses the user's attention exclusively on an",source:"@site/content/docs/components/overlay/modal/index.mdx",sourceDirName:"components/overlay/modal",slug:"/components/overlay/modal/",permalink:"/docs/components/overlay/modal/",draft:!1,tags:[],version:"current",lastUpdatedBy:"IshikawaMasashi",lastUpdatedAt:1675135144,formattedLastUpdatedAt:"Jan 31, 2023",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"Theming",permalink:"/docs/components/overlay/menu/theming"},next:{title:"Theming",permalink:"/docs/components/overlay/modal/theming"}},s={},d=[{value:"Import",id:"import",level:2},{value:"Usage",id:"usage",level:2},{value:"Control Focus when Modal closes",id:"control-focus-when-modal-closes",level:3},{value:"Block Scrolling when Modal opens",id:"block-scrolling-when-modal-opens",level:3},{value:"Focus on specific element",id:"focus-on-specific-element",level:3},{value:"Close Modal on Overlay Click",id:"close-modal-on-overlay-click",level:3},{value:"Make modal vertically centered",id:"make-modal-vertically-centered",level:3},{value:"Changing the transition",id:"changing-the-transition",level:3},{value:"Modal overflow behavior",id:"modal-overflow-behavior",level:3},{value:"Modal Sizes",id:"modal-sizes",level:3},{value:"Making other elements Inert",id:"making-other-elements-inert",level:3},{value:"Prevent focus trapping",id:"prevent-focus-trapping",level:3},{value:"Styling the backdrop",id:"styling-the-backdrop",level:3},{value:"Accessibility",id:"accessibility",level:2},{value:"Keyboard and Focus Management",id:"keyboard-and-focus-management",level:3},{value:"ARIA",id:"aria",level:3},{value:"Props",id:"props",level:2},{value:"Modal Props",id:"modal-props",level:3},{value:"Other components",id:"other-components",level:3}],p=e=>function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",n)},c=p("ComponentLinks"),u=p("PropsTable"),m={toc:d};function h(e){let{components:n,...o}=e;return(0,a.kt)("wrapper",(0,t.Z)({},m,o,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"modal"},"Modal"),(0,a.kt)("p",null,"A modal is a dialog that focuses the user's attention exclusively on an\ninformation via a window that is overlaid on primary content."),(0,a.kt)(c,{github:{package:"modal"},npm:{package:"@chakra-ui/modal"},theme:{componentName:"modal"},mdxType:"ComponentLinks"}),(0,a.kt)("h2",{id:"import"},"Import"),(0,a.kt)("p",null,"Chakra exports 7 components to help you create any modal dialog."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Modal"),": The wrapper that provides context for its children."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"ModalOverlay"),": The dimmed overlay behind the modal dialog."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"ModalContent"),": The container for the modal dialog's content."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"ModalHeader"),": The header that labels the modal dialog."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"ModalFooter"),": The footer that houses the modal actions."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"ModalBody"),": The wrapper that houses the modal's main content."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"ModalCloseButton"),": The button that closes the modal.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'import {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n} from "@chakra-ui/react";\n')),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)("p",null,"When the modal opens:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"focus is trapped within the modal and set to the first tabbable element."),(0,a.kt)("li",{parentName:"ul"},"content behind a modal dialog is ",(0,a.kt)("strong",{parentName:"li"},"inert"),", meaning that users cannot interact\nwith it.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},'function BasicUsage() {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  return (\n    <>\n      <Button onClick={onOpen}>Open Modal</Button>\n\n      <Modal isOpen={isOpen} onClose={onClose}>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>Modal Title</ModalHeader>\n          <ModalCloseButton />\n          <ModalBody>\n            <Lorem count={2} />\n          </ModalBody>\n\n          <ModalFooter>\n            <Button colorScheme="blue" mr={3} onClick={onClose}>\n              Close\n            </Button>\n            <Button variant="ghost">Secondary Action</Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n}\n')),(0,a.kt)("h3",{id:"control-focus-when-modal-closes"},"Control Focus when Modal closes"),(0,a.kt)("p",null,"When the dialog closes, it returns focus to the element that triggered it. Set\n",(0,a.kt)("inlineCode",{parentName:"p"},"finalFocusRef")," to change the element that should receive focus when the modal\ncloses."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},'function ReturnFocus() {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const finalRef = React.useRef(null);\n\n  return (\n    <>\n      <Box ref={finalRef} tabIndex={-1} aria-label="Focus moved to this box">\n        Some other content that\'ll receive focus on close.\n      </Box>\n\n      <Button mt={4} onClick={onOpen}>\n        Open Modal\n      </Button>\n      <Modal finalFocusRef={finalRef} isOpen={isOpen} onClose={onClose}>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>Modal Title</ModalHeader>\n          <ModalCloseButton />\n          <ModalBody>\n            <Lorem count={2} />\n          </ModalBody>\n\n          <ModalFooter>\n            <Button colorScheme="blue" mr={3} onClick={onClose}>\n              Close\n            </Button>\n            <Button variant="ghost">Secondary Action</Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n}\n')),(0,a.kt)("h3",{id:"block-scrolling-when-modal-opens"},"Block Scrolling when Modal opens"),(0,a.kt)("p",null,"For accessibility, it is recommended to block scrolling on the main document\nbehind the modal. Chakra does this by default but you can set\n",(0,a.kt)("inlineCode",{parentName:"p"},"blockScrollOnMount")," to ",(0,a.kt)("inlineCode",{parentName:"p"},"false")," to allow scrolling behind the modal."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},'function BasicUsage() {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  return (\n    <>\n      <Button onClick={onOpen}>Open Modal</Button>\n\n      <Modal blockScrollOnMount={false} isOpen={isOpen} onClose={onClose}>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>Modal Title</ModalHeader>\n          <ModalCloseButton />\n          <ModalBody>\n            <Text fontWeight="bold" mb="1rem">\n              You can scroll the content behind the modal\n            </Text>\n            <Lorem count={2} />\n          </ModalBody>\n\n          <ModalFooter>\n            <Button colorScheme="blue" mr={3} onClick={onClose}>\n              Close\n            </Button>\n            <Button variant="ghost">Secondary Action</Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n}\n')),(0,a.kt)("h3",{id:"focus-on-specific-element"},"Focus on specific element"),(0,a.kt)("p",null,"Chakra automatically sets focus on the first tabbable element in the modal.\nHowever, there might be scenarios where you need to manually control where focus\ngoes."),(0,a.kt)("p",null,"Chakra provides 2 props for this use case:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"initialFocusRef"),": The ",(0,a.kt)("inlineCode",{parentName:"li"},"ref")," of the component that receives focus when the\nmodal opens."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"finalFocusRef"),": The ",(0,a.kt)("inlineCode",{parentName:"li"},"ref")," of the component that receives focus when the modal\ncloses.")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"If you set ",(0,a.kt)("inlineCode",{parentName:"p"},"finalFocusRef"),", internally we set ",(0,a.kt)("inlineCode",{parentName:"p"},"returnFocusOnClose")," to ",(0,a.kt)("inlineCode",{parentName:"p"},"false"),"\nso it doesn't return focus to the element that triggered it.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},'function InitialFocus() {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  const initialRef = React.useRef(null);\n  const finalRef = React.useRef(null);\n\n  return (\n    <>\n      <Button onClick={onOpen}>Open Modal</Button>\n      <Button ml={4} ref={finalRef}>\n        I\'ll receive focus on close\n      </Button>\n\n      <Modal\n        initialFocusRef={initialRef}\n        finalFocusRef={finalRef}\n        isOpen={isOpen}\n        onClose={onClose}\n      >\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>Create your account</ModalHeader>\n          <ModalCloseButton />\n          <ModalBody pb={6}>\n            <FormControl>\n              <FormLabel>First name</FormLabel>\n              <Input ref={initialRef} placeholder="First name" />\n            </FormControl>\n\n            <FormControl mt={4}>\n              <FormLabel>Last name</FormLabel>\n              <Input placeholder="Last name" />\n            </FormControl>\n          </ModalBody>\n\n          <ModalFooter>\n            <Button colorScheme="blue" mr={3}>\n              Save\n            </Button>\n            <Button onClick={onClose}>Cancel</Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n}\n')),(0,a.kt)("h3",{id:"close-modal-on-overlay-click"},"Close Modal on Overlay Click"),(0,a.kt)("p",null,"By default, the modal closes when you click its overlay. You can set\n",(0,a.kt)("inlineCode",{parentName:"p"},"closeOnOverlayClick")," to ",(0,a.kt)("inlineCode",{parentName:"p"},"false")," if you want the modal to stay visible."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},'function ManualClose() {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  return (\n    <>\n      <Button onClick={onOpen}>Open Modal</Button>\n\n      <Modal closeOnOverlayClick={false} isOpen={isOpen} onClose={onClose}>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>Create your account</ModalHeader>\n          <ModalCloseButton />\n          <ModalBody pb={6}>\n            <Lorem count={2} />\n          </ModalBody>\n\n          <ModalFooter>\n            <Button colorScheme="blue" mr={3}>\n              Save\n            </Button>\n            <Button onClick={onClose}>Cancel</Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n}\n')),(0,a.kt)("h3",{id:"make-modal-vertically-centered"},"Make modal vertically centered"),(0,a.kt)("p",null,"By default the modal has a vertical offset of ",(0,a.kt)("inlineCode",{parentName:"p"},"3.75rem")," which you can change by\npassing ",(0,a.kt)("inlineCode",{parentName:"p"},"top")," to the ",(0,a.kt)("inlineCode",{parentName:"p"},"ModalContent"),". If you need to vertically center the modal,\npass the ",(0,a.kt)("inlineCode",{parentName:"p"},"isCentered")," prop."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"If the content within the modal overflows beyond the viewport, don't use this\nprop. Try setting the ",(0,a.kt)("a",{parentName:"p",href:"#modal-overflow-behavior"},"overflow behavior")," instead.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"function VerticallyCenter() {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  return (\n    <>\n      <Button onClick={onOpen}>Trigger modal</Button>\n\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>Modal Title</ModalHeader>\n          <ModalCloseButton />\n          <ModalBody>\n            <Lorem count={2} />\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={onClose}>Close</Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n}\n")),(0,a.kt)("h3",{id:"changing-the-transition"},"Changing the transition"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"Modal")," comes with a scale transition by default but you can change it by\npassing a ",(0,a.kt)("inlineCode",{parentName:"p"},"motionPreset")," prop, and set its value to either ",(0,a.kt)("inlineCode",{parentName:"p"},"slideInBottom"),",\n",(0,a.kt)("inlineCode",{parentName:"p"},"slideInRight"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"scale")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"none"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},'function TransitionExample() {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  return (\n    <>\n      <Button onClick={onOpen}>Open Modal</Button>\n      <Modal\n        isCentered\n        onClose={onClose}\n        isOpen={isOpen}\n        motionPreset="slideInBottom"\n      >\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>Modal Title</ModalHeader>\n          <ModalCloseButton />\n          <ModalBody>\n            <Lorem count={2} />\n          </ModalBody>\n          <ModalFooter>\n            <Button colorScheme="blue" mr={3} onClick={onClose}>\n              Close\n            </Button>\n            <Button variant="ghost">Secondary Action</Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n}\n')),(0,a.kt)("h3",{id:"modal-overflow-behavior"},"Modal overflow behavior"),(0,a.kt)("p",null,"If the content within the modal overflows beyond the viewport, you can use the\n",(0,a.kt)("inlineCode",{parentName:"p"},"scrollBehavior")," to control how scrolling should happen."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"If set to ",(0,a.kt)("inlineCode",{parentName:"li"},"inside"),", scroll only occurs within the ",(0,a.kt)("inlineCode",{parentName:"li"},"ModalBody"),"."),(0,a.kt)("li",{parentName:"ul"},"If set to ",(0,a.kt)("inlineCode",{parentName:"li"},"outside"),", the entire ",(0,a.kt)("inlineCode",{parentName:"li"},"ModalContent")," will scroll within the\nviewport.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},'function ScrollingExample() {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [scrollBehavior, setScrollBehavior] = React.useState("inside");\n\n  const btnRef = React.useRef(null);\n  return (\n    <>\n      <RadioGroup value={scrollBehavior} onChange={setScrollBehavior}>\n        <Stack direction="row">\n          <Radio value="inside">inside</Radio>\n          <Radio value="outside">outside</Radio>\n        </Stack>\n      </RadioGroup>\n\n      <Button mt={3} ref={btnRef} onClick={onOpen}>\n        Trigger modal\n      </Button>\n\n      <Modal\n        onClose={onClose}\n        finalFocusRef={btnRef}\n        isOpen={isOpen}\n        scrollBehavior={scrollBehavior}\n      >\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>Modal Title</ModalHeader>\n          <ModalCloseButton />\n          <ModalBody>\n            <Lorem count={15} />\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={onClose}>Close</Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n}\n')),(0,a.kt)("h3",{id:"modal-sizes"},"Modal Sizes"),(0,a.kt)("p",null,"Pass the ",(0,a.kt)("inlineCode",{parentName:"p"},"size")," prop if you need to adjust the size of the modal. Values can be\n",(0,a.kt)("inlineCode",{parentName:"p"},"xs"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"sm"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"md"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"lg"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"xl"),", or ",(0,a.kt)("inlineCode",{parentName:"p"},"full"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},'function SizeExample() {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [size, setSize] = React.useState("md");\n\n  const handleSizeClick = (newSize) => {\n    setSize(newSize);\n    onOpen();\n  };\n\n  const sizes = ["xs", "sm", "md", "lg", "xl", "full"];\n\n  return (\n    <>\n      {sizes.map((size) => (\n        <Button\n          onClick={() => handleSizeClick(size)}\n          key={size}\n          m={4}\n        >{`Open ${size} Modal`}</Button>\n      ))}\n\n      <Modal onClose={onClose} size={size} isOpen={isOpen}>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>Modal Title</ModalHeader>\n          <ModalCloseButton />\n          <ModalBody>\n            <Lorem count={2} />\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={onClose}>Close</Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n}\n')),(0,a.kt)("h3",{id:"making-other-elements-inert"},"Making other elements Inert"),(0,a.kt)("p",null,"When the modal is open, it is rendered within a portal and all its siblings have\n",(0,a.kt)("inlineCode",{parentName:"p"},"aria-hidden")," set to ",(0,a.kt)("inlineCode",{parentName:"p"},"true")," so the only thing screen readers see is the modal.\nTo disable this behavior, set ",(0,a.kt)("inlineCode",{parentName:"p"},"useInert")," to ",(0,a.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,a.kt)("h3",{id:"prevent-focus-trapping"},"Prevent focus trapping"),(0,a.kt)("p",null,"By default the modal, alert dialog and drawer locks the focus inside them.\nNormally this is what you want to maintain accessibility standards."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"While strongly discourage this use case")," due to the accessibility impacts,\nthere are certain situations where you might not want the modal to trap focus."),(0,a.kt)("p",null,"To prevent focus trapping, pass ",(0,a.kt)("inlineCode",{parentName:"p"},"trapFocus")," and set its value to ",(0,a.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,a.kt)("h3",{id:"styling-the-backdrop"},"Styling the backdrop"),(0,a.kt)("p",null,"The backdrop's background by default is set to ",(0,a.kt)("inlineCode",{parentName:"p"},"blackAlpha.600"),", but if you want\nto achieve a different style you can also use the backdrop style props, like\n",(0,a.kt)("inlineCode",{parentName:"p"},"backdropBlur"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"backdropBrightness"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"backdropContrast"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"backdropHueRotate"),",\n",(0,a.kt)("inlineCode",{parentName:"p"},"backdropInvert"),", and ",(0,a.kt)("inlineCode",{parentName:"p"},"backdropSaturate"),". To use these style props, you'd have\nto set the ",(0,a.kt)("inlineCode",{parentName:"p"},"backdropFilter")," prop to ",(0,a.kt)("inlineCode",{parentName:"p"},"auto"),"."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Please be aware that not every browser supports the\n",(0,a.kt)("a",{parentName:"p",href:"https://caniuse.com/css-backdrop-filter"},"backdrop-filter")," CSS property, the\nexample below included.")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"filter")," property will have no effect on the background because the Modal is\nrendered within a ",(0,a.kt)("inlineCode",{parentName:"p"},"Portal"),". This mean you can only style components within the\nModal by using this property."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},'function BackdropExample() {\n  const OverlayOne = () => (\n    <ModalOverlay\n      bg="blackAlpha.300"\n      backdropFilter="blur(10px) hue-rotate(90deg)"\n    />\n  );\n\n  const OverlayTwo = () => (\n    <ModalOverlay\n      bg="none"\n      backdropFilter="auto"\n      backdropInvert="80%"\n      backdropBlur="2px"\n    />\n  );\n\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [overlay, setOverlay] = React.useState(<OverlayOne />);\n\n  return (\n    <>\n      <Button\n        onClick={() => {\n          setOverlay(<OverlayOne />);\n          onOpen();\n        }}\n      >\n        Use Overlay one\n      </Button>\n      <Button\n        ml="4"\n        onClick={() => {\n          setOverlay(<OverlayTwo />);\n          onOpen();\n        }}\n      >\n        Use Overlay two\n      </Button>\n      <Modal isCentered isOpen={isOpen} onClose={onClose}>\n        {overlay}\n        <ModalContent>\n          <ModalHeader>Modal Title</ModalHeader>\n          <ModalCloseButton />\n          <ModalBody>\n            <Text>Custom backdrop filters!</Text>\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={onClose}>Close</Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n}\n')),(0,a.kt)("h2",{id:"accessibility"},"Accessibility"),(0,a.kt)("h3",{id:"keyboard-and-focus-management"},"Keyboard and Focus Management"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"When the modal opens, focus is trapped within it."),(0,a.kt)("li",{parentName:"ul"},"When the modal opens, focus is automatically set to the first enabled element,\nor the element from ",(0,a.kt)("inlineCode",{parentName:"li"},"initialFocusRef"),"."),(0,a.kt)("li",{parentName:"ul"},"When the modal closes, focus returns to the element that was focused before\nthe modal activated, or the element from ",(0,a.kt)("inlineCode",{parentName:"li"},"finalFocusRef"),"."),(0,a.kt)("li",{parentName:"ul"},"Clicking on the overlay closes the Modal."),(0,a.kt)("li",{parentName:"ul"},"Pressing ",(0,a.kt)("kbd",null,"Esc")," closes the Modal."),(0,a.kt)("li",{parentName:"ul"},"Scrolling is blocked on the elements behind the modal."),(0,a.kt)("li",{parentName:"ul"},"The modal is rendered in a portal attached to the end of ",(0,a.kt)("inlineCode",{parentName:"li"},"document.body")," to\nbreak it out of the source order and make it easy to add ",(0,a.kt)("inlineCode",{parentName:"li"},"aria-hidden")," to its\nsiblings.")),(0,a.kt)("h3",{id:"aria"},"ARIA"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The ",(0,a.kt)("inlineCode",{parentName:"li"},"ModalContent")," has ",(0,a.kt)("inlineCode",{parentName:"li"},"aria-modal")," set to ",(0,a.kt)("inlineCode",{parentName:"li"},"true"),"."),(0,a.kt)("li",{parentName:"ul"},"The ",(0,a.kt)("inlineCode",{parentName:"li"},"ModalContent")," has ",(0,a.kt)("inlineCode",{parentName:"li"},"aria-labelledby")," set to the ",(0,a.kt)("inlineCode",{parentName:"li"},"id")," of the ",(0,a.kt)("inlineCode",{parentName:"li"},"ModalHeader"),"."),(0,a.kt)("li",{parentName:"ul"},"The ",(0,a.kt)("inlineCode",{parentName:"li"},"ModalContent")," has ",(0,a.kt)("inlineCode",{parentName:"li"},"aria-describedby")," set to the ",(0,a.kt)("inlineCode",{parentName:"li"},"id")," of the ",(0,a.kt)("inlineCode",{parentName:"li"},"ModalBody"),".")),(0,a.kt)("h2",{id:"props"},"Props"),(0,a.kt)("h3",{id:"modal-props"},"Modal Props"),(0,a.kt)(u,{of:"Modal",mdxType:"PropsTable"}),(0,a.kt)("h3",{id:"other-components"},"Other components"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"ModalOverlay"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"ModalHeader"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"ModalFooter")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"ModalBody")," composes ",(0,a.kt)("inlineCode",{parentName:"li"},"Box"),"\ncomponent."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"ModalCloseButton")," composes ",(0,a.kt)("inlineCode",{parentName:"li"},"CloseButton"),".")))}h.isMDXComponent=!0}}]);