"use strict";(self.webpackChunkchakra_ui_docs=self.webpackChunkchakra_ui_docs||[]).push([[3123],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>c});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),m=p(n),c=r,k=m["".concat(s,".").concat(c)]||m[c]||u[c]||o;return n?a.createElement(k,i(i({ref:t},d),{},{components:n})):a.createElement(k,i({ref:t},d))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},66318:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const o={title:"useRadioGroup",package:"@chakra-ui/radio",description:"React hooks to manage radio groups."},i=void 0,l={unversionedId:"hooks/use-radio-group",id:"hooks/use-radio-group",title:"useRadioGroup",description:"React hooks to manage radio groups.",source:"@site/content/docs/hooks/use-radio-group.mdx",sourceDirName:"hooks",slug:"/hooks/use-radio-group",permalink:"/docs/hooks/use-radio-group",draft:!1,tags:[],version:"current",lastUpdatedBy:"IshikawaMasashi",lastUpdatedAt:1675135144,formattedLastUpdatedAt:"Jan 31, 2023",frontMatter:{title:"useRadioGroup",package:"@chakra-ui/radio",description:"React hooks to manage radio groups."},sidebar:"defaultSidebar",previous:{title:"usePrefersReducedMotion",permalink:"/docs/hooks/use-prefers-reduced-motion"},next:{title:"useRadio",permalink:"/docs/hooks/use-radio"}},s={},p=[{value:"Import",id:"import",level:2},{value:"Return value",id:"return-value",level:2},{value:"Usage",id:"usage",level:2},{value:"Using <code>isDisabled</code> and <code>isFocusable</code>",id:"using-isdisabled-and-isfocusable",level:2},{value:"Parameters",id:"parameters",level:2}],d=(u="PropsTable",function(e){return console.warn("Component "+u+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)});var u;const m={toc:p};function c(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"useRadioGroup")," is a custom hook that provides all the state management logic\nfor a group of radios."),(0,r.kt)("h2",{id:"import"},"Import"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import { useRadioGroup } from '@chakra-ui/react'\n")),(0,r.kt)("h2",{id:"return-value"},"Return value"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"useRadioGroup")," hook returns following props"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"value")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"StringOrNumber[]")),(0,r.kt)("td",{parentName:"tr",align:null},"The value of radio group.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"name")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:null},"The name of the radio options. All radio options must use the same name.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"ref")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"any")),(0,r.kt)("td",{parentName:"tr",align:null},"The ref of the radio group.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"isDisabled")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"boolean")),(0,r.kt)("td",{parentName:"tr",align:null},"A utility to manage disabled state.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"isFocusable")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"boolean")),(0,r.kt)("td",{parentName:"tr",align:null},"A utility to manage focused state.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"focus")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"() => void")),(0,r.kt)("td",{parentName:"tr",align:null},"A utility function to set the focus on the first enabled radio.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"onChange")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"(nextValue: EventOrValue) => void")),(0,r.kt)("td",{parentName:"tr",align:null},"The onChange handler for the radio group.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"setValue")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"(state: StringOrNumber[]) => void")),(0,r.kt)("td",{parentName:"tr",align:null},"A function to set the value of the radio group.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"getRadioProps")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"(props?: Dict) => Dict")),(0,r.kt)("td",{parentName:"tr",align:null},"A function that takes root props and handles changes for the radio group")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"getRootProps")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"(props?: Dict) => Dict")),(0,r.kt)("td",{parentName:"tr",align:null},"A function that takes radio root props and handles changes for the radio group")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"htmlProps")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"{}")),(0,r.kt)("td",{parentName:"tr",align:null},"A function that takes radio root props and handles changes for the radio group")))),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"function Example() {\n  function CustomRadio(props) {\n    const { image, ...radioProps } = props\n    const { state, getInputProps, getCheckboxProps, htmlProps, getLabelProps } =\n      useRadio(radioProps)\n\n    return (\n      <chakra.label {...htmlProps} cursor='pointer'>\n        <input {...getInputProps({})} hidden />\n        <Box\n          {...getCheckboxProps()}\n          bg={state.isChecked ? 'green.200' : 'transparent'}\n          w={12}\n          p={1}\n          rounded='full'\n        >\n          <Image src={image} rounded='full' {...getLabelProps()} />\n        </Box>\n      </chakra.label>\n    )\n  }\n\n  const toast = useToast()\n\n  const avatars = [\n    { name: 'Kat', image: 'https://randomuser.me/api/portraits/women/44.jpg' },\n    { name: 'Kevin', image: 'https://randomuser.me/api/portraits/men/86.jpg' },\n    { name: 'Andy', image: 'https://randomuser.me/api/portraits/men/29.jpg' },\n    { name: 'Jess', image: 'https://randomuser.me/api/portraits/women/95.jpg' },\n  ]\n\n  const handleChange = (value) => {\n    toast({\n      title: `The value got changed to ${value}!`,\n      status: 'success',\n      duration: 2000,\n    })\n  }\n\n  const { value, getRadioProps, getRootProps } = useRadioGroup({\n    defaultValue: 'Kevin',\n    onChange: handleChange,\n  })\n\n  return (\n    <Stack {...getRootProps()}>\n      <Text>The selected radio is: {value}</Text>\n      <HStack>\n        {avatars.map((avatar) => {\n          return (\n            <CustomRadio\n              key={avatar.name}\n              image={avatar.image}\n              {...getRadioProps({ value: avatar.name })}\n            />\n          )\n        })}\n      </HStack>\n    </Stack>\n  )\n}\n")),(0,r.kt)("h2",{id:"using-isdisabled-and-isfocusable"},"Using ",(0,r.kt)("inlineCode",{parentName:"h2"},"isDisabled")," and ",(0,r.kt)("inlineCode",{parentName:"h2"},"isFocusable")),(0,r.kt)("p",null,"When providing the hook with the ",(0,r.kt)("inlineCode",{parentName:"p"},"isDisabled")," and/or ",(0,r.kt)("inlineCode",{parentName:"p"},"isFocusable")," props, this\nvalues also need to be returned and passed to the radio inputs."),(0,r.kt)("p",null,"This is different than simply passing them as props to the ",(0,r.kt)("inlineCode",{parentName:"p"},"RadioGroup"),"\ncomponent because the component has access to context to supply the values to\nthe radio inputs."),(0,r.kt)("p",null,"Below is an example with ",(0,r.kt)("inlineCode",{parentName:"p"},"isDisabled")," being passed to the hook and used with the\n",(0,r.kt)("inlineCode",{parentName:"p"},"Radio")," component. If needed, this custom component can than be controllable by\na parent, which would supply the logic to determine if the inputs need to be\ndisabled."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"manual=true",manual:"true"},"function CustomRadioGroup(props) {\n  const { options, ...rest } = props\n\n  const { getRootProps, getRadioProps, isDisabled } = useRadioGroup({\n    ...rest,\n  })\n\n  const group = getRootProps()\n\n  return (\n    <HStack {...group}>\n      {options.map((value) => {\n        const radio = getRadioProps({ value })\n        return (\n          <Radio isDisabled={isDisabled} key={value} {...radio}>\n            {value}\n          </Radio>\n        )\n      })}\n    </HStack>\n  )\n}\n\nfunction Parent() {\n  const [isDisabled, setIsDisabled] = useState(true)\n\n  // Some logic to handle the disabled state\n\n  return (\n    <>\n      {/* Any components above */}\n      <CustomRadioGroup\n        isDisabled={isDisabled}\n        options={['react', 'vue', 'svelte']}\n      />\n      {/* Any components below */}\n    </>\n  )\n}\n\nrender(<Parent />)\n")),(0,r.kt)("h2",{id:"parameters"},"Parameters"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"useRadioGroup")," hook accepts an object with the following properties:"),(0,r.kt)(d,{of:"useRadioGroup",mdxType:"PropsTable"}))}c.isMDXComponent=!0}}]);