"use strict";(self.webpackChunkchakra_ui_docs=self.webpackChunkchakra_ui_docs||[]).push([[7024],{3905:(e,n,t)=>{t.d(n,{Zo:()=>m,kt:()=>d});var a=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function r(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},s=Object.keys(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=a.createContext({}),p=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},m=function(e){var n=p(e.components);return a.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},c=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,s=e.originalType,l=e.parentName,m=r(e,["components","mdxType","originalType","parentName"]),c=p(t),d=o,h=c["".concat(l,".").concat(d)]||c[d]||u[d]||s;return t?a.createElement(h,i(i({ref:n},m),{},{components:t})):a.createElement(h,i({ref:n},m))}));function d(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var s=t.length,i=new Array(s);i[0]=c;var r={};for(var l in n)hasOwnProperty.call(n,l)&&(r[l]=n[l]);r.originalType=e,r.mdxType="string"==typeof e?e:o,i[1]=r;for(var p=2;p<s;p++)i[p]=t[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}c.displayName="MDXCreateElement"},11760:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>s,metadata:()=>r,toc:()=>p});var a=t(87462),o=(t(67294),t(3905));const s={title:"Component Style",description:"How to create and theme custom components.",category:"theming",sidebar_position:30},i=void 0,r={unversionedId:"styled-system/theming/component-style",id:"styled-system/theming/component-style",title:"Component Style",description:"How to create and theme custom components.",source:"@site/content/docs/styled-system/theming/component-style.mdx",sourceDirName:"styled-system/theming",slug:"/styled-system/theming/component-style",permalink:"/docs/styled-system/theming/component-style",draft:!1,tags:[],version:"current",lastUpdatedBy:"IshikawaMasashi",lastUpdatedAt:1675135144,formattedLastUpdatedAt:"Jan 31, 2023",sidebarPosition:30,frontMatter:{title:"Component Style",description:"How to create and theme custom components.",category:"theming",sidebar_position:30},sidebar:"defaultSidebar",previous:{title:"Customize Theme",permalink:"/docs/styled-system/theming/customize-theme"},next:{title:"Advanced Theming",permalink:"/docs/styled-system/theming/advanced-theming"}},l={},p=[{value:"Base styles and Modifier styles",id:"base-styles-and-modifier-styles",level:2},{value:"Single part and multipart components",id:"single-part-and-multipart-components",level:3},{value:"Styling single part components",id:"styling-single-part-components",level:2},{value:"Consuming style config",id:"consuming-style-config",level:3},{value:"useStyleConfig API",id:"usestyleconfig-api",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Return Value",id:"return-value",level:4},{value:"Styling multipart components",id:"styling-multipart-components",level:2},{value:"Consuming multipart style config",id:"consuming-multipart-style-config",level:3},{value:"useMultiStyleConfig API",id:"usemultistyleconfig-api",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Return Values",id:"return-values",level:4}],m={toc:p};function u(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Writing component styles in a way that is easy to maintain over the life of a\ngrowing and changing project is a challenging task."),(0,o.kt)("p",null,"To solve this, we came up with the idea of style configuration or ",(0,o.kt)("inlineCode",{parentName:"p"},"styleConfig"),".\nThis is a consistent theming API that makes component styling easy to understand\nand maintain."),(0,o.kt)("h2",{id:"base-styles-and-modifier-styles"},"Base styles and Modifier styles"),(0,o.kt)("p",null,"Most component style consists of ",(0,o.kt)("strong",{parentName:"p"},"base or default styles")," and ",(0,o.kt)("strong",{parentName:"p"},"modifier\nstyles")," that alter its size or visual style based on some properties or state."),(0,o.kt)("p",null,"Common modifier styles includes:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Size:")," A component can have different sizes (e.g. small, medium, large)"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Variant:")," A component can have different visual styles (e.g. outline,\nsolid, ghost)"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Color scheme:")," For a given variant, a component can have different color\nschemes (e.g. an outline button with a red color scheme)"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Color mode:")," A component can change its visual styles based on color mode\n(e.g. light or dark).")),(0,o.kt)("h3",{id:"single-part-and-multipart-components"},"Single part and multipart components"),(0,o.kt)("p",null,"Most components we build today are either single part components (e.g. Button,\nBadge) or multipart components (e.g. Tabs, Menu, Modal)."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"A single part component")," is a component that returns a single element. For\nexample, the ",(0,o.kt)("inlineCode",{parentName:"p"},"<Button>")," component renders a ",(0,o.kt)("inlineCode",{parentName:"p"},"<button>")," HTML element:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"// This component renders only one element (<button>)\n<Button>My button</Button>\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"A multipart component")," is a component that has multiple parts, and require\nthese parts to work correctly. This is commonly referred to as a composite\ncomponent."),(0,o.kt)("p",null,"For example, a ",(0,o.kt)("inlineCode",{parentName:"p"},"Tabs")," component consists of ",(0,o.kt)("inlineCode",{parentName:"p"},"TabList"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"Tab"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"TabPanels"),", and\n",(0,o.kt)("inlineCode",{parentName:"p"},"TabPanel"),". Styling this component as a whole might require styling each\ncomponent part."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"<Tabs>\n  <TabList>\n    <Tab>Tab 1</Tab>\n    <Tab>Tab 2</Tab>\n  </TabList>\n  <TabPanels>\n    <TabPanel>Tab 1</TabPanel>\n    <TabPanel>Tab 2</TabPanel>\n  </TabPanels>\n</Tabs>\n")),(0,o.kt)("h2",{id:"styling-single-part-components"},"Styling single part components"),(0,o.kt)("p",null,"The basic API for styling a single part component is:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'import { defineStyleConfig } from "@chakra-ui/react";\n\nexport default defineStyleConfig({\n  // Styles for the base style\n  baseStyle: {},\n  // Styles for the size variations\n  sizes: {},\n  // Styles for the visual style variations\n  variants: {},\n  // The default `size` or `variant` values\n  defaultProps: {},\n});\n')),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"The ",(0,o.kt)("inlineCode",{parentName:"p"},"defineStyleConfig")," function provide us with better type safety out of the\nbox.")),(0,o.kt)("p",null,"Let's say we want to create a custom button component following the design spec\nbelow."),(0,o.kt)("img",{src:"/img/button-spec.png",alt:"Button Spec"}),(0,o.kt)("p",null,"Here's a contrived implementation of the design:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'import { defineStyleConfig } from "@chakra-ui/react";\n\nconst Button = defineStyleConfig({\n  // The styles all button have in common\n  baseStyle: {\n    fontWeight: "bold",\n    textTransform: "uppercase",\n    borderRadius: "base", // <-- border radius is same for all variants and sizes\n  },\n  // Two sizes: sm and md\n  sizes: {\n    sm: {\n      fontSize: "sm",\n      px: 4, // <-- px is short for paddingLeft and paddingRight\n      py: 3, // <-- py is short for paddingTop and paddingBottom\n    },\n    md: {\n      fontSize: "md",\n      px: 6, // <-- these values are tokens from the design system\n      py: 4, // <-- these values are tokens from the design system\n    },\n  },\n  // Two variants: outline and solid\n  variants: {\n    outline: {\n      border: "2px solid",\n      borderColor: "purple.500",\n      color: "purple.500",\n    },\n    solid: {\n      bg: "purple.500",\n      color: "white",\n    },\n  },\n  // The default size and variant values\n  defaultProps: {\n    size: "md",\n    variant: "outline",\n  },\n});\n')),(0,o.kt)("p",null,"Makes sense right? Now, let's update the theme to include this new component\nstyle."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'import { extendTheme } from "@chakra-ui/react";\n\nconst theme = extendTheme({\n  components: {\n    Button,\n  },\n});\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"And that's it!")," You can use your new Button along with its custom variants\nthroughout your app. But what if we want to create a custom component that's not\npart of Chakra UI? Let's use the following design spec for a Card component:"),(0,o.kt)("img",{src:"/img/card-spec.png",alt:"Card Spec"}),(0,o.kt)("p",null,"Here's a contrived implementation of the design:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'const Card = defineStyleConfig({\n  // The styles all Cards have in common\n  baseStyle: {\n    display: "flex",\n    flexDirection: "column",\n    background: "white",\n    alignItems: "center",\n    gap: 6,\n  },\n  // Two variants: rounded and smooth\n  variants: {\n    rounded: {\n      padding: 8,\n      borderRadius: "xl",\n      boxShadow: "xl",\n    },\n    smooth: {\n      padding: 6,\n      borderRadius: "base",\n      boxShadow: "md",\n    },\n  },\n  // The default variant value\n  defaultProps: {\n    variant: "smooth",\n  },\n});\n')),(0,o.kt)("p",null,"As with the Button component, we'll update the theme to include the new Card\ncomponent style."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'import { extendTheme } from "@chakra-ui/react";\n\nconst theme = extendTheme({\n  components: {\n    Card,\n  },\n});\n')),(0,o.kt)("p",null,"But in this case we'd have to ",(0,o.kt)("strong",{parentName:"p"},"consume")," these styles because the ",(0,o.kt)("inlineCode",{parentName:"p"},"Card"),"\ncomponent is not a built-in component in Chakra UI."),(0,o.kt)("h3",{id:"consuming-style-config"},"Consuming style config"),(0,o.kt)("p",null,"Since the new Card component is ",(0,o.kt)("strong",{parentName:"p"},"not")," part of Chakra UI we need to create a\nnew React component and consume the style we just created. We can do that using\n",(0,o.kt)("inlineCode",{parentName:"p"},"useStyleConfig")," hook."),(0,o.kt)("h3",{id:"usestyleconfig-api"},"useStyleConfig API"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"const styles = useStyleConfig(themeKey, props);\n")),(0,o.kt)("h4",{id:"parameters"},"Parameters"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"themeKey"),": the key in ",(0,o.kt)("inlineCode",{parentName:"li"},"theme.components")," that points to the desired\nstyleConfig."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"props"),": the options object used to compute the component styles. It typically\nconsists of the ",(0,o.kt)("inlineCode",{parentName:"li"},"size"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"variant"),", and ",(0,o.kt)("inlineCode",{parentName:"li"},"colorScheme"))),(0,o.kt)("h4",{id:"return-value"},"Return Value"),(0,o.kt)("p",null,"The computed styles for the component based on ",(0,o.kt)("inlineCode",{parentName:"p"},"props")," passed. If no ",(0,o.kt)("inlineCode",{parentName:"p"},"props")," is\npassed, the ",(0,o.kt)("inlineCode",{parentName:"p"},"defaultProps")," defined in the style config will be used."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'import { Box, useStyleConfig } from "@chakra-ui/react";\n\nfunction Card(props) {\n  const { variant, ...rest } = props;\n\n  const styles = useStyleConfig("Card", { variant });\n\n  // Pass the computed styles into the `__css` prop\n  return <Box __css={styles} {...rest} />;\n}\n')),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"Please note that we are passing the styles to the prop ",(0,o.kt)("inlineCode",{parentName:"p"},"__css"),". It has the\nsame API as ",(0,o.kt)("a",{parentName:"p",href:"/docs/styled-system/the-sx-prop"},"the ",(0,o.kt)("inlineCode",{parentName:"a"},"sx")," prop"),", but has a lower\nstyle priority. This means you can override the style properties with chakra\nstyle props.")),(0,o.kt)("p",null,"And lastly - the fun part - let's use our custom Card component anywhere in our\napp:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'// 1. Using the default props defined in style config\nfunction Usage() {\n  return (\n    <Card>\n      <Image\n        src="https://chakra-ui.com/eric.jpg"\n        rounded="full"\n        w={32}\n        h={32}\n        boxShadow="md"\n      />\n      <Heading mt={6} maxW={60} size="lg" textAlign="center" color="gray.700">\n        Welcome back, Eric\n      </Heading>\n      <Text mt={6} mb={6} size="sm" color="blackAlpha.500">\n        Use your fingerprint to continue.\n      </Text>\n      <Image src="/fingerprint.png" w={32} h={32} />\n    </Card>\n  );\n}\n\n// 2. Overriding the default\nfunction Usage() {\n  return (\n    <Card variant="smooth">\n      <Image\n        src="https://chakra-ui.com/eric.jpg"\n        rounded="full"\n        w={32}\n        h={32}\n        boxShadow="md"\n      />\n      <Heading mt={6} maxW={60} size="lg" textAlign="center" color="gray.700">\n        Welcome back, Eric\n      </Heading>\n      <Text mt={6} mb={6} size="sm" color="blackAlpha.500">\n        Use your fingerprint to continue.\n      </Text>\n      <Image src="/fingerprint.png" w={32} h={32} />\n    </Card>\n  );\n}\n')),(0,o.kt)("h2",{id:"styling-multipart-components"},"Styling multipart components"),(0,o.kt)("p",null,"This is very similar to styling single part components with a few differences\nyou need to be aware of."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Given that multipart refers to a component with multiple parts, you'll need to\ndefine the parts, and pass them into the ",(0,o.kt)("inlineCode",{parentName:"li"},"createMultiStyleConfigHelpers"),"\nfunction"),(0,o.kt)("li",{parentName:"ul"},"You'll need to provide styles for each ",(0,o.kt)("inlineCode",{parentName:"li"},"part"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"baseStyle"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"sizes"),", and\n",(0,o.kt)("inlineCode",{parentName:"li"},"variants"),".")),(0,o.kt)("admonition",{title:"Pro tip",type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"If you're looking for a list of parts of a multipart component\nyou can check it by clicking on the ",(0,o.kt)("strong",{parentName:"p"},'"View theme source"')," button at the top\nof the documentation page for that certain component. Check out\n",(0,o.kt)("a",{parentName:"p",href:"https://chakra-ui.com/docs/components/overlay/modal"},"this")," example.")),(0,o.kt)("p",null,"Here's what the style config for multipart components looks like:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"export default {\n  // The parts of the component\n  parts: [],\n  // The base styles for each part\n  baseStyle: {},\n  // The size styles for each part\n  sizes: {},\n  // The variant styles for each part\n  variants: {},\n  // The default `size` or `variant` values\n  defaultProps: {},\n};\n")),(0,o.kt)("p",null,"For example, here's what the style configurations for a custom menu component\nlooks like:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'import { createMultiStyleConfigHelpers } from "@chakra-ui/styled-system";\n\n// This function creates a set of function that helps us create multipart component styles.\nconst helpers = createMultiStyleConfigHelpers(["menu", "item"]);\n\nconst Menu = helpers.defineMultiStyleConfig({\n  baseStyle: {\n    menu: {\n      boxShadow: "lg",\n      rounded: "lg",\n      flexDirection: "column",\n      py: "2",\n    },\n    item: {\n      fontWeight: "medium",\n      lineHeight: "normal",\n      color: "gray.600",\n    },\n  },\n  sizes: {\n    sm: {\n      item: {\n        fontSize: "0.75rem",\n        px: 2,\n        py: 1,\n      },\n    },\n    md: {\n      item: {\n        fontSize: "0.875rem",\n        px: 3,\n        py: 2,\n      },\n    },\n  },\n  variants: {\n    bold: {\n      item: {\n        fontWeight: "bold",\n      },\n      menu: {\n        boxShadow: "xl",\n      },\n    },\n    colorful: {\n      item: {\n        color: "orange.600",\n      },\n      menu: {\n        bg: "orange.100",\n      },\n    },\n  },\n  defaultProps: {\n    size: "md",\n  },\n});\n')),(0,o.kt)("p",null,"Next, we'll update the theme object to include this new component style."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'import { extendTheme } from "@chakra-ui/react";\n\nconst theme = extendTheme({\n  components: {\n    Menu,\n  },\n});\n')),(0,o.kt)("h3",{id:"consuming-multipart-style-config"},"Consuming multipart style config"),(0,o.kt)("p",null,"Now that the style config is hooked into the theme, we can consume within any\ncomponent using ",(0,o.kt)("inlineCode",{parentName:"p"},"useMultiStyleConfig")," hook."),(0,o.kt)("p",null,"We can also mount the computed styles on a specialized context provider called\n",(0,o.kt)("inlineCode",{parentName:"p"},"StylesProvider"),". These styles will now be available to other sub-components. To\nread from the context, use the ",(0,o.kt)("inlineCode",{parentName:"p"},"useStyles")," hook."),(0,o.kt)("h3",{id:"usemultistyleconfig-api"},"useMultiStyleConfig API"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"const styles = useMultiStyleConfig(themeKey, props);\n")),(0,o.kt)("h4",{id:"parameters-1"},"Parameters"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"themeKey"),": the key in ",(0,o.kt)("inlineCode",{parentName:"li"},"theme.components")," that points to the desired\nstyleConfig."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"props"),": an option of the options for computing the final styles. It typically\nconsists of the ",(0,o.kt)("inlineCode",{parentName:"li"},"size"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"variant"),", and ",(0,o.kt)("inlineCode",{parentName:"li"},"colorScheme"),".")),(0,o.kt)("h4",{id:"return-values"},"Return Values"),(0,o.kt)("p",null,"The computed styles for each component part based on ",(0,o.kt)("inlineCode",{parentName:"p"},"size"),", or ",(0,o.kt)("inlineCode",{parentName:"p"},"variant"),". If\nnone of these were passed, the ",(0,o.kt)("inlineCode",{parentName:"p"},"defaultProps")," defined in the styleConfig will be\nused."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'// 1. Import the components and hook\nimport {\n  StylesProvider,\n  useMultiStyleConfig,\n  useStyles,\n} from "@chakra-ui/react";\n\nfunction Menu(props) {\n  const { size, variant, children, ...rest } = props;\n\n  // 2. Consume the `useMultiStyleConfig` hook\n  const styles = useMultiStyleConfig("Menu", { size, variant });\n\n  return (\n    <Flex __css={styles.menu} {...rest}>\n      {/* 3. Mount the computed styles on `StylesProvider` */}\n      <StylesProvider value={styles}>{children}</StylesProvider>\n    </Flex>\n  );\n}\n\nfunction MenuItem(props) {\n  // 4. Read computed `item` styles from styles provider\n  const styles = useStyles();\n  return <Box as="button" __css={styles.item} {...props} />;\n}\n')),(0,o.kt)("p",null,"That's it! We can use our newly created multipart component in our application:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'// 1. Using the default props defined in style config\nfunction Usage() {\n  return (\n    <Menu>\n      <MenuItem>Awesome</MenuItem>\n      <MenuItem>Sauce</MenuItem>\n    </Menu>\n  );\n}\n\n// 2. Overriding the default\nfunction Usage() {\n  return (\n    <Menu size="sm">\n      <MenuItem>Awesome</MenuItem>\n      <MenuItem>Sauce</MenuItem>\n    </Menu>\n  );\n}\n')))}u.isMDXComponent=!0}}]);