"use strict";(self.webpackChunkchakra_ui_docs=self.webpackChunkchakra_ui_docs||[]).push([[7693],{3905:(e,r,n)=>{n.d(r,{Zo:()=>c,kt:()=>m});var t=n(67294);function a(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function o(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function i(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?o(Object(n),!0).forEach((function(r){a(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function s(e,r){if(null==e)return{};var n,t,a=function(e,r){if(null==e)return{};var n,t,a={},o=Object.keys(e);for(t=0;t<o.length;t++)n=o[t],r.indexOf(n)>=0||(a[n]=e[n]);return a}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)n=o[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=t.createContext({}),l=function(e){var r=t.useContext(u),n=r;return e&&(n="function"==typeof e?e(r):i(i({},r),e)),n},c=function(e){var r=l(e.components);return t.createElement(u.Provider,{value:r},e.children)},p={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},d=t.forwardRef((function(e,r){var n=e.components,a=e.mdxType,o=e.originalType,u=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=l(n),m=a,h=d["".concat(u,".").concat(m)]||d[m]||p[m]||o;return n?t.createElement(h,i(i({ref:r},c),{},{components:n})):t.createElement(h,i({ref:r},c))}));function m(e,r){var n=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var u in r)hasOwnProperty.call(r,u)&&(s[u]=r[u]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return t.createElement.apply(null,i)}return t.createElement.apply(null,n)}d.displayName="MDXCreateElement"},96492:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>u,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var t=n(87462),a=(n(67294),n(3905));const o={title:"useMediaQuery",package:"@chakra-ui/hooks",description:"React hook to detect media queries"},i=void 0,s={unversionedId:"hooks/use-media-query",id:"hooks/use-media-query",title:"useMediaQuery",description:"React hook to detect media queries",source:"@site/content/docs/hooks/use-media-query.mdx",sourceDirName:"hooks",slug:"/hooks/use-media-query",permalink:"/shenlanguage/docs/hooks/use-media-query",draft:!1,tags:[],version:"current",lastUpdatedBy:"IshikawaMasashi",lastUpdatedAt:1675135144,formattedLastUpdatedAt:"Jan 31, 2023",frontMatter:{title:"useMediaQuery",package:"@chakra-ui/hooks",description:"React hook to detect media queries"},sidebar:"defaultSidebar",previous:{title:"useDisclosure",permalink:"/shenlanguage/docs/hooks/use-disclosure"},next:{title:"useMergeRefs",permalink:"/shenlanguage/docs/hooks/use-merge-refs"}},u={},l=[{value:"Import",id:"import",level:2},{value:"Return value",id:"return-value",level:2},{value:"Usage",id:"usage",level:2}],c={toc:l};function p(e){let{components:r,...n}=e;return(0,a.kt)("wrapper",(0,t.Z)({},c,n,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"useMediaQuery")," is a custom hook used to help detect whether a single media\nquery or multiple media queries individually match."),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia"},"Learn more about the API and its backgrounds.")),(0,a.kt)("h2",{id:"import"},"Import"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"import { useMediaQuery } from '@chakra-ui/react'\n")),(0,a.kt)("h2",{id:"return-value"},"Return value"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"useMediaQuery")," hook returns an array of booleans, indicating whether the\ngiven query matches or queries match."),(0,a.kt)("p",null,"Why an array? ",(0,a.kt)("inlineCode",{parentName:"p"},"useMediaQuery")," accepts both a string and an array of strings, but\nwill always return an array. This way, you can combine multiple media queries\nwhich will be individually matched in a single call."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Keep in mind this API relies on the users browser support of\n",(0,a.kt)("inlineCode",{parentName:"p"},"window.matchMedia")," and will always return ",(0,a.kt)("inlineCode",{parentName:"p"},"false")," if it is not supported or\ndoes not exist (e.g. during serverside rendering).")),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"function Example() {\n  const [isLargerThan1280] = useMediaQuery('(min-width: 1280px)')\n\n  return (\n    <Text>\n      {isLargerThan1280 ? 'larger than 1280px' : 'smaller than 1280px'}\n    </Text>\n  )\n}\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"function Example() {\n  const [isLargerThanHD, isDisplayingInBrowser] = useMediaQuery([\n    '(min-width: 1920px)',\n    '(display-mode: browser)',\n  ])\n\n  function determineText() {\n    if (isLargerThanHD) {\n      return `high resolution you got there ${\n        isDisplayingInBrowser ? 'in your browser' : 'on your screen'\n      }`\n    }\n\n    return isDisplayingInBrowser\n      ? 'rendering in a browser'\n      : 'rendering on something else, e.g. PWA'\n  }\n\n  return <Text>{determineText()}</Text>\n}\n")))}p.isMDXComponent=!0}}]);