"use strict";(self.webpackChunkchakra_ui_docs=self.webpackChunkchakra_ui_docs||[]).push([[4921],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,p=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=s(n),m=o,k=u["".concat(p,".").concat(m)]||u[m]||c[m]||r;return n?a.createElement(k,i(i({ref:t},d),{},{components:n})):a.createElement(k,i({ref:t},d))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=u;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var s=2;s<r;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},62387:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>c,frontMatter:()=>r,metadata:()=>l,toc:()=>s});var a=n(87462),o=(n(67294),n(3905));const r={title:"Upgrading to v2",description:"How to upgrade your existing Chakra UI projects to v2.0",tags:["migration"]},i=void 0,l={unversionedId:"migration",id:"migration",title:"Upgrading to v2",description:"How to upgrade your existing Chakra UI projects to v2.0",source:"@site/content/getting-started/migration.mdx",sourceDirName:".",slug:"/migration",permalink:"/shenlanguage/migration",draft:!1,tags:[{label:"migration",permalink:"/shenlanguage/tags/migration"}],version:"current",lastUpdatedBy:"IshikawaMasashi",lastUpdatedAt:1675135144,formattedLastUpdatedAt:"Jan 31, 2023",frontMatter:{title:"Upgrading to v2",description:"How to upgrade your existing Chakra UI projects to v2.0",tags:["migration"]},sidebar:"defaultSidebar",previous:{title:"Contributing to Chakra UI",permalink:"/shenlanguage/contributing"},next:{title:"Design Principles",permalink:"/shenlanguage/principles"}},p={},s=[{value:"Upgrade steps",id:"upgrade-steps",level:2},{value:"1. Update your dependencies",id:"1-update-your-dependencies",level:3},{value:"2. Update createStandaloneToast",id:"2-update-createstandalonetoast",level:3},{value:"3. Color mode update",id:"3-color-mode-update",level:3},{value:"Color mode transition",id:"color-mode-transition",level:4},{value:"Using custom storage keys",id:"using-custom-storage-keys",level:4},{value:"Improved cookie support",id:"improved-cookie-support",level:4},{value:"Color mode precedence",id:"color-mode-precedence",level:4},{value:"Breaking changes",id:"breaking-changes",level:4},{value:"4. Deprecated features",id:"4-deprecated-features",level:3},{value:"Button, Icon Button, Input, NumberInput, Radio, Checkbox, Select",id:"button-icon-button-input-numberinput-radio-checkbox-select",level:4},{value:"Checkbox",id:"checkbox",level:4},{value:"Hooks",id:"hooks",level:4},{value:"Grid",id:"grid",level:4},{value:"Styled system",id:"styled-system",level:4},{value:"Theme",id:"theme",level:4}],d={toc:s};function c(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Chakra UI v2 is focused on providing compatibility for React 18. Doing so we had\nto introduce some breaking changes. That lead us to remove some features that we\ndeprecated previously."),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"Still using v0 and want to upgrade to v1? ",(0,o.kt)("a",{parentName:"p",href:"https://v1.chakra-ui.com/guides/migration"},"Go here"))),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"upgrade-steps"},"Upgrade steps"),(0,o.kt)("p",null,"Here is a list of steps to migrate your project to v2."),(0,o.kt)("h3",{id:"1-update-your-dependencies"},"1. Update your dependencies"),(0,o.kt)("p",null,"Make sure you update all ",(0,o.kt)("inlineCode",{parentName:"p"},"@chakra-ui")," packages you use to\n",(0,o.kt)("inlineCode",{parentName:"p"},"@chakra-ui/<package-name>@2.0.0")," and your ",(0,o.kt)("inlineCode",{parentName:"p"},"react")," dependencies to at least v18"),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"Chakra UI v2 is not backwards compatible with React v17 and lower. Make\nsure to upgrade to React v18.")),(0,o.kt)("p",null,"Here is how your dependencies could look like:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "dependencies": {\n    "@chakra-ui/react": "^2.0.0",\n    "react": "^18.0.0",\n    "react-dom": "^18.0.0"\n  },\n  "devDependencies": {\n    "@types/react": "^18.0.0",\n    "@types/react-dom": "^18.0.0"\n  }\n}\n')),(0,o.kt)("p",null,"Step 2 and 3 are only necessary if you used the mentioned functions in your\nproject."),(0,o.kt)("h3",{id:"2-update-createstandalonetoast"},"2. Update createStandaloneToast"),(0,o.kt)("p",null,"We had to make some changes to the our ",(0,o.kt)("inlineCode",{parentName:"p"},"createStandaloneToast")," function, because\nof changes in the way React 18 works."),(0,o.kt)("p",null,"Chakra UI v1 rendered the toast container DOM element for you. The usage of\n",(0,o.kt)("inlineCode",{parentName:"p"},"createStandaloneToast")," could look like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'import { createStandaloneToast } from "@chakra-ui/toast";\n\nconst toast = createStandaloneToast();\ntoast({ title: "Chakra UI" });\n')),(0,o.kt)("p",null,"In v2 you need to render the ",(0,o.kt)("inlineCode",{parentName:"p"},"ToastContainer")," in your application code. This\nallows you have only one React root in your application."),(0,o.kt)("p",null,"Here is an example on how to update your code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'import * as ReactDOM from "react-dom/client";\nimport { createStandaloneToast } from "@chakra-ui/toast";\n\nconst { ToastContainer, toast } = createStandaloneToast();\n\n// render the ToastContainer in your React root\nconst rootElement = document.getElementById("root");\nReactDOM.createRoot(yourRootElement).render(\n  <>\n    <App />\n    <ToastContainer />\n  </>\n);\n\ntoast({ title: "Chakra UI" });\n')),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"Please note: There are ",(0,o.kt)("strong",{parentName:"p"},"no breaking changes")," to the hook ",(0,o.kt)("inlineCode",{parentName:"p"},"useToast"),". There\nare only breaking changes to ",(0,o.kt)("inlineCode",{parentName:"p"},"createStandaloneToast"),".")),(0,o.kt)("h3",{id:"3-color-mode-update"},"3. Color mode update"),(0,o.kt)("h4",{id:"color-mode-transition"},"Color mode transition"),(0,o.kt)("p",null,"Ensure the transition between light/dark modes happens instantly without\ntransition. This helps to avoid a weird UX when switch modes for elements with\ndifferent ",(0,o.kt)("inlineCode",{parentName:"p"},"transition")," definition on the page."),(0,o.kt)("p",null,"To opt out of this feature, set ",(0,o.kt)("inlineCode",{parentName:"p"},"theme.config.disableTransitionOnChange")," to\n",(0,o.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,o.kt)("h4",{id:"using-custom-storage-keys"},"Using custom storage keys"),(0,o.kt)("p",null,"Allow user configure the storage key for the provider and script. We now export\na ",(0,o.kt)("inlineCode",{parentName:"p"},"createLocalStorageManager")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"createCookieStorageManager")," functions."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'const manager = createLocalStorageManager("my-key");\n\nfunction App({ Component, pageProps }) {\n  return (\n    <ChakraProvider colorModeManager={manager}>\n      <Component {...pageProps} />\n    </ChakraProvider>\n  );\n}\n')),(0,o.kt)("p",null,"If you use ",(0,o.kt)("inlineCode",{parentName:"p"},"ColorModeScript"),", you'll need to configure the ",(0,o.kt)("inlineCode",{parentName:"p"},"storageKey")," from\nscript as well."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'<ColorModeScript storageKey="my-key" />\n')),(0,o.kt)("h4",{id:"improved-cookie-support"},"Improved cookie support"),(0,o.kt)("p",null,"Add support for using cookie storage in color mode script. To use cookie script,\nyou can set ",(0,o.kt)("inlineCode",{parentName:"p"},"type")," prop to ",(0,o.kt)("inlineCode",{parentName:"p"},"cookie"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'<ColorModeScript type="cookie" />\n')),(0,o.kt)("h4",{id:"color-mode-precedence"},"Color mode precedence"),(0,o.kt)("p",null,"Refactored color mode to behave consistently between provider and script. The\nnew precedence is as follows:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Get the color mode value in the specified ",(0,o.kt)("inlineCode",{parentName:"li"},"localStorage")," or ",(0,o.kt)("inlineCode",{parentName:"li"},"cookie")),(0,o.kt)("li",{parentName:"ul"},"If value doesn't exist, use the ",(0,o.kt)("inlineCode",{parentName:"li"},"initialColorMode")," value specified.",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"If the initial value is ",(0,o.kt)("inlineCode",{parentName:"li"},"system"),", then we'll compute the color mode using\n",(0,o.kt)("inlineCode",{parentName:"li"},"window.matchMedia(...)")),(0,o.kt)("li",{parentName:"ul"},"else, we use the initial value as is."))),(0,o.kt)("li",{parentName:"ul"},"If user specifies ",(0,o.kt)("inlineCode",{parentName:"li"},"useSystemColorMode: true"),", we'll subscribe to color mode\nchanges from the operating system.")),(0,o.kt)("h4",{id:"breaking-changes"},"Breaking changes"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"In the theme's config, the ",(0,o.kt)("inlineCode",{parentName:"p"},"useSystemColorMode")," property is no longer used to\ndetermine the initial color mode. To achieve that, please use\n",(0,o.kt)("inlineCode",{parentName:"p"},'initialColorMode: "system"'),"."),(0,o.kt)("p",{parentName:"li"},"It is now used to only determine whether to subscribe to color mode changes\nfrom the operating system.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"We removed the references to ",(0,o.kt)("inlineCode",{parentName:"p"},"--chakra-ui-color-mode"),". Use the ",(0,o.kt)("inlineCode",{parentName:"p"},"data-theme"),"\nproperty instead"))),(0,o.kt)("h3",{id:"4-deprecated-features"},"4. Deprecated features"),(0,o.kt)("p",null,"We removed some previously deprecated features from Chakra UI v2. Here is a\ndetailed list of affected components or packages:"),(0,o.kt)("h4",{id:"button-icon-button-input-numberinput-radio-checkbox-select"},"Button, Icon Button, Input, NumberInput, Radio, Checkbox, Select"),(0,o.kt)("p",null,"We removed the ",(0,o.kt)("inlineCode",{parentName:"p"},"isFullWidth")," prop from these components. Use ",(0,o.kt)("inlineCode",{parentName:"p"},'width="full"')," or\n",(0,o.kt)("inlineCode",{parentName:"p"},'width="100%"')," instead."),(0,o.kt)("h4",{id:"checkbox"},"Checkbox"),(0,o.kt)("p",null,"We removed the ",(0,o.kt)("inlineCode",{parentName:"p"},"defaultIsChecked")," prop from the ",(0,o.kt)("inlineCode",{parentName:"p"},"Checkbox")," component. Use the\n",(0,o.kt)("inlineCode",{parentName:"p"},"defaultChecked")," prop instead."),(0,o.kt)("h4",{id:"hooks"},"Hooks"),(0,o.kt)("p",null,"We removed the ",(0,o.kt)("inlineCode",{parentName:"p"},"useEventCallback")," hook"),(0,o.kt)("h4",{id:"grid"},"Grid"),(0,o.kt)("p",null,"We removed the ",(0,o.kt)("inlineCode",{parentName:"p"},"area")," prop from the ",(0,o.kt)("inlineCode",{parentName:"p"},"Grid")," component. You can pass it to the\n",(0,o.kt)("inlineCode",{parentName:"p"},"GridItem")," component instead."),(0,o.kt)("h4",{id:"styled-system"},"Styled system"),(0,o.kt)("p",null,"We removed the ",(0,o.kt)("inlineCode",{parentName:"p"},"d")," style prop. Use written out ",(0,o.kt)("inlineCode",{parentName:"p"},"display")," prop instead."),(0,o.kt)("p",null,"We removed the ",(0,o.kt)("inlineCode",{parentName:"p"},"isTruncated")," style prop. You can use ",(0,o.kt)("inlineCode",{parentName:"p"},"noOfLines={1}")," instead."),(0,o.kt)("h4",{id:"theme"},"Theme"),(0,o.kt)("p",null,"We removed deprecated types."),(0,o.kt)("hr",null),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"That's it! Welcome to Chakra UI v2 \ud83e\udd73.")),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"If you still experience issues after migrating, feel free to\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/chakra-ui/chakra-ui/issues"},"create an issue")," or join our\nDiscord chat here: ",(0,o.kt)("a",{parentName:"p",href:"https://discord.gg/chakra-ui"},"discord.gg/chakra-ui"),".")))}c.isMDXComponent=!0}}]);