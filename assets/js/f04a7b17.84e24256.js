"use strict";(self.webpackChunkchakra_ui_docs=self.webpackChunkchakra_ui_docs||[]).push([[5345],{3905:(e,o,n)=>{n.d(o,{Zo:()=>u,kt:()=>v});var t=n(67294);function r(e,o,n){return o in e?Object.defineProperty(e,o,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[o]=n,e}function i(e,o){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);o&&(t=t.filter((function(o){return Object.getOwnPropertyDescriptor(e,o).enumerable}))),n.push.apply(n,t)}return n}function a(e){for(var o=1;o<arguments.length;o++){var n=null!=arguments[o]?arguments[o]:{};o%2?i(Object(n),!0).forEach((function(o){r(e,o,n[o])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(o){Object.defineProperty(e,o,Object.getOwnPropertyDescriptor(n,o))}))}return e}function l(e,o){if(null==e)return{};var n,t,r=function(e,o){if(null==e)return{};var n,t,r={},i=Object.keys(e);for(t=0;t<i.length;t++)n=i[t],o.indexOf(n)>=0||(r[n]=e[n]);return r}(e,o);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)n=i[t],o.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=t.createContext({}),s=function(e){var o=t.useContext(p),n=o;return e&&(n="function"==typeof e?e(o):a(a({},o),e)),n},u=function(e){var o=s(e.components);return t.createElement(p.Provider,{value:o},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var o=e.children;return t.createElement(t.Fragment,{},o)}},m=t.forwardRef((function(e,o){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=s(n),m=r,v=d["".concat(p,".").concat(m)]||d[m]||c[m]||i;return n?t.createElement(v,a(a({ref:o},u),{},{components:n})):t.createElement(v,a({ref:o},u))}));function v(e,o){var n=arguments,r=o&&o.mdxType;if("string"==typeof e||r){var i=n.length,a=new Array(i);a[0]=m;var l={};for(var p in o)hasOwnProperty.call(o,p)&&(l[p]=o[p]);l.originalType=e,l[d]="string"==typeof e?e:r,a[1]=l;for(var s=2;s<i;s++)a[s]=n[s];return t.createElement.apply(null,a)}return t.createElement.apply(null,n)}m.displayName="MDXCreateElement"},63222:(e,o,n)=>{n.r(o),n.d(o,{assets:()=>p,contentTitle:()=>a,default:()=>v,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var t=n(87462),r=(n(67294),n(3905));const i={},a="Popover",l={unversionedId:"components/overlay/popover/index",id:"components/overlay/popover/index",title:"Popover",description:"Popover is a non-modal dialog that floats around a trigger.",source:"@site/content/docs/components/overlay/popover/index.mdx",sourceDirName:"components/overlay/popover",slug:"/components/overlay/popover/",permalink:"/docs/components/overlay/popover/",draft:!1,tags:[],version:"current",lastUpdatedBy:"IshikawaMasashi",lastUpdatedAt:1675293453,formattedLastUpdatedAt:"Feb 1, 2023",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"Theming",permalink:"/docs/components/overlay/modal/theming"},next:{title:"Theming",permalink:"/docs/components/overlay/popover/theming"}},p={},s=[{value:"Import",id:"import",level:2},{value:"Basic Usage",id:"basic-usage",level:2},{value:"Rendering the Popover in a Portal",id:"rendering-the-popover-in-a-portal",level:2},{value:"Focus an element when Popover opens",id:"focus-an-element-when-popover-opens",level:2},{value:"Trapping Focus within Popover",id:"trapping-focus-within-popover",level:2},{value:"Controlled Usage",id:"controlled-usage",level:2},{value:"Popover Anchor",id:"popover-anchor",level:2},{value:"Accessing Internal state",id:"accessing-internal-state",level:2},{value:"Customizing the Popover",id:"customizing-the-popover",level:2},{value:"Popover Placements",id:"popover-placements",level:2},{value:"Lazily mounting Popover",id:"lazily-mounting-popover",level:3},{value:"Accessibility",id:"accessibility",level:2},{value:"Keyboard and Focus",id:"keyboard-and-focus",level:3},{value:"ARIA Attributes",id:"aria-attributes",level:3},{value:"Props",id:"props",level:2},{value:"Popover Props",id:"popover-props",level:3},{value:"Other Props",id:"other-props",level:3}],u=e=>function(o){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",o)},d=u("ComponentLinks"),c=u("PropsTable"),m={toc:s};function v(e){let{components:o,...n}=e;return(0,r.kt)("wrapper",(0,t.Z)({},m,n,{components:o,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"popover"},"Popover"),(0,r.kt)("p",null,"Popover is a non-modal dialog that floats around a trigger."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Popover")," is built on top of the ",(0,r.kt)("a",{parentName:"p",href:"https://popper.js.org/"},"Popper.js")," library."),(0,r.kt)(d,{github:{package:"popover"},npm:{package:"@chakra-ui/popover"},theme:{componentName:"popover"},mdxType:"ComponentLinks"}),(0,r.kt)("h2",{id:"import"},"Import"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Popover"),": The wrapper that provides props, state, and context to its\nchildren."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"PopoverTrigger"),": Used to wrap the reference (or trigger) element."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"PopoverContent"),": The popover itself."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"PopoverHeader"),": The header of the popover."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"PopoverBody"),": The body of the popover."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"PopoverArrow"),": A visual arrow that points to the reference (or trigger)."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"PopoverCloseButton"),": A button to close the popover."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"PopoverAnchor"),": Used to wrap the position-reference element.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'import {\n  Popover,\n  PopoverTrigger,\n  PopoverContent,\n  PopoverHeader,\n  PopoverBody,\n  PopoverFooter,\n  PopoverArrow,\n  PopoverCloseButton,\n  PopoverAnchor,\n} from "@chakra-ui/react";\n')),(0,r.kt)("h2",{id:"basic-usage"},"Basic Usage"),(0,r.kt)("p",null,"It is used to display contextual information to the user, and should be paired\nwith a clickable trigger element."),(0,r.kt)("p",null,"When Popover opens, focus is sent to ",(0,r.kt)("inlineCode",{parentName:"p"},"PopoverContent"),". When it closes, focus is\nreturned to the trigger."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Tip: When using this component, ensure the children passed to ",(0,r.kt)("inlineCode",{parentName:"p"},"PopoverTrigger"),"\nis focusable and has a forwarded ",(0,r.kt)("inlineCode",{parentName:"p"},"ref"),".")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"<Popover>\n  <PopoverTrigger>\n    <Button>Trigger</Button>\n  </PopoverTrigger>\n  <PopoverContent>\n    <PopoverArrow />\n    <PopoverCloseButton />\n    <PopoverHeader>Confirmation!</PopoverHeader>\n    <PopoverBody>Are you sure you want to have that milkshake?</PopoverBody>\n  </PopoverContent>\n</Popover>\n")),(0,r.kt)("h2",{id:"rendering-the-popover-in-a-portal"},"Rendering the Popover in a Portal"),(0,r.kt)("p",null,"By default, the Popover doesn't render in a Portal. To make them display in a\nportal, wrap the ",(0,r.kt)("inlineCode",{parentName:"p"},"PopoverContent")," in a ",(0,r.kt)("inlineCode",{parentName:"p"},"Portal")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"You might need to ",(0,r.kt)("strong",{parentName:"p"},"Inspect Element")," to see this in action. Notice that\n",(0,r.kt)("inlineCode",{parentName:"p"},"PopoverContent")," is rendered as a child of ",(0,r.kt)("inlineCode",{parentName:"p"},"<body>"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'<Popover>\n  <PopoverTrigger>\n    <Button>Trigger</Button>\n  </PopoverTrigger>\n  <Portal>\n    <PopoverContent>\n      <PopoverArrow />\n      <PopoverHeader>Header</PopoverHeader>\n      <PopoverCloseButton />\n      <PopoverBody>\n        <Button colorScheme="blue">Button</Button>\n      </PopoverBody>\n      <PopoverFooter>This is the footer</PopoverFooter>\n    </PopoverContent>\n  </Portal>\n</Popover>\n')),(0,r.kt)("h2",{id:"focus-an-element-when-popover-opens"},"Focus an element when Popover opens"),(0,r.kt)("p",null,"By default, focus is to sent to ",(0,r.kt)("inlineCode",{parentName:"p"},"PopoverContent")," when it opens. Pass the\n",(0,r.kt)("inlineCode",{parentName:"p"},"initialFocusRef")," prop to send focus to a specific element instead."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Focusing a child element only works for popovers with a ",(0,r.kt)("inlineCode",{parentName:"p"},"click")," trigger, not\n",(0,r.kt)("inlineCode",{parentName:"p"},"hover"),".")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'function WalkthroughPopover() {\n  const initialFocusRef = React.useRef();\n  return (\n    <Popover\n      initialFocusRef={initialFocusRef}\n      placement="bottom"\n      closeOnBlur={false}\n    >\n      <PopoverTrigger>\n        <Button>Trigger</Button>\n      </PopoverTrigger>\n      <PopoverContent color="white" bg="blue.800" borderColor="blue.800">\n        <PopoverHeader pt={4} fontWeight="bold" border="0">\n          Manage Your Channels\n        </PopoverHeader>\n        <PopoverArrow />\n        <PopoverCloseButton />\n        <PopoverBody>\n          Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do\n          eiusmod tempor incididunt ut labore et dolore.\n        </PopoverBody>\n        <PopoverFooter\n          border="0"\n          display="flex"\n          alignItems="center"\n          justifyContent="space-between"\n          pb={4}\n        >\n          <Box fontSize="sm">Step 2 of 4</Box>\n          <ButtonGroup size="sm">\n            <Button colorScheme="green">Setup Email</Button>\n            <Button colorScheme="blue" ref={initialFocusRef}>\n              Next\n            </Button>\n          </ButtonGroup>\n        </PopoverFooter>\n      </PopoverContent>\n    </Popover>\n  );\n}\n')),(0,r.kt)("h2",{id:"trapping-focus-within-popover"},"Trapping Focus within Popover"),(0,r.kt)("p",null,'If the popover contains a form, you might need to trap focus within the popover\nand close it when the user fills the form and hits "save".'),(0,r.kt)("p",null,"You can leverage\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/theKashey/react-focus-lock"},"react-focus-lock")," to trap focus\nwithin the ",(0,r.kt)("inlineCode",{parentName:"p"},"PopoverContent"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"manual=true",manual:"true"},'// import  FocusLock from "react-focus-lock"\n\n// 1. Create a text input component\nconst TextInput = React.forwardRef((props, ref) => {\n  return (\n    <FormControl>\n      <FormLabel htmlFor={props.id}>{props.label}</FormLabel>\n      <Input ref={ref} id={props.id} {...props} />\n    </FormControl>\n  );\n});\n\n// 2. Create the form\nconst Form = ({ firstFieldRef, onCancel }) => {\n  return (\n    <Stack spacing={4}>\n      <TextInput\n        label="First name"\n        id="first-name"\n        ref={firstFieldRef}\n        defaultValue="John"\n      />\n      <TextInput label="Last name" id="last-name" defaultValue="Smith" />\n      <ButtonGroup display="flex" justifyContent="flex-end">\n        <Button variant="outline" onClick={onCancel}>\n          Cancel\n        </Button>\n        <Button isDisabled colorScheme="teal">\n          Save\n        </Button>\n      </ButtonGroup>\n    </Stack>\n  );\n};\n\n// 3. Create the Popover\n// Ensure you set `closeOnBlur` prop to false so it doesn\'t close on outside click\nconst PopoverForm = () => {\n  const { onOpen, onClose, isOpen } = useDisclosure();\n  const firstFieldRef = React.useRef(null);\n\n  return (\n    <>\n      <Box display="inline-block" mr={3}>\n        John Smith\n      </Box>\n      <Popover\n        isOpen={isOpen}\n        initialFocusRef={firstFieldRef}\n        onOpen={onOpen}\n        onClose={onClose}\n        placement="right"\n        closeOnBlur={false}\n      >\n        <PopoverTrigger>\n          <IconButton size="sm" icon={<EditIcon />} />\n        </PopoverTrigger>\n        <PopoverContent p={5}>\n          <FocusLock returnFocus persistentFocus={false}>\n            <PopoverArrow />\n            <PopoverCloseButton />\n            <Form firstFieldRef={firstFieldRef} onCancel={onClose} />\n          </FocusLock>\n        </PopoverContent>\n      </Popover>\n    </>\n  );\n};\n\nrender(<PopoverForm />);\n')),(0,r.kt)("h2",{id:"controlled-usage"},"Controlled Usage"),(0,r.kt)("p",null,"You can control the opening and closing of the popover by passing the ",(0,r.kt)("inlineCode",{parentName:"p"},"isOpen"),",\nand ",(0,r.kt)("inlineCode",{parentName:"p"},"onClose")," props."),(0,r.kt)("p",null,"Sometimes you might need to set the ",(0,r.kt)("inlineCode",{parentName:"p"},"returnFocusOnClose")," prop to ",(0,r.kt)("inlineCode",{parentName:"p"},"false")," to\nprevent popover from returning focus to ",(0,r.kt)("inlineCode",{parentName:"p"},"PopoverTrigger"),"'s children."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'function ControlledUsage() {\n  const { isOpen, onToggle, onClose } = useDisclosure();\n\n  return (\n    <>\n      <Button mr={5} onClick={onToggle}>\n        Trigger\n      </Button>\n      <Popover\n        returnFocusOnClose={false}\n        isOpen={isOpen}\n        onClose={onClose}\n        placement="right"\n        closeOnBlur={false}\n      >\n        <PopoverTrigger>\n          <Button colorScheme="pink">Popover Target</Button>\n        </PopoverTrigger>\n        <PopoverContent>\n          <PopoverHeader fontWeight="semibold">Confirmation</PopoverHeader>\n          <PopoverArrow />\n          <PopoverCloseButton />\n          <PopoverBody>\n            Are you sure you want to continue with your action?\n          </PopoverBody>\n          <PopoverFooter display="flex" justifyContent="flex-end">\n            <ButtonGroup size="sm">\n              <Button variant="outline">Cancel</Button>\n              <Button colorScheme="red">Apply</Button>\n            </ButtonGroup>\n          </PopoverFooter>\n        </PopoverContent>\n      </Popover>\n    </>\n  );\n}\n')),(0,r.kt)("h2",{id:"popover-anchor"},"Popover Anchor"),(0,r.kt)("p",null,"You can wrap your component with ",(0,r.kt)("inlineCode",{parentName:"p"},"PopoverAnchor")," to prevent trigger any action.\nThe wrapped component will become a position reference. Actions will only be\ntriggered by components inside ",(0,r.kt)("inlineCode",{parentName:"p"},"PopoverTrigger"),"."),(0,r.kt)("p",null,"In this case, you can only open and close the popover with ",(0,r.kt)("inlineCode",{parentName:"p"},"Button"),". If you\nclick on ",(0,r.kt)("inlineCode",{parentName:"p"},"Input"),", it acts same as the original input and doesn't trigger any\naction about popover."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"\ud83d\udea8 Note: As with ",(0,r.kt)("a",{parentName:"p",href:"#basic-usage"},"PopoverTrigger"),", if you use a custom component\ninside ",(0,r.kt)("inlineCode",{parentName:"p"},"PopoverAnchor")," ensure that it uses Chakra's\n",(0,r.kt)("a",{parentName:"p",href:"/community/recipes/as-prop#option-1-using-forwardref-from-chakra-uireact"},"forwardRef"),"\nso the popover is triggered successfully.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'function WithPopoverAnchor() {\n  const [isEditing, setIsEditing] = useBoolean();\n  const [color, setColor] = React.useState("red");\n\n  return (\n    <Popover\n      isOpen={isEditing}\n      onOpen={setIsEditing.on}\n      onClose={setIsEditing.off}\n      closeOnBlur={false}\n      isLazy\n      lazyBehavior="keepMounted"\n    >\n      <HStack>\n        <PopoverAnchor>\n          <Input\n            color={color}\n            w="auto"\n            display="inline-flex"\n            isDisabled={!isEditing}\n            defaultValue="Popover Anchor"\n          />\n        </PopoverAnchor>\n\n        <PopoverTrigger>\n          <Button h="40px" colorScheme="pink">\n            {isEditing ? "Save" : "Edit"}\n          </Button>\n        </PopoverTrigger>\n      </HStack>\n\n      <PopoverContent>\n        <PopoverBody>\n          Colors:\n          <RadioGroup value={color} onChange={(newColor) => setColor(newColor)}>\n            <Radio value="red">red</Radio>\n            <Radio value="blue">blue</Radio>\n            <Radio value="green">green</Radio>\n            <Radio value="purple">purple</Radio>\n          </RadioGroup>\n        </PopoverBody>\n      </PopoverContent>\n    </Popover>\n  );\n}\n')),(0,r.kt)("h2",{id:"accessing-internal-state"},"Accessing Internal state"),(0,r.kt)("p",null,"Chakra provides access to two internal details: ",(0,r.kt)("inlineCode",{parentName:"p"},"isOpen")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"onClose"),". Use the\nrender prop pattern to gain access to them."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'function InternalStateEx() {\n  const initRef = React.useRef();\n  return (\n    <Popover closeOnBlur={false} placement="left" initialFocusRef={initRef}>\n      {({ isOpen, onClose }) => (\n        <>\n          <PopoverTrigger>\n            <Button>Click to {isOpen ? "close" : "open"}</Button>\n          </PopoverTrigger>\n          <Portal>\n            <PopoverContent>\n              <PopoverHeader>This is the header</PopoverHeader>\n              <PopoverCloseButton />\n              <PopoverBody>\n                <Box>\n                  Hello. Nice to meet you! This is the body of the popover\n                </Box>\n                <Button\n                  mt={4}\n                  colorScheme="blue"\n                  onClick={onClose}\n                  ref={initRef}\n                >\n                  Close\n                </Button>\n              </PopoverBody>\n              <PopoverFooter>This is the footer</PopoverFooter>\n            </PopoverContent>\n          </Portal>\n        </>\n      )}\n    </Popover>\n  );\n}\n')),(0,r.kt)("h2",{id:"customizing-the-popover"},"Customizing the Popover"),(0,r.kt)("p",null,"Chakra exports all the components you need to customize the look and feel of the\npopover. You can change the background, arrow size, box shadow and so on."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'<Popover>\n  <PopoverTrigger>\n    <Box\n      tabIndex="0"\n      role="button"\n      aria-label="Some box"\n      p={5}\n      w="120px"\n      bg="gray.300"\n      children="Click"\n    />\n  </PopoverTrigger>\n  <PopoverContent bg="tomato" color="white">\n    <PopoverHeader fontWeight="semibold">Customization</PopoverHeader>\n    <PopoverArrow bg="pink.500" />\n    <PopoverCloseButton bg="purple.500" />\n    <PopoverBody>\n      Tadaa!! The arrow color and background color is customized. Check the\n      props for each component.\n    </PopoverBody>\n  </PopoverContent>\n</Popover>\n')),(0,r.kt)("h2",{id:"popover-placements"},"Popover Placements"),(0,r.kt)("p",null,"Since popover is powered by PopperJS, you can change the placement of the\npopover by passing the ",(0,r.kt)("inlineCode",{parentName:"p"},"placement")," prop."),(0,r.kt)("p",null,"The possible values are:"),(0,r.kt)("table",null,(0,r.kt)("tr",null,(0,r.kt)("td",null,"`bottom-start`"),(0,r.kt)("td",null," | "),(0,r.kt)("td",null,"`bottom` _(default)_"),(0,r.kt)("td",null," | "),(0,r.kt)("td",null,"`bottom-end`")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"`auto-start`"),(0,r.kt)("td",null," | "),(0,r.kt)("td",null,"`auto`"),(0,r.kt)("td",null," | "),(0,r.kt)("td",null,"`auto-end`")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"`top-start`"),(0,r.kt)("td",null," | "),(0,r.kt)("td",null,"`top`"),(0,r.kt)("td",null," | "),(0,r.kt)("td",null,"`top-end`")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"`left-start`"),(0,r.kt)("td",null," | "),(0,r.kt)("td",null,"`left`"),(0,r.kt)("td",null," | "),(0,r.kt)("td",null,"`left-end`")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"`right-start`"),(0,r.kt)("td",null," | "),(0,r.kt)("td",null,"`right`"),(0,r.kt)("td",null," | "),(0,r.kt)("td",null,"`right-end`"))),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Even though you specified the placement, Popover will try to reposition itself\nin the event that available space at the specified placement isn't enough.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'<Popover placement="top-start">\n  <PopoverTrigger>\n    <Button>Click me</Button>\n  </PopoverTrigger>\n  <PopoverContent>\n    <PopoverHeader fontWeight="semibold">Popover placement</PopoverHeader>\n    <PopoverArrow />\n    <PopoverCloseButton />\n    <PopoverBody>\n      Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod\n      tempor incididunt ut labore et dolore.\n    </PopoverBody>\n  </PopoverContent>\n</Popover>\n')),(0,r.kt)("h3",{id:"lazily-mounting-popover"},"Lazily mounting Popover"),(0,r.kt)("p",null,"By default, the ",(0,r.kt)("inlineCode",{parentName:"p"},"Popover")," component renders children of ",(0,r.kt)("inlineCode",{parentName:"p"},"PopoverContent")," to the\nDOM, meaning that invisible popover contents are still rendered but are hidden\nby styles."),(0,r.kt)("p",null,"If you want to defer rendering of popover content until that ",(0,r.kt)("inlineCode",{parentName:"p"},"Popover")," is\nopened, you can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"isLazy")," prop. This is useful if your ",(0,r.kt)("inlineCode",{parentName:"p"},"PopoverContent"),"\nneeds to be extra performant, or make network calls on mount that should only\nhappen when the component is displayed."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'<Popover isLazy>\n  <PopoverTrigger>\n    <Button>Click me</Button>\n  </PopoverTrigger>\n  <PopoverContent>\n    <PopoverHeader fontWeight="semibold">Popover placement</PopoverHeader>\n    <PopoverArrow />\n    <PopoverCloseButton />\n    <PopoverBody>\n      Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod\n      tempor incididunt ut labore et dolore.\n    </PopoverBody>\n  </PopoverContent>\n</Popover>\n')),(0,r.kt)("h2",{id:"accessibility"},"Accessibility"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"When you see the word ",(0,r.kt)("em",{parentName:"p"},'"trigger"'),", it is referring to the ",(0,r.kt)("inlineCode",{parentName:"p"},"children")," of\n",(0,r.kt)("inlineCode",{parentName:"p"},"PopoverTrigger"))),(0,r.kt)("h3",{id:"keyboard-and-focus"},"Keyboard and Focus"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"When the popover is opened, focus is moved to the ",(0,r.kt)("inlineCode",{parentName:"li"},"PopoverContent"),". If the\n",(0,r.kt)("inlineCode",{parentName:"li"},"initialFocusRef")," is set, then focus moves to the element with that ",(0,r.kt)("inlineCode",{parentName:"li"},"ref"),"."),(0,r.kt)("li",{parentName:"ul"},"When the popover is closed, focus returns to the trigger. If you set\n",(0,r.kt)("inlineCode",{parentName:"li"},"returnFocusOnClose")," to ",(0,r.kt)("inlineCode",{parentName:"li"},"false"),", focus will not return."),(0,r.kt)("li",{parentName:"ul"},"If trigger is set to ",(0,r.kt)("inlineCode",{parentName:"li"},"hover"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Focusing on or mousing over the trigger will open the popover."),(0,r.kt)("li",{parentName:"ul"},"Blurring or mousing out of the trigger will close the popover. If you move\nyour mouse into the ",(0,r.kt)("inlineCode",{parentName:"li"},"PopoverContent"),", it'll remain visible."))),(0,r.kt)("li",{parentName:"ul"},"If trigger is set to ",(0,r.kt)("inlineCode",{parentName:"li"},"click"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Clicking the trigger or using the ",(0,r.kt)("inlineCode",{parentName:"li"},"Space")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"Enter")," when focus is on the\ntrigger will open the popover."),(0,r.kt)("li",{parentName:"ul"},"Clicking the trigger again will close the popover."))),(0,r.kt)("li",{parentName:"ul"},"Hitting the ",(0,r.kt)("inlineCode",{parentName:"li"},"Esc")," key while the popover is open and focus is within the\n",(0,r.kt)("inlineCode",{parentName:"li"},"PopoverContent"),", will close the popover. If you set ",(0,r.kt)("inlineCode",{parentName:"li"},"closeOnEsc")," to ",(0,r.kt)("inlineCode",{parentName:"li"},"false"),",\nit will not close."),(0,r.kt)("li",{parentName:"ul"},"Clicking outside or blurring out of the ",(0,r.kt)("inlineCode",{parentName:"li"},"PopoverContent")," closes the popover.\nIf you set ",(0,r.kt)("inlineCode",{parentName:"li"},"closeOnBlur")," to ",(0,r.kt)("inlineCode",{parentName:"li"},"false"),", it will not close.")),(0,r.kt)("h3",{id:"aria-attributes"},"ARIA Attributes"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"If the trigger is set to ",(0,r.kt)("inlineCode",{parentName:"li"},"click"),", the ",(0,r.kt)("inlineCode",{parentName:"li"},"PopoverContent")," element has role set to\n",(0,r.kt)("inlineCode",{parentName:"li"},"dialog"),". If the trigger is set to ",(0,r.kt)("inlineCode",{parentName:"li"},"hover"),", the ",(0,r.kt)("inlineCode",{parentName:"li"},"PopoverContent")," has ",(0,r.kt)("inlineCode",{parentName:"li"},"role"),"\nset to ",(0,r.kt)("inlineCode",{parentName:"li"},"tooltip"),"."),(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"PopoverContent")," has ",(0,r.kt)("inlineCode",{parentName:"li"},"aria-labelledby")," set to the ",(0,r.kt)("inlineCode",{parentName:"li"},"id")," of the\n",(0,r.kt)("inlineCode",{parentName:"li"},"PopoverHeader"),"."),(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"PopoverContent")," has ",(0,r.kt)("inlineCode",{parentName:"li"},"aria-describedby")," set to the ",(0,r.kt)("inlineCode",{parentName:"li"},"id")," of the\n",(0,r.kt)("inlineCode",{parentName:"li"},"PopoverBody"),"."),(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"PopoverContent")," has ",(0,r.kt)("inlineCode",{parentName:"li"},"aria-hidden")," set to ",(0,r.kt)("inlineCode",{parentName:"li"},"true")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"false")," depending on\nthe open/closed state of the popover."),(0,r.kt)("li",{parentName:"ul"},"The trigger has ",(0,r.kt)("inlineCode",{parentName:"li"},"aria-haspopup")," set to ",(0,r.kt)("inlineCode",{parentName:"li"},"true")," to denote that it triggers a\npopover."),(0,r.kt)("li",{parentName:"ul"},"The trigger has ",(0,r.kt)("inlineCode",{parentName:"li"},"aria-controls")," set to the ",(0,r.kt)("inlineCode",{parentName:"li"},"id")," of the ",(0,r.kt)("inlineCode",{parentName:"li"},"PopoverContent")," to\nassociate the popover and the trigger."),(0,r.kt)("li",{parentName:"ul"},"The trigger has ",(0,r.kt)("inlineCode",{parentName:"li"},"aria-expanded")," set to ",(0,r.kt)("inlineCode",{parentName:"li"},"true")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"false")," depending on the\nopen/closed state of the popover.")),(0,r.kt)("h2",{id:"props"},"Props"),(0,r.kt)("h3",{id:"popover-props"},"Popover Props"),(0,r.kt)(c,{of:"Popover",omit:["enabled"],mdxType:"PropsTable"}),(0,r.kt)("h3",{id:"other-props"},"Other Props"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"PopoverContent")," composes ",(0,r.kt)("inlineCode",{parentName:"li"},"Box")," and has the ability to smartly position\nitself. Thanks to popper.js."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"PopoverArrow"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"PopoverHeader"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"PopoverFooter")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"PopoverBody")," composes\n",(0,r.kt)("inlineCode",{parentName:"li"},"Box"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"PopoverCloseButton")," composes ",(0,r.kt)("inlineCode",{parentName:"li"},"Box")," component.")))}v.isMDXComponent=!0}}]);