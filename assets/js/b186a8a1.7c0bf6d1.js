"use strict";(self.webpackChunkchakra_ui_docs=self.webpackChunkchakra_ui_docs||[]).push([[907],{3905:(e,t,n)=>{n.d(t,{Zo:()=>T,kt:()=>c});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var d=a.createContext({}),p=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},T=function(e){var t=p(e.components);return a.createElement(d.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},s=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,d=e.parentName,T=o(e,["components","mdxType","originalType","parentName"]),s=p(n),c=r,u=s["".concat(d,".").concat(c)]||s[c]||m[c]||l;return n?a.createElement(u,i(i({ref:t},T),{},{components:n})):a.createElement(u,i({ref:t},T))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=s;var o={};for(var d in t)hasOwnProperty.call(t,d)&&(o[d]=t[d]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var p=2;p<l;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}s.displayName="MDXCreateElement"},15666:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>u,frontMatter:()=>l,metadata:()=>o,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const l={},i="Table",o={unversionedId:"components/data-display/table/index",id:"components/data-display/table/index",title:"Table",description:"Table component is used to organize and display data efficiently. It renders",source:"@site/content/docs/components/data-display/table/index.mdx",sourceDirName:"components/data-display/table",slug:"/components/data-display/table/",permalink:"/shenlanguage/docs/components/data-display/table/",draft:!1,tags:[],version:"current",lastUpdatedBy:"IshikawaMasashi",lastUpdatedAt:1675135144,formattedLastUpdatedAt:"Jan 31, 2023",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"Theming",permalink:"/shenlanguage/docs/components/data-display/stat/theming"},next:{title:"Theming",permalink:"/shenlanguage/docs/components/data-display/table/theming"}},d={},p=[{value:"Import",id:"import",level:2},{value:"Table Container",id:"table-container",level:2},{value:"Table Variants",id:"table-variants",level:2},{value:"Simple Table",id:"simple-table",level:3},{value:"Striped Table",id:"striped-table",level:3},{value:"Table Sizing",id:"table-sizing",level:2},{value:"Props",id:"props",level:2},{value:"Table",id:"table-1",level:3},{value:"Td",id:"td",level:3},{value:"Th",id:"th",level:3},{value:"TableCaption",id:"tablecaption",level:3}],T=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",t)},m=T("ComponentLinks"),s=T("PropsTable"),c={toc:p};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"table"},"Table"),(0,r.kt)("p",null,"Table component is used to organize and display data efficiently. It renders\na ",(0,r.kt)("inlineCode",{parentName:"p"},"<table>")," element by default'"),(0,r.kt)(m,{github:{package:"table"},npm:{package:"@chakra-ui/table"},theme:{componentName:"table"},mdxType:"ComponentLinks"}),(0,r.kt)("h2",{id:"import"},"Import"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import {\n  Table,\n  Thead,\n  Tbody,\n  Tfoot,\n  Tr,\n  Th,\n  Td,\n  TableCaption,\n  TableContainer,\n} from '@chakra-ui/react';\n")),(0,r.kt)("h2",{id:"table-container"},"Table Container"),(0,r.kt)("p",null,"The table container component renders a ",(0,r.kt)("inlineCode",{parentName:"p"},"div")," that wraps the table component to\nnot allow the table to overflow the parent container, not allow data content to\nbreak lines without exception, and enable horizontal scrolling."),(0,r.kt)("p",null,"It renders the following props:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Property"),(0,r.kt)("th",{parentName:"tr",align:null},"Value"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"display")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"block"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"maxWidth")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"100%"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"overflowX")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"auto"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"overflowY")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"hidden"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"whiteSpace")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"nowrap"))))),(0,r.kt)("p",null,"It can optionally accept the ",(0,r.kt)("inlineCode",{parentName:"p"},"overflow")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"overflowX")," props to override the\n",(0,r.kt)("inlineCode",{parentName:"p"},"overflowX")," default value of ",(0,r.kt)("inlineCode",{parentName:"p"},"auto")," rendered by this component."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"This component will be shown on all examples in this page. View the examples\nin mobile to see the effects.")),(0,r.kt)("h2",{id:"table-variants"},"Table Variants"),(0,r.kt)("p",null,"The table component comes in 3 variants: ",(0,r.kt)("inlineCode",{parentName:"p"},"simple"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"striped"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"unstyled"),".\nThe default variant is ",(0,r.kt)("inlineCode",{parentName:"p"},"simple")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Change the ",(0,r.kt)("inlineCode",{parentName:"p"},"variant")," values to see the other variants.")),(0,r.kt)("h3",{id:"simple-table"},"Simple Table"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"<TableContainer>\n  <Table variant='simple'>\n    <TableCaption>Imperial to metric conversion factors</TableCaption>\n    <Thead>\n      <Tr>\n        <Th>To convert</Th>\n        <Th>into</Th>\n        <Th isNumeric>multiply by</Th>\n      </Tr>\n    </Thead>\n    <Tbody>\n      <Tr>\n        <Td>inches</Td>\n        <Td>millimetres (mm)</Td>\n        <Td isNumeric>25.4</Td>\n      </Tr>\n      <Tr>\n        <Td>feet</Td>\n        <Td>centimetres (cm)</Td>\n        <Td isNumeric>30.48</Td>\n      </Tr>\n      <Tr>\n        <Td>yards</Td>\n        <Td>metres (m)</Td>\n        <Td isNumeric>0.91444</Td>\n      </Tr>\n    </Tbody>\n    <Tfoot>\n      <Tr>\n        <Th>To convert</Th>\n        <Th>into</Th>\n        <Th isNumeric>multiply by</Th>\n      </Tr>\n    </Tfoot>\n  </Table>\n</TableContainer>\n")),(0,r.kt)("h3",{id:"striped-table"},"Striped Table"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"<TableContainer>\n  <Table variant='striped' colorScheme='teal'>\n    <TableCaption>Imperial to metric conversion factors</TableCaption>\n    <Thead>\n      <Tr>\n        <Th>To convert</Th>\n        <Th>into</Th>\n        <Th isNumeric>multiply by</Th>\n      </Tr>\n    </Thead>\n    <Tbody>\n      <Tr>\n        <Td>inches</Td>\n        <Td>millimetres (mm)</Td>\n        <Td isNumeric>25.4</Td>\n      </Tr>\n      <Tr>\n        <Td>feet</Td>\n        <Td>centimetres (cm)</Td>\n        <Td isNumeric>30.48</Td>\n      </Tr>\n      <Tr>\n        <Td>yards</Td>\n        <Td>metres (m)</Td>\n        <Td isNumeric>0.91444</Td>\n      </Tr>\n    </Tbody>\n    <Tfoot>\n      <Tr>\n        <Th>To convert</Th>\n        <Th>into</Th>\n        <Th isNumeric>multiply by</Th>\n      </Tr>\n    </Tfoot>\n  </Table>\n</TableContainer>\n")),(0,r.kt)("h2",{id:"table-sizing"},"Table Sizing"),(0,r.kt)("p",null,"The table component is available in 3 sizes: ",(0,r.kt)("inlineCode",{parentName:"p"},"sm"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"md"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"lg"),". The default size\nis ",(0,r.kt)("inlineCode",{parentName:"p"},"md"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"<TableContainer>\n  <Table size='sm'>\n    <Thead>\n      <Tr>\n        <Th>To convert</Th>\n        <Th>into</Th>\n        <Th isNumeric>multiply by</Th>\n      </Tr>\n    </Thead>\n    <Tbody>\n      <Tr>\n        <Td>inches</Td>\n        <Td>millimetres (mm)</Td>\n        <Td isNumeric>25.4</Td>\n      </Tr>\n      <Tr>\n        <Td>feet</Td>\n        <Td>centimetres (cm)</Td>\n        <Td isNumeric>30.48</Td>\n      </Tr>\n      <Tr>\n        <Td>yards</Td>\n        <Td>metres (m)</Td>\n        <Td isNumeric>0.91444</Td>\n      </Tr>\n    </Tbody>\n    <Tfoot>\n      <Tr>\n        <Th>To convert</Th>\n        <Th>into</Th>\n        <Th isNumeric>multiply by</Th>\n      </Tr>\n    </Tfoot>\n  </Table>\n</TableContainer>\n")),(0,r.kt)("h2",{id:"props"},"Props"),(0,r.kt)("h3",{id:"table-1"},"Table"),(0,r.kt)(s,{of:"Table",mdxType:"PropsTable"}),(0,r.kt)("h3",{id:"td"},"Td"),(0,r.kt)(s,{of:"Td",mdxType:"PropsTable"}),(0,r.kt)("h3",{id:"th"},"Th"),(0,r.kt)(s,{of:"Th",mdxType:"PropsTable"}),(0,r.kt)("h3",{id:"tablecaption"},"TableCaption"),(0,r.kt)(s,{of:"TableCaption",mdxType:"PropsTable"}))}u.isMDXComponent=!0}}]);