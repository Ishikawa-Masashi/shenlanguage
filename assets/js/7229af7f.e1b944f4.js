"use strict";(self.webpackChunkchakra_ui_docs=self.webpackChunkchakra_ui_docs||[]).push([[8741],{3905:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>k});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var m=r.createContext({}),p=function(e){var n=r.useContext(m),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},s=function(e){var n=p(e.components);return r.createElement(m.Provider,{value:n},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},c=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,m=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),d=p(t),c=a,k=d["".concat(m,".").concat(c)]||d[c]||u[c]||o;return t?r.createElement(k,i(i({ref:n},s),{},{components:t})):r.createElement(k,i({ref:n},s))}));function k(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=c;var l={};for(var m in n)hasOwnProperty.call(n,m)&&(l[m]=n[m]);l.originalType=e,l[d]="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=t[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}c.displayName="MDXCreateElement"},23397:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>m,contentTitle:()=>i,default:()=>k,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var r=t(87462),a=(t(67294),t(3905));const o={},i="Form Control",l={unversionedId:"components/forms/form-control/index",id:"components/forms/form-control/index",title:"Form Control",description:"Form Control provides context such as isInvalid, isDisabled, and",source:"@site/content/docs/components/forms/form-control/index.mdx",sourceDirName:"components/forms/form-control",slug:"/components/forms/form-control/",permalink:"/docs/components/forms/form-control/",draft:!1,tags:[],version:"current",lastUpdatedBy:"IshikawaMasashi",lastUpdatedAt:1675293453,formattedLastUpdatedAt:"Feb 1, 2023",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"Theming",permalink:"/docs/components/forms/editable/theming"},next:{title:"Theming",permalink:"/docs/components/forms/form-control/theming"}},m={},p=[{value:"Import",id:"import",level:2},{value:"Usage",id:"usage",level:2},{value:"Sample usage for a radio or checkbox group",id:"sample-usage-for-a-radio-or-checkbox-group",level:3},{value:"Error message",id:"error-message",level:3},{value:"Making a field required",id:"making-a-field-required",level:3},{value:"Select Example",id:"select-example",level:3},{value:"Number Input Example",id:"number-input-example",level:3},{value:"Usage with Form Libraries",id:"usage-with-form-libraries",level:3},{value:"Improvements from v1",id:"improvements-from-v1",level:2},{value:"Props",id:"props",level:2}],s=e=>function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",n)},d=s("ComponentLinks"),u=s("PropsTable"),c={toc:p};function k(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"form-control"},"Form Control"),(0,a.kt)("p",null,"Form Control provides context such as ",(0,a.kt)("inlineCode",{parentName:"p"},"isInvalid"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"isDisabled"),", and\n",(0,a.kt)("inlineCode",{parentName:"p"},"isRequired")," to form elements"),(0,a.kt)(d,{github:{package:"form-control"},npm:{package:"@chakra-ui/form-control"},theme:{componentName:"form-control"},mdxType:"ComponentLinks"}),(0,a.kt)("h2",{id:"import"},"Import"),(0,a.kt)("p",null,"Chakra UI exports 4 components for Form Control:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"strong"},"FormControl")),": The wrapper that provides context and functionality for all\nchildren."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"strong"},"FormLabel")),": The label of a form section. The usage is similar to\n",(0,a.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/label"},"html label"),".\n",(0,a.kt)("inlineCode",{parentName:"li"},"htmlFor")," is set by default for children input."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"strong"},"FormHelperText")),": The message that tells users more details about the form\nsection."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"strong"},"FormErrorMessage")),": The message that shows up when an error occurs.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"import {\n  FormControl,\n  FormLabel,\n  FormErrorMessage,\n  FormHelperText,\n} from '@chakra-ui/react';\n")),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"<FormControl>\n  <FormLabel>Email address</FormLabel>\n  <Input type='email' />\n  <FormHelperText>We'll never share your email.</FormHelperText>\n</FormControl>\n")),(0,a.kt)("h3",{id:"sample-usage-for-a-radio-or-checkbox-group"},"Sample usage for a radio or checkbox group"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"<FormControl as='fieldset'>\n  <FormLabel as='legend'>Favorite Naruto Character</FormLabel>\n  <RadioGroup defaultValue='Itachi'>\n    <HStack spacing='24px'>\n      <Radio value='Sasuke'>Sasuke</Radio>\n      <Radio value='Nagato'>Nagato</Radio>\n      <Radio value='Itachi'>Itachi</Radio>\n      <Radio value='Sage of the six Paths'>Sage of the six Paths</Radio>\n    </HStack>\n  </RadioGroup>\n  <FormHelperText>Select only if you're a fan.</FormHelperText>\n</FormControl>\n")),(0,a.kt)("h3",{id:"error-message"},"Error message"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"FormErrorMessage")," will only show up when the property ",(0,a.kt)("inlineCode",{parentName:"p"},"isInvalid")," in\n",(0,a.kt)("inlineCode",{parentName:"p"},"FormControl")," is true."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"function errorMessageExample() {\n  const [input, setInput] = useState('');\n\n  const handleInputChange = (e) => setInput(e.target.value);\n\n  const isError = input === '';\n\n  return (\n    <FormControl isInvalid={isError}>\n      <FormLabel>Email</FormLabel>\n      <Input type='email' value={input} onChange={handleInputChange} />\n      {!isError ? (\n        <FormHelperText>\n          Enter the email you'd like to receive the newsletter on.\n        </FormHelperText>\n      ) : (\n        <FormErrorMessage>Email is required.</FormErrorMessage>\n      )}\n    </FormControl>\n  );\n}\n")),(0,a.kt)("h3",{id:"making-a-field-required"},"Making a field required"),(0,a.kt)("p",null,"By passing the ",(0,a.kt)("inlineCode",{parentName:"p"},"isRequired")," props, the ",(0,a.kt)("inlineCode",{parentName:"p"},"Input")," field has ",(0,a.kt)("inlineCode",{parentName:"p"},"aria-required")," set to\n",(0,a.kt)("inlineCode",{parentName:"p"},"true"),", and the ",(0,a.kt)("inlineCode",{parentName:"p"},"FormLabel")," will show a red asterisk. This red asterisk can be\noverwritten by passing ",(0,a.kt)("inlineCode",{parentName:"p"},"requiredIndicator")," to the ",(0,a.kt)("inlineCode",{parentName:"p"},"FormLabel"),". If you want to\nindicate that a field is optional you can add ",(0,a.kt)("inlineCode",{parentName:"p"},"optionalIndicator")," to the\n",(0,a.kt)("inlineCode",{parentName:"p"},"FormLabel")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"<FormControl isRequired>\n  <FormLabel>First name</FormLabel>\n  <Input placeholder='First name' />\n</FormControl>\n")),(0,a.kt)("h3",{id:"select-example"},"Select Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"<FormControl>\n  <FormLabel>Country</FormLabel>\n  <Select placeholder='Select country'>\n    <option>United Arab Emirates</option>\n    <option>Nigeria</option>\n  </Select>\n</FormControl>\n")),(0,a.kt)("h3",{id:"number-input-example"},"Number Input Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"<FormControl>\n  <FormLabel>Amount</FormLabel>\n  <NumberInput max={50} min={10}>\n    <NumberInputField />\n    <NumberInputStepper>\n      <NumberIncrementStepper />\n      <NumberDecrementStepper />\n    </NumberInputStepper>\n  </NumberInput>\n</FormControl>\n")),(0,a.kt)("h3",{id:"usage-with-form-libraries"},"Usage with Form Libraries"),(0,a.kt)("p",null,"Form Libraries like ",(0,a.kt)("a",{parentName:"p",href:"https://jaredpalmer.com/formik/"},"Formik")," make it soooo easy\nto manage form state and validation. I \ud83d\udc96 Formik"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"// The below import defines which components come from formik\n// import { Field, Form, Formik } from 'formik';\n\nfunction FormikExample() {\n  function validateName(value) {\n    let error;\n    if (!value) {\n      error = 'Name is required';\n    } else if (value.toLowerCase() !== 'naruto') {\n      error = \"Jeez! You're not a fan \ud83d\ude31\";\n    }\n    return error;\n  }\n\n  return (\n    <Formik\n      initialValues={{ name: 'Sasuke' }}\n      onSubmit={(values, actions) => {\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n          actions.setSubmitting(false);\n        }, 1000);\n      }}\n    >\n      {(props) => (\n        <Form>\n          <Field name='name' validate={validateName}>\n            {({ field, form }) => (\n              <FormControl isInvalid={form.errors.name && form.touched.name}>\n                <FormLabel>First name</FormLabel>\n                <Input {...field} placeholder='name' />\n                <FormErrorMessage>{form.errors.name}</FormErrorMessage>\n              </FormControl>\n            )}\n          </Field>\n          <Button\n            mt={4}\n            colorScheme='teal'\n            isLoading={props.isSubmitting}\n            type='submit'\n          >\n            Submit\n          </Button>\n        </Form>\n      )}\n    </Formik>\n  );\n}\n")),(0,a.kt)("h2",{id:"improvements-from-v1"},"Improvements from v1"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"We've improved the accessibility of the ",(0,a.kt)("inlineCode",{parentName:"p"},"FormControl")," component. Here are the\nchanges:"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"id")," passed to the form control will be passed to the form input directly."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"FormLabel")," will have ",(0,a.kt)("inlineCode",{parentName:"li"},"htmlFor")," that points to the ",(0,a.kt)("inlineCode",{parentName:"li"},"id")," of the form input."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"FormErrorMessage")," adds ",(0,a.kt)("inlineCode",{parentName:"li"},"aria-describedby")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"aria-invalid")," pointing to\nthe form input."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"FormHelperText")," adds/extends ",(0,a.kt)("inlineCode",{parentName:"li"},"aria-describedby")," pointing to the form input."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"isDisabled"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"isRequired"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"isReadOnly")," props passed to ",(0,a.kt)("inlineCode",{parentName:"li"},"FormControl")," will\ncascade across all related components."))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"FormLabel")," is now aware of the ",(0,a.kt)("inlineCode",{parentName:"p"},"disabled"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"focused")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"error")," state of the\nform input. This helps you style the label accordingly using the ",(0,a.kt)("inlineCode",{parentName:"p"},"_disabled"),",\n",(0,a.kt)("inlineCode",{parentName:"p"},"_focus"),", and ",(0,a.kt)("inlineCode",{parentName:"p"},"_invalid")," style props.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"If you render ",(0,a.kt)("inlineCode",{parentName:"p"},"FormErrorMessage")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"isInvalid")," is ",(0,a.kt)("inlineCode",{parentName:"p"},"false")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"undefined"),",\n",(0,a.kt)("inlineCode",{parentName:"p"},"FormErrorMessage")," won't be visible. The only way to make it visible is by\npassing ",(0,a.kt)("inlineCode",{parentName:"p"},"isInvalid")," and setting it to ",(0,a.kt)("inlineCode",{parentName:"p"},"true"),".")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"You can still supply an ",(0,a.kt)("inlineCode",{parentName:"p"},"id")," prop to ",(0,a.kt)("inlineCode",{parentName:"p"},"FormControl")," that will override the\nrandomly generated ",(0,a.kt)("inlineCode",{parentName:"p"},"id")," and attach to the ",(0,a.kt)("inlineCode",{parentName:"p"},"for")," attribute of the label and the\n",(0,a.kt)("inlineCode",{parentName:"p"},"id")," of the form element. (It also affects the ",(0,a.kt)("inlineCode",{parentName:"p"},"id")," attribute of the label)")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"The combination of ",(0,a.kt)("inlineCode",{parentName:"p"},"htmlFor")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"id")," are optional in which adding both will\nalso override the generated ",(0,a.kt)("inlineCode",{parentName:"p"},"id")," sent to the provider."))),(0,a.kt)("h2",{id:"props"},"Props"),(0,a.kt)(u,{of:"FormControl",mdxType:"PropsTable"}))}k.isMDXComponent=!0}}]);