"use strict";(self.webpackChunkchakra_ui_docs=self.webpackChunkchakra_ui_docs||[]).push([[4465],{3905:(e,t,n)=>{n.d(t,{Zo:()=>y,kt:()=>u});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),p=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},y=function(e){var t=p(e.components);return r.createElement(i.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,i=e.parentName,y=s(e,["components","mdxType","originalType","parentName"]),d=p(n),u=a,m=d["".concat(i,".").concat(u)]||d[u]||c[u]||l;return n?r.createElement(m,o(o({ref:t},y),{},{components:n})):r.createElement(m,o({ref:t},y))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,o=new Array(l);o[0]=d;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var p=2;p<l;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},73436:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>o,default:()=>c,frontMatter:()=>l,metadata:()=>s,toc:()=>p});var r=n(87462),a=(n(67294),n(3905));const l={title:"Text and Layer Styles",description:"Learn how to use style props in Chakra UI. Style props are a way to alter the style of a component by simply passing props to it",category:"features"},o=void 0,s={unversionedId:"styled-system/text-and-layer-styles",id:"styled-system/text-and-layer-styles",title:"Text and Layer Styles",description:"Learn how to use style props in Chakra UI. Style props are a way to alter the style of a component by simply passing props to it",source:"@site/content/docs/styled-system/text-and-layer-styles.mdx",sourceDirName:"styled-system",slug:"/styled-system/text-and-layer-styles",permalink:"/shenlanguage/docs/styled-system/text-and-layer-styles",draft:!1,tags:[],version:"current",lastUpdatedBy:"IshikawaMasashi",lastUpdatedAt:1675135144,formattedLastUpdatedAt:"Jan 31, 2023",frontMatter:{title:"Text and Layer Styles",description:"Learn how to use style props in Chakra UI. Style props are a way to alter the style of a component by simply passing props to it",category:"features"},sidebar:"defaultSidebar",previous:{title:"Style Props",permalink:"/shenlanguage/docs/styled-system/style-props"},next:{title:"The `sx` Prop",permalink:"/shenlanguage/docs/styled-system/the-sx-prop"}},i={},p=[{value:"Layer Styles",id:"layer-styles",level:2},{value:"Text Styles",id:"text-styles",level:2},{value:"Naming text styles",id:"naming-text-styles",level:3}],y={toc:p};function c(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},y,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"In most projects you might find yourself repeating specific text properties\n(font size, font weight, line height) or layer properties (bg, color, shadow).\nThis can be painful as your project grows in size."),(0,a.kt)("p",null,"Using ",(0,a.kt)("inlineCode",{parentName:"p"},"textStyle")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"layerStyle")," props can help you keep things organized and\nconsistent."),(0,a.kt)("h2",{id:"layer-styles"},"Layer Styles"),(0,a.kt)("p",null,"Layer Styles allow you to save a combination of styling attributes to re-use in\nother components. Once created, pass the ",(0,a.kt)("inlineCode",{parentName:"p"},"layerStyle")," prop to any component and\nchakra will resolve the styles accordingly."),(0,a.kt)("p",null,"Properties defined in a layer style"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Color or text color"),(0,a.kt)("li",{parentName:"ul"},"Background color"),(0,a.kt)("li",{parentName:"ul"},"Border width and border color"),(0,a.kt)("li",{parentName:"ul"},"Box shadow"),(0,a.kt)("li",{parentName:"ul"},"Opacity")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"// 1. Import `extendTheme`\nimport { extendTheme } from '@chakra-ui/react';\n\n// 2. Extend the theme with new layer styles\nconst theme = extendTheme({\n  layerStyles: {\n    base: {\n      bg: 'gray.50',\n      border: '2px solid',\n      borderColor: 'gray.500',\n    },\n    selected: {\n      bg: 'teal.500',\n      color: 'teal.700',\n      borderColor: 'orange.500',\n    },\n  },\n});\n\n// 3. Consume the text styles in your components\nfunction Example() {\n  return <Box layerStyle='selected'>This is a box</Box>;\n}\n\n// 4. You can also switch layer styles\nfunction Example({ isSelected }) {\n  const layerStyle = isSelected ? 'selected' : 'base';\n  return <Box layerStyle={layerStyle}>This is a box</Box>;\n}\n")),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"Layer Styles will not override variant styling.")),(0,a.kt)("h2",{id:"text-styles"},"Text Styles"),(0,a.kt)("p",null,"Typography forms the core of any product just as much as colors and components\ndo. As a result, you'll need to establish styles for consistent, legible\ntypography early in the process of creating your product or design system."),(0,a.kt)("p",null,"The text styles functionality in Chakra makes it easy to repeatably apply a\ncollection of text properties (like line height and size) to any component."),(0,a.kt)("p",null,"You can put these styles in the theme under the ",(0,a.kt)("inlineCode",{parentName:"p"},"textStyles")," key to make easy to\nre-use in the future."),(0,a.kt)("p",null,"Properties defined in a text style"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Font family, weight, and size"),(0,a.kt)("li",{parentName:"ul"},"Line height"),(0,a.kt)("li",{parentName:"ul"},"Letter spacing"),(0,a.kt)("li",{parentName:"ul"},"Text decoration (strikethrough and underline)"),(0,a.kt)("li",{parentName:"ul"},"Text transform (uppercase, lowercase, and capitalization)")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"// 1. Import `extendTheme`\nimport { extendTheme } from '@chakra-ui/react';\n\n// 2. Define the new text styles\nconst theme = extendTheme({\n  textStyles: {\n    h1: {\n      // you can also use responsive styles\n      fontSize: ['48px', '72px'],\n      fontWeight: 'bold',\n      lineHeight: '110%',\n      letterSpacing: '-2%',\n    },\n    h2: {\n      fontSize: ['36px', '48px'],\n      fontWeight: 'semibold',\n      lineHeight: '110%',\n      letterSpacing: '-1%',\n    },\n  },\n});\n\n// 3. Consume the text styles in your component\nfunction Example() {\n  return <Box textStyle='h1'>This is a box</Box>;\n}\n")),(0,a.kt)("h3",{id:"naming-text-styles"},"Naming text styles"),(0,a.kt)("p",null,"In practice, we recommend using the same text style names used by designers on\nyour team. Here are common ideas on how to name text styles:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Sized-based naming system (",(0,a.kt)("inlineCode",{parentName:"li"},"xs"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"sm"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"md"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"lg"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"xl"),")"),(0,a.kt)("li",{parentName:"ul"},"Semantic naming system that corresponds to respective html tags in production\n(",(0,a.kt)("inlineCode",{parentName:"li"},"caption"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"paragraph"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"h1"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"h2"),")"),(0,a.kt)("li",{parentName:"ul"},"Descriptive or functional naming system that explains the style's intended use\n(",(0,a.kt)("inlineCode",{parentName:"li"},"alert"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"modal-header"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"button-label"),")")))}c.isMDXComponent=!0}}]);