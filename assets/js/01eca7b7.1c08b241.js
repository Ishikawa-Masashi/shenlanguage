"use strict";(self.webpackChunkchakra_ui_docs=self.webpackChunkchakra_ui_docs||[]).push([[6991],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var o=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=o.createContext({}),u=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=u(e.components);return o.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},p=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=u(n),d=a,h=p["".concat(s,".").concat(d)]||p[d]||m[d]||r;return n?o.createElement(h,i(i({ref:t},c),{},{components:n})):o.createElement(h,i({ref:t},c))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=p;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var u=2;u<r;u++)i[u]=n[u];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}p.displayName="MDXCreateElement"},79174:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>c,default:()=>f,frontMatter:()=>u,metadata:()=>m,toc:()=>d});var o=n(87462),a=(n(67294),n(3905));const r=(i="SandpackEditor",function(e){return console.warn("Component "+i+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",e)});var i;const l={toc:[]};function s(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,o.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)(r,{mdxType:"SandpackEditor"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"button-theme.tsx","button-theme.tsx":!0},'import { defineStyle, defineStyleConfig } from "@chakra-ui/styled-system"\n\nconst baseStyle = defineStyle({\n  borderRadius: 0, // disable the border radius\n  fontWeight: "normal", // change the font weight to normal\n  fontFamily: "mono", // change the font family to monospaced\n})\n\nconst sizes = {\n  md: defineStyle({\n    fontSize: "sm", // Change font size to sm (14px)\n  }),\n}\n\n// Defining a custom variant\nconst customVariant = defineStyle((props) => {\n  const { colorScheme: c } = props\n  return {\n    fontFamily: "sans-serif",\n    bg: `${c}.500`,\n    fontWeight: "semibold",\n    color: \'white\',\n    borderRadius: \'3xl\',\n    transition: \'transform 0.15s ease-out, background 0.15s ease-out\',\n    _dark: {\n      bg: `${c}.200`,\n      color: \'gray.800\',\n    },\n\n    _hover: {\n      transform: "scale(1.05, 1.05)",\n      bg: `${c}.600`,\n\n      _dark: {\n        bg: `${c}.300`,\n      },\n    },\n\n    _active: {\n      bg: `${c}.700`,\n      transform: "scale(1, 1)",\n\n      _dark: {\n        bg: `${c}.400`,\n      }\n    },\n  }\n})\n\nexport const buttonTheme = defineStyleConfig({\n  baseStyle,\n  sizes,\n  variants: {\n    custom: customVariant,\n  },\n  defaultProps: {\n    colorScheme: "purple", // set the default color scheme to purple\n  },\n})\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"button.tsx","button.tsx":!0},'import { Box, SimpleGrid, IconButton, Button, useColorMode } from "@chakra-ui/react";\nimport { FaMoon, FaSun } from "react-icons/fa";\n\nconst ButtonPreview = () => {\n  const { toggleColorMode, colorMode } = useColorMode();\n\n  return (\n    <Box position="relative" h="100vh">\n      <SimpleGrid gap={12} p={12} columns={2}>\n        <Button>\n          Themed solid button\n        </Button>\n        <Button variant="custom">\n          Themed custom button\n        </Button>\n        <Button variant="ghost">\n          Themed ghost button\n        </Button>\n        <Button variant="outline">\n          Themed outline button\n        </Button>\n        <Button variant="link">\n          Themed link button\n        </Button>\n      </SimpleGrid>\n\n      <IconButton\n        aria-label="toggle theme"\n        rounded="full"\n        size="xs"\n        position="absolute"\n        bottom={4}\n        left={4}\n        onClick={toggleColorMode} icon={colorMode === "dark" ? <FaSun /> : <FaMoon />}\n      />\n    </Box>\n  );\n}\n\nexport default ButtonPreview;\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"App.tsx","App.tsx":!0},'import { ChakraProvider, extendTheme } from "@chakra-ui/react";\nimport Button from "./button";\nimport { buttonTheme } from "./button-theme";\n\nconst theme = extendTheme({\n  components: {\n    Button: buttonTheme,\n  }\n});\n\nconst App = () => {\n  return (\n    <ChakraProvider theme={theme}>\n      <Button />\n    </ChakraProvider>\n  );\n}\n\nexport default App;\n'))))}s.isMDXComponent=!0;const u={},c="Theming",m={unversionedId:"components/forms/button/theming",id:"components/forms/button/theming",title:"Theming",description:"The Button component is a single part component. All of the styling is applied",source:"@site/content/docs/components/forms/button/theming.mdx",sourceDirName:"components/forms/button",slug:"/components/forms/button/theming",permalink:"/shenlanguage/docs/components/forms/button/theming",draft:!1,tags:[],version:"current",lastUpdatedBy:"IshikawaMasashi",lastUpdatedAt:1675135144,formattedLastUpdatedAt:"Jan 31, 2023",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"Button",permalink:"/shenlanguage/docs/components/forms/button/"},next:{title:"Checkbox",permalink:"/shenlanguage/docs/components/forms/checkbox/"}},p={},d=[{value:"Theming properties",id:"theming-properties",level:2},{value:"Theming utilities",id:"theming-utilities",level:2},{value:"Customizing the default theme",id:"customizing-the-default-theme",level:2},{value:"Adding a custom size",id:"adding-a-custom-size",level:2},{value:"Adding a custom variant",id:"adding-a-custom-variant",level:2},{value:"Using a custom color scheme",id:"using-a-custom-color-scheme",level:2},{value:"Changing the default properties",id:"changing-the-default-properties",level:2},{value:"Showcase",id:"showcase",level:2}],h={toc:d};function f(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,o.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"theming"},"Theming"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"Button")," component is a single part component. All of the styling is applied\ndirectly to the ",(0,a.kt)("inlineCode",{parentName:"p"},"button")," element."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"To learn more about styling single part components, visit the\n",(0,a.kt)("a",{parentName:"p",href:"/docs/styled-system/theming/component-style#styling-single-part-components"},"Component Style"),"\npage.")),(0,a.kt)("h2",{id:"theming-properties"},"Theming properties"),(0,a.kt)("p",null,"The properties that affect the theming of the ",(0,a.kt)("inlineCode",{parentName:"p"},"Button")," component are:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"variant"),": The visual variant of the button. Defaults to ",(0,a.kt)("inlineCode",{parentName:"li"},"solid"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"colorScheme"),": The color scheme of the button. Defaults to ",(0,a.kt)("inlineCode",{parentName:"li"},"gray"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"size"),": The size of the button. Defaults to ",(0,a.kt)("inlineCode",{parentName:"li"},"md"),".")),(0,a.kt)("h2",{id:"theming-utilities"},"Theming utilities"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"defineStyle"),": a function used to create style objects."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"defineStyleConfig"),": a function used to define the style configuration for a\nsingle part component.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},'import { defineStyle, defineStyleConfig } from "@chakra-ui/react";\n')),(0,a.kt)("h2",{id:"customizing-the-default-theme"},"Customizing the default theme"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},'import { defineStyle, defineStyleConfig } from "@chakra-ui/react";\n\nconst outline = defineStyle({\n  border: "2px dashed", // change the appearance of the border\n  borderRadius: 0, // remove the border radius\n  fontWeight: "semibold", // change the font weight\n});\n\nexport const buttonTheme = defineStyleConfig({\n  variants: { outline },\n});\n')),(0,a.kt)("p",null,"After customizing the button theme, we can import it in our theme file and add\nit in the ",(0,a.kt)("inlineCode",{parentName:"p"},"components")," property:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},'import { extendTheme } from "@chakra-ui/react";\nimport { buttonTheme } from "./components/button";\n\nexport const theme = extendTheme({\n  components: { Button: buttonTheme },\n});\n')),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"This is a crucial step to make sure that any changes that we make to the\nbutton theme are applied.")),(0,a.kt)("h2",{id:"adding-a-custom-size"},"Adding a custom size"),(0,a.kt)("p",null,"Let's assume we want to include an extra large button size. Here's how we can do\nthat:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"import { defineStyle, defineStyleConfig } from '@chakra-ui/react'\n\nconst xl = defineStyle({\n  fontSize: 'xl',\n  px: '6',\n  h: '16',\n  borderRadius: 'md',\n})\n\nexport const buttonTheme = defineStyleConfig({\n  sizes: { xl },\n})\n\n// Now we can use the new `xl` size\n<Button size=\"xl\">...</Button>\n")),(0,a.kt)("p",null,"Every time you're adding anything new to the theme, you'd need to run the CLI\ncommand to get proper autocomplete in your IDE. You can learn more about the CLI\ntool ",(0,a.kt)("a",{parentName:"p",href:"/docs/styled-system/cli"},"here"),"."),(0,a.kt)("h2",{id:"adding-a-custom-variant"},"Adding a custom variant"),(0,a.kt)("p",null,"Let's assume we want to include a custom branded variant. Here's how we can do\nthat:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"import { defineStyle, defineStyleConfig } from '@chakra-ui/react'\n\nconst brandPrimary = defineStyle({\n  background: 'orange.500',\n  color: 'white',\n  fontFamily: 'serif',\n  fontWeight: 'normal',\n\n  // let's also provide dark mode alternatives\n  _dark: {\n    background: 'orange.300',\n    color: 'orange.800',\n  }\n})\n\nexport const buttonTheme = defineStyleConfig({\n  variants: { brandPrimary },\n})\n\n// Now we can use the new `brandPrimary` variant\n<Button variant=\"brandPrimary\">...</Button>\n")),(0,a.kt)("h2",{id:"using-a-custom-color-scheme"},"Using a custom color scheme"),(0,a.kt)("p",null,"Let's assume we want to use our own custom color scale based on our brand. We'd\nneed to define the color scale first in the main theme file:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"import { extendTheme } from '@chakra-ui/react'\n\nexport const theme = extendTheme({\n  colors: {\n    brand: {\n      50: '#f7fafc',\n      ...\n      500: '#718096',\n      ...\n      900: '#171923',\n    }\n  }\n})\n")),(0,a.kt)("p",null,"Then, we can use the custom color scale as the color scheme for the button:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},'<Button colorScheme="brand">...</Button>\n')),(0,a.kt)("h2",{id:"changing-the-default-properties"},"Changing the default properties"),(0,a.kt)("p",null,"Let's assume we want to change the default size, variant or color scheme of\nevery button in our app. Here's how we can do that:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"import { defineStyleConfig } from '@chakra-ui/react'\n\nexport const buttonTheme = defineStyleConfig({\n  defaultProps: {\n    size: 'lg',\n    variant: 'outline',\n    colorScheme: 'brand',\n  },\n})\n\n// This saves you time, instead of manually setting the size,\n// variant and color scheme every time you use a button:\n<Button size=\"lg\" variant=\"outline\" colorScheme=\"brand\">...</Button>\n")),(0,a.kt)("h2",{id:"showcase"},"Showcase"),(0,a.kt)(s,{mdxType:"Showcase"}))}f.isMDXComponent=!0}}]);