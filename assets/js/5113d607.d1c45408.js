"use strict";(self.webpackChunkchakra_ui_docs=self.webpackChunkchakra_ui_docs||[]).push([[7693],{3905:(e,r,t)=>{t.d(r,{Zo:()=>c,kt:()=>h});var n=t(67294);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function s(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var u=n.createContext({}),l=function(e){var r=n.useContext(u),t=r;return e&&(t="function"==typeof e?e(r):i(i({},r),e)),t},c=function(e){var r=l(e.components);return n.createElement(u.Provider,{value:r},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},m=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,o=e.originalType,u=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=l(t),m=a,h=p["".concat(u,".").concat(m)]||p[m]||d[m]||o;return t?n.createElement(h,i(i({ref:r},c),{},{components:t})):n.createElement(h,i({ref:r},c))}));function h(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=m;var s={};for(var u in r)hasOwnProperty.call(r,u)&&(s[u]=r[u]);s.originalType=e,s[p]="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=t[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}m.displayName="MDXCreateElement"},855:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>u,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var n=t(87462),a=(t(67294),t(3905));const o={title:"useMediaQuery",package:"@chakra-ui/hooks",description:"React hook to detect media queries"},i=void 0,s={unversionedId:"hooks/use-media-query",id:"hooks/use-media-query",title:"useMediaQuery",description:"React hook to detect media queries",source:"@site/content/docs/hooks/use-media-query.mdx",sourceDirName:"hooks",slug:"/hooks/use-media-query",permalink:"/docs/hooks/use-media-query",draft:!1,tags:[],version:"current",lastUpdatedBy:"IshikawaMasashi",lastUpdatedAt:1675293453,formattedLastUpdatedAt:"Feb 1, 2023",frontMatter:{title:"useMediaQuery",package:"@chakra-ui/hooks",description:"React hook to detect media queries"},sidebar:"defaultSidebar",previous:{title:"useDisclosure",permalink:"/docs/hooks/use-disclosure"},next:{title:"useMergeRefs",permalink:"/docs/hooks/use-merge-refs"}},u={},l=[{value:"Import",id:"import",level:2},{value:"Return value",id:"return-value",level:2},{value:"Usage",id:"usage",level:2}],c={toc:l};function p(e){let{components:r,...t}=e;return(0,a.kt)("wrapper",(0,n.Z)({},c,t,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"useMediaQuery")," is a custom hook used to help detect whether a single media\nquery or multiple media queries individually match."),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia"},"Learn more about the API and its backgrounds.")),(0,a.kt)("h2",{id:"import"},"Import"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"import { useMediaQuery } from '@chakra-ui/react'\n")),(0,a.kt)("h2",{id:"return-value"},"Return value"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"useMediaQuery")," hook returns an array of booleans, indicating whether the\ngiven query matches or queries match."),(0,a.kt)("p",null,"Why an array? ",(0,a.kt)("inlineCode",{parentName:"p"},"useMediaQuery")," accepts both a string and an array of strings, but\nwill always return an array. This way, you can combine multiple media queries\nwhich will be individually matched in a single call."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Keep in mind this API relies on the users browser support of\n",(0,a.kt)("inlineCode",{parentName:"p"},"window.matchMedia")," and will always return ",(0,a.kt)("inlineCode",{parentName:"p"},"false")," if it is not supported or\ndoes not exist (e.g. during serverside rendering).")),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"function Example() {\n  const [isLargerThan1280] = useMediaQuery('(min-width: 1280px)')\n\n  return (\n    <Text>\n      {isLargerThan1280 ? 'larger than 1280px' : 'smaller than 1280px'}\n    </Text>\n  )\n}\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"function Example() {\n  const [isLargerThanHD, isDisplayingInBrowser] = useMediaQuery([\n    '(min-width: 1920px)',\n    '(display-mode: browser)',\n  ])\n\n  function determineText() {\n    if (isLargerThanHD) {\n      return `high resolution you got there ${\n        isDisplayingInBrowser ? 'in your browser' : 'on your screen'\n      }`\n    }\n\n    return isDisplayingInBrowser\n      ? 'rendering in a browser'\n      : 'rendering on something else, e.g. PWA'\n  }\n\n  return <Text>{determineText()}</Text>\n}\n")))}p.isMDXComponent=!0}}]);