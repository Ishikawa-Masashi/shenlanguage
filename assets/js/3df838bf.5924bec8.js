"use strict";(self.webpackChunkchakra_ui_docs=self.webpackChunkchakra_ui_docs||[]).push([[9699],{3905:(t,e,n)=>{n.d(e,{Zo:()=>p,kt:()=>m});var o=n(67294);function a(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function s(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);e&&(o=o.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,o)}return n}function r(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?s(Object(n),!0).forEach((function(e){a(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function i(t,e){if(null==t)return{};var n,o,a=function(t,e){if(null==t)return{};var n,o,a={},s=Object.keys(t);for(o=0;o<s.length;o++)n=s[o],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(t);for(o=0;o<s.length;o++)n=s[o],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}var l=o.createContext({}),c=function(t){var e=o.useContext(l),n=e;return t&&(n="function"==typeof t?t(e):r(r({},e),t)),n},p=function(t){var e=c(t.components);return o.createElement(l.Provider,{value:e},t.children)},u={inlineCode:"code",wrapper:function(t){var e=t.children;return o.createElement(o.Fragment,{},e)}},d=o.forwardRef((function(t,e){var n=t.components,a=t.mdxType,s=t.originalType,l=t.parentName,p=i(t,["components","mdxType","originalType","parentName"]),d=c(n),m=a,k=d["".concat(l,".").concat(m)]||d[m]||u[m]||s;return n?o.createElement(k,r(r({ref:e},p),{},{components:n})):o.createElement(k,r({ref:e},p))}));function m(t,e){var n=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var s=n.length,r=new Array(s);r[0]=d;var i={};for(var l in e)hasOwnProperty.call(e,l)&&(i[l]=e[l]);i.originalType=t,i.mdxType="string"==typeof t?t:a,r[1]=i;for(var c=2;c<s;c++)r[c]=n[c];return o.createElement.apply(null,r)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},67200:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>l,contentTitle:()=>r,default:()=>k,frontMatter:()=>s,metadata:()=>i,toc:()=>c});var o=n(87462),a=(n(67294),n(3905));const s={},r="Toast",i={unversionedId:"components/feedback/toast/index",id:"components/feedback/toast/index",title:"Toast",description:"The toast component is used to give feedback to users after an action has",source:"@site/content/docs/components/feedback/toast/index.mdx",sourceDirName:"components/feedback/toast",slug:"/components/feedback/toast/",permalink:"/docs/components/feedback/toast/",draft:!1,tags:[],version:"current",lastUpdatedBy:"IshikawaMasashi",lastUpdatedAt:1675135144,formattedLastUpdatedAt:"Jan 31, 2023",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"Theming",permalink:"/docs/components/feedback/spinner/theming"},next:{title:"Button",permalink:"/docs/components/forms/button/"}},l={},c=[{value:"Import",id:"import",level:2},{value:"Usage",id:"usage",level:2},{value:"Custom component",id:"custom-component",level:2},{value:"Closing Toasts",id:"closing-toasts",level:2},{value:"Updating Toasts",id:"updating-toasts",level:2},{value:"Status",id:"status",level:2},{value:"Variants",id:"variants",level:2},{value:"Custom container styles",id:"custom-container-styles",level:2},{value:"Changing the toast position",id:"changing-the-toast-position",level:2},{value:"Preventing Duplicate Toast",id:"preventing-duplicate-toast",level:2},{value:"Standalone Toasts",id:"standalone-toasts",level:2},{value:"Props",id:"props",level:2}],p=t=>function(e){return console.warn("Component "+t+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",e)},u=p("ComponentLinks"),d=p("PropsTable"),m={toc:c};function k(t){let{components:e,...n}=t;return(0,a.kt)("wrapper",(0,o.Z)({},m,n,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"toast"},"Toast"),(0,a.kt)("p",null,"The toast component is used to give feedback to users after an action has\ntaken place."),(0,a.kt)(u,{github:{package:"toast"},npm:{package:"@chakra-ui/toast"},theme:{componentName:"toast"},mdxType:"ComponentLinks"}),(0,a.kt)("h2",{id:"import"},"Import"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"import { useToast } from '@chakra-ui/react';\n")),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)("p",null,"The toast will close itself when the close button is clicked, or after a\ntimeout."),(0,a.kt)("p",null,"Toasts can be configured to appear at either the top or the bottom of an\napplication window, and it is possible to have more than one toast onscreen at a\ntime."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"function ToastExample() {\n  const toast = useToast();\n  return (\n    <Button\n      onClick={() =>\n        toast({\n          title: 'Account created.',\n          description: \"We've created your account for you.\",\n          status: 'success',\n          duration: 9000,\n          isClosable: true,\n        })\n      }\n    >\n      Show Toast\n    </Button>\n  );\n}\n")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Make sure to call ",(0,a.kt)("inlineCode",{parentName:"p"},"useToast")," at least one component level below the\n",(0,a.kt)("inlineCode",{parentName:"p"},"<ChakraProvider>")," because it needs access to the current theme.")),(0,a.kt)("h2",{id:"custom-component"},"Custom component"),(0,a.kt)("p",null,"Display a custom component instead of the default Toast UI."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"function CustomToastExample() {\n  const toast = useToast();\n  return (\n    <Button\n      onClick={() =>\n        toast({\n          position: 'bottom-left',\n          render: () => (\n            <Box color='white' p={3} bg='blue.500'>\n              Hello World\n            </Box>\n          ),\n        })\n      }\n    >\n      Show Toast\n    </Button>\n  );\n}\n")),(0,a.kt)("h2",{id:"closing-toasts"},"Closing Toasts"),(0,a.kt)("p",null,"Toasts can be closed imperatively, individually (via the ",(0,a.kt)("inlineCode",{parentName:"p"},"close")," instance\nmethod) or all together (via the ",(0,a.kt)("inlineCode",{parentName:"p"},"closeAll")," instance method)."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"function ClosingToastExample() {\n  const toast = useToast();\n  const toastIdRef = React.useRef();\n\n  function close() {\n    if (toastIdRef.current) {\n      toast.close(toastIdRef.current);\n    }\n  }\n\n  function closeAll() {\n    // you may optionally pass an object of positions to exclusively close\n    // keeping other positions opened\n    // e.g. `{ positions: ['bottom'] }`\n    toast.closeAll();\n  }\n\n  function addToast() {\n    toastIdRef.current = toast({ description: 'some text' });\n  }\n\n  return (\n    <Wrap>\n      <Button onClick={addToast} type='button'>\n        Toast\n      </Button>\n\n      <Button onClick={close} type='button' variant='outline'>\n        Close last toast\n      </Button>\n\n      <Button onClick={closeAll} type='button' variant='outline'>\n        Close all toasts\n      </Button>\n    </Wrap>\n  );\n}\n")),(0,a.kt)("h2",{id:"updating-toasts"},"Updating Toasts"),(0,a.kt)("p",null,"Toasts' options can be updated, by passing an ",(0,a.kt)("inlineCode",{parentName:"p"},"id")," and the new ",(0,a.kt)("inlineCode",{parentName:"p"},"options")," to the\n",(0,a.kt)("inlineCode",{parentName:"p"},"update")," instance method."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"function UpdatingToastExample() {\n  const toast = useToast();\n  const toastIdRef = React.useRef();\n\n  function update() {\n    if (toastIdRef.current) {\n      toast.update(toastIdRef.current, { description: 'new text' });\n    }\n  }\n\n  function addToast() {\n    toastIdRef.current = toast({ description: 'some text' });\n  }\n\n  return (\n    <Stack isInline spacing={2}>\n      <Button onClick={addToast} type='button'>\n        Toast\n      </Button>\n\n      <Button onClick={update} type='button' variant='outline'>\n        Update last toast\n      </Button>\n    </Stack>\n  );\n}\n")),(0,a.kt)("h2",{id:"status"},"Status"),(0,a.kt)("p",null,"You can use ",(0,a.kt)("inlineCode",{parentName:"p"},"status")," to change the color of your toasts."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"function ToastStatusExample() {\n  const toast = useToast();\n  const statuses = ['success', 'error', 'warning', 'info'];\n\n  return (\n    <Wrap>\n      {statuses.map((status, i) => (\n        <WrapItem key={i}>\n          <Button\n            onClick={() =>\n              toast({\n                title: `${status} toast`,\n                status: status,\n                isClosable: true,\n              })\n            }\n          >\n            Show {status} toast\n          </Button>\n        </WrapItem>\n      ))}\n    </Wrap>\n  );\n}\n")),(0,a.kt)("h2",{id:"variants"},"Variants"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Toast")," uses the same variants as the\n",(0,a.kt)("a",{parentName:"p",href:"https://chakra-ui.com/docs/components/feedback/alert"},(0,a.kt)("inlineCode",{parentName:"a"},"Alert"))," component."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"function ToastVariantsExample() {\n  const toast = useToast();\n  const variants = ['solid', 'subtle', 'left-accent', 'top-accent'];\n\n  return (\n    <Wrap>\n      {variants.map((variant, i) => (\n        <WrapItem key={i}>\n          <Button\n            onClick={() =>\n              toast({\n                title: `${variant} toast`,\n                variant: variant,\n                isClosable: true,\n              })\n            }\n          >\n            Show {variant} toast\n          </Button>\n        </WrapItem>\n      ))}\n    </Wrap>\n  );\n}\n")),(0,a.kt)("h2",{id:"custom-container-styles"},"Custom container styles"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"toast")," function now exposes a ",(0,a.kt)("inlineCode",{parentName:"p"},"containerStyle")," property you can use to\noverride the default styles for the toast container."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"function Example() {\n  // Via instantiation\n  const toast = useToast({\n    position: 'top',\n    title: 'Container style is updated',\n    containerStyle: {\n      width: '800px',\n      maxWidth: '100%',\n    },\n  });\n  // Or via trigger\n  // Style here will overwrite the entire style above\n  return (\n    <Button\n      onClick={() => {\n        toast({\n          containerStyle: {\n            border: '20px solid red',\n          },\n        });\n      }}\n    >\n      Click me to show toast with custom container style.\n    </Button>\n  );\n}\n")),(0,a.kt)("h2",{id:"changing-the-toast-position"},"Changing the toast position"),(0,a.kt)("p",null,"Using the ",(0,a.kt)("inlineCode",{parentName:"p"},"position")," prop you can adjust where your toast will be popup from."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"function PositionExample() {\n  const toast = useToast();\n  const positions = [\n    'top',\n    'top-right',\n    'top-left',\n    'bottom',\n    'bottom-right',\n    'bottom-left',\n  ];\n\n  return (\n    <Wrap>\n      {positions.map((position, i) => (\n        <WrapItem key={i}>\n          <Button\n            onClick={() =>\n              toast({\n                title: `${position} toast`,\n                position: position,\n                isClosable: true,\n              })\n            }\n          >\n            Show {position} toast\n          </Button>\n        </WrapItem>\n      ))}\n    </Wrap>\n  );\n}\n")),(0,a.kt)("h2",{id:"preventing-duplicate-toast"},"Preventing Duplicate Toast"),(0,a.kt)("p",null,"In some cases you might need to prevent duplicate of specific toasts. To achieve\nyou need to pass an ",(0,a.kt)("inlineCode",{parentName:"p"},"id")," and use the ",(0,a.kt)("inlineCode",{parentName:"p"},"toast.isActive")," method to determine when\nto call ",(0,a.kt)("inlineCode",{parentName:"p"},"toast(...)"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"function PreventDuplicateExample() {\n  const toast = useToast();\n  const id = 'test-toast';\n  return (\n    <Button\n      onClick={() => {\n        if (!toast.isActive(id)) {\n          toast({\n            id,\n            title: 'Hey! You can create a duplicate toast',\n          });\n        }\n      }}\n    >\n      Click me!\n    </Button>\n  );\n}\n")),(0,a.kt)("h2",{id:"standalone-toasts"},"Standalone Toasts"),(0,a.kt)("p",null,"Use ",(0,a.kt)("inlineCode",{parentName:"p"},"createStandaloneToast")," to create toasts from outside of your React\nComponents."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"\ud83d\udea8 If you're using a custom theme, you ",(0,a.kt)("strong",{parentName:"p"},"must")," pass it in the arguments to\n",(0,a.kt)("inlineCode",{parentName:"p"},"createStandaloneToast"),". If you don't, the default theme will be applied,\ncausing the font size of your page to shift when the toast is open.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"import * as ReactDOM from 'react-dom/client';\nimport { createStandaloneToast } from '@chakra-ui/toast';\n\nconst { ToastContainer, toast } = createStandaloneToast();\n\n// render the ToastContainer in your React root\nconst rootElement = document.getElementById('root');\nReactDOM.createRoot(yourRootElement).render(\n  <>\n    <App />\n    <ToastContainer />\n  </>\n);\n\ntoast({\n  title: 'An error occurred.',\n  description: 'Unable to create user account.',\n  status: 'error',\n  duration: 9000,\n  isClosable: true,\n});\n")),(0,a.kt)("h2",{id:"props"},"Props"),(0,a.kt)(d,{of:"useToast",mdxType:"PropsTable"}))}k.isMDXComponent=!0}}]);