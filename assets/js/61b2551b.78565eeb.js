"use strict";(self.webpackChunkchakra_ui_docs=self.webpackChunkchakra_ui_docs||[]).push([[8802],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},k=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=u(e,["components","mdxType","originalType","parentName"]),c=l(n),k=a,h=c["".concat(s,".").concat(k)]||c[k]||d[k]||o;return n?r.createElement(h,i(i({ref:t},p),{},{components:n})):r.createElement(h,i({ref:t},p))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=k;var u={};for(var s in t)hasOwnProperty.call(t,s)&&(u[s]=t[s]);u.originalType=e,u[c]="string"==typeof e?e:a,i[1]=u;for(var l=2;l<o;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}k.displayName="MDXCreateElement"},74433:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>u,toc:()=>l});var r=n(87462),a=(n(67294),n(3905));const o={title:"useBreakpointValue",package:"@chakra-ui/media-query",description:"React hook for getting the value for the current breakpoint from the provided responsive values object."},i=void 0,u={unversionedId:"hooks/use-breakpoint-value",id:"hooks/use-breakpoint-value",title:"useBreakpointValue",description:"React hook for getting the value for the current breakpoint from the provided responsive values object.",source:"@site/content/docs/hooks/use-breakpoint-value.mdx",sourceDirName:"hooks",slug:"/hooks/use-breakpoint-value",permalink:"/docs/hooks/use-breakpoint-value",draft:!1,tags:[],version:"current",lastUpdatedBy:"IshikawaMasashi",lastUpdatedAt:1675293453,formattedLastUpdatedAt:"Feb 1, 2023",frontMatter:{title:"useBreakpointValue",package:"@chakra-ui/media-query",description:"React hook for getting the value for the current breakpoint from the provided responsive values object."},sidebar:"defaultSidebar",previous:{title:"useBoolean",permalink:"/docs/hooks/use-boolean"},next:{title:"useCheckboxGroup",permalink:"/docs/hooks/use-checkbox-group"}},s={},l=[{value:"Import",id:"import",level:2},{value:"Return value",id:"return-value",level:2},{value:"Usage",id:"usage",level:2}],p={toc:l};function c(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"useBreakpointValue")," is a custom hook which returns the value for the current\nbreakpoint from the provided responsive values object. This hook also responds\nto the window resizing and returning the appropriate value for the new window\nsize."),(0,a.kt)("p",null,"The new ",(0,a.kt)("inlineCode",{parentName:"p"},"variant")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"size")," props don't currently accept responsive values\n(specified as objects or arrays), but ",(0,a.kt)("inlineCode",{parentName:"p"},"useBreakpointValue")," is a good way to\nachieve the same behavior."),(0,a.kt)("h2",{id:"import"},"Import"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"import { useBreakpointValue } from '@chakra-ui/react'\n")),(0,a.kt)("h2",{id:"return-value"},"Return value"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"useBreakpointValue")," hook returns the value for the current breakpoint."),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Make sure to provide a base value when using ",(0,a.kt)("inlineCode",{parentName:"p"},"useBreakpointValue")," so it\ndoesn't return ",(0,a.kt)("inlineCode",{parentName:"p"},"undefined")," in the first render.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"function Example() {\n  const variant = useBreakpointValue(\n    {\n      base: 'outline',\n      md: 'solid',\n    },\n    {\n      // Breakpoint to use when mediaqueries cannot be used, such as in server-side rendering\n      // (Defaults to 'base')\n      fallback: 'md',\n    },\n  )\n\n  return (\n    <VStack align='flex-start'>\n      <Text>Resize your window to see the button variant change</Text>\n      <Button colorScheme='teal' variant={variant}>\n        Button\n      </Button>\n    </VStack>\n  )\n}\n")),(0,a.kt)("p",null,"This hook is built to work in server-side rendering (SSR) applications by\ndefault. You might notice a quick flash of incorrect media query values when you\nuse them."),(0,a.kt)("p",null,"If you're creating a client-side rendered app, you can leverage the ssr argument\nto get the correct value on the first render."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"const buttonSize = useBreakpointValue({ base: 'sm', lg: 'md' }, { ssr: false })\n\nconst breakpoint = useBreakpoint({ ssr: false })\n")))}c.isMDXComponent=!0}}]);