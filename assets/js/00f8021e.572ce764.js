"use strict";(self.webpackChunkchakra_ui_docs=self.webpackChunkchakra_ui_docs||[]).push([[8281],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>h});var a=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var i=a.createContext({}),s=function(e){var n=a.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},u=function(e){var n=s(e.components);return a.createElement(i.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},c=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,i=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),c=s(t),h=o,m=c["".concat(i,".").concat(h)]||c[h]||d[h]||r;return t?a.createElement(m,l(l({ref:n},u),{},{components:t})):a.createElement(m,l({ref:n},u))}));function h(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,l=new Array(r);l[0]=c;var p={};for(var i in n)hasOwnProperty.call(n,i)&&(p[i]=n[i]);p.originalType=e,p.mdxType="string"==typeof e?e:o,l[1]=p;for(var s=2;s<r;s++)l[s]=t[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}c.displayName="MDXCreateElement"},87999:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>l,default:()=>m,frontMatter:()=>r,metadata:()=>p,toc:()=>s});var a=t(87462),o=(t(67294),t(3905));const r={},l="Input",p={unversionedId:"components/forms/input/index",id:"components/forms/input/index",title:"Input",description:"Input component is a component that is used to get user input in a text field.",source:"@site/content/docs/components/forms/input/index.mdx",sourceDirName:"components/forms/input",slug:"/components/forms/input/",permalink:"/docs/components/forms/input/",draft:!1,tags:[],version:"current",lastUpdatedBy:"IshikawaMasashi",lastUpdatedAt:1675135144,formattedLastUpdatedAt:"Jan 31, 2023",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"Theming",permalink:"/docs/components/forms/icon-button/theming"},next:{title:"Theming",permalink:"/docs/components/forms/input/theming"}},i={},s=[{value:"Import",id:"import",level:2},{value:"Usage",id:"usage",level:2},{value:"Changing the size of the Input",id:"changing-the-size-of-the-input",level:3},{value:"Changing the appearance of the input",id:"changing-the-appearance-of-the-input",level:3},{value:"Left and Right Addons",id:"left-and-right-addons",level:3},{value:"Add elements inside Input",id:"add-elements-inside-input",level:3},{value:"Password Input Example",id:"password-input-example",level:3},{value:"Controlled Input",id:"controlled-input",level:3},{value:"Changing the focus and error border colors",id:"changing-the-focus-and-error-border-colors",level:3},{value:"Styling the placeholder",id:"styling-the-placeholder",level:3},{value:"Input Methods other than Text",id:"input-methods-other-than-text",level:3},{value:"Props",id:"props",level:2}],u=e=>function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",n)},d=u("ComponentLinks"),c=u("PropsTable"),h={toc:s};function m(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,a.Z)({},h,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"input"},"Input"),(0,o.kt)("p",null,"Input component is a component that is used to get user input in a text field."),(0,o.kt)(d,{github:{package:"input"},npm:{package:"@chakra-ui/input"},theme:{componentName:"input"},mdxType:"ComponentLinks"}),(0,o.kt)("h2",{id:"import"},"Import"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import { Input } from '@chakra-ui/react';\n")),(0,o.kt)("h2",{id:"usage"},"Usage"),(0,o.kt)("p",null,"Here's a basic usage example of the ",(0,o.kt)("inlineCode",{parentName:"p"},"Input")," component:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"<Input placeholder='Basic usage' />\n")),(0,o.kt)("h3",{id:"changing-the-size-of-the-input"},"Changing the size of the Input"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"Input")," component comes in four sizes. The default is ",(0,o.kt)("inlineCode",{parentName:"p"},"md"),"."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"xs")," (",(0,o.kt)("inlineCode",{parentName:"li"},"24px"),")"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"sm")," (",(0,o.kt)("inlineCode",{parentName:"li"},"32px"),")"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"md")," (",(0,o.kt)("inlineCode",{parentName:"li"},"40px"),")"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"lg")," (",(0,o.kt)("inlineCode",{parentName:"li"},"48px"),")")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"<Stack spacing={3}>\n  <Input placeholder='extra small size' size='xs' />\n  <Input placeholder='small size' size='sm' />\n  <Input placeholder='medium size' size='md' />\n  <Input placeholder='large size' size='lg' />\n</Stack>\n")),(0,o.kt)("p",null,"If you want to use the native DOM ",(0,o.kt)("inlineCode",{parentName:"p"},"size")," attribute you can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"htmlSize"),"\nprop. For it to work as expected you will also need to provide the ",(0,o.kt)("inlineCode",{parentName:"p"},"width")," prop\nset to ",(0,o.kt)("inlineCode",{parentName:"p"},"auto"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"<Input htmlSize={4} width='auto' />\n")),(0,o.kt)("h3",{id:"changing-the-appearance-of-the-input"},"Changing the appearance of the input"),(0,o.kt)("p",null,"The input component comes in 4 variants: ",(0,o.kt)("inlineCode",{parentName:"p"},"outline"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"unstyled"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"flushed"),", and\n",(0,o.kt)("inlineCode",{parentName:"p"},"filled"),". Pass the ",(0,o.kt)("inlineCode",{parentName:"p"},"variant")," prop and set it to one of these values."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"<Stack spacing={3}>\n  <Input variant='outline' placeholder='Outline' />\n  <Input variant='filled' placeholder='Filled' />\n  <Input variant='flushed' placeholder='Flushed' />\n  <Input variant='unstyled' placeholder='Unstyled' />\n</Stack>\n")),(0,o.kt)("h3",{id:"left-and-right-addons"},"Left and Right Addons"),(0,o.kt)("p",null,"Like bootstrap, you can add addons to the left and right of the ",(0,o.kt)("inlineCode",{parentName:"p"},"Input"),"\ncomponent. Chakra UI exports ",(0,o.kt)("inlineCode",{parentName:"p"},"InputGroup"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"InputLeftAddon"),", and\n",(0,o.kt)("inlineCode",{parentName:"p"},"InputRightAddon")," to help with this use case."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"<Stack spacing={4}>\n  <InputGroup>\n    <InputLeftAddon children='+234' />\n    <Input type='tel' placeholder='phone number' />\n  </InputGroup>\n\n  {/* If you add the size prop to `InputGroup`, it'll pass it to all its children. */}\n  <InputGroup size='sm'>\n    <InputLeftAddon children='https://' />\n    <Input placeholder='mysite' />\n    <InputRightAddon children='.com' />\n  </InputGroup>\n</Stack>\n")),(0,o.kt)("h3",{id:"add-elements-inside-input"},"Add elements inside Input"),(0,o.kt)("p",null,"In some scenarios, you might need to add an icon or button inside the input\ncomponent. Chakra UI exports ",(0,o.kt)("inlineCode",{parentName:"p"},"InputLeftElement")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"InputRightElement")," to help\nwith this use case."),(0,o.kt)("p",null,"If the left or right is an icon or text, you can pass ",(0,o.kt)("inlineCode",{parentName:"p"},'pointerEvents="none"')," to\n",(0,o.kt)("inlineCode",{parentName:"p"},"InputLeftElement")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"InputRightElement")," to ensure that clicking on them\nfocused the input."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"<Stack spacing={4}>\n  <InputGroup>\n    <InputLeftElement\n      pointerEvents='none'\n      children={<PhoneIcon color='gray.300' />}\n    />\n    <Input type='tel' placeholder='Phone number' />\n  </InputGroup>\n\n  <InputGroup>\n    <InputLeftElement\n      pointerEvents='none'\n      color='gray.300'\n      fontSize='1.2em'\n      children='$'\n    />\n    <Input placeholder='Enter amount' />\n    <InputRightElement children={<CheckIcon color='green.500' />} />\n  </InputGroup>\n</Stack>\n")),(0,o.kt)("h3",{id:"password-input-example"},"Password Input Example"),(0,o.kt)("p",null,"Let's use these components to create a password input with a show/hide password\nfunctionality:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"function PasswordInput() {\n  const [show, setShow] = React.useState(false);\n  const handleClick = () => setShow(!show);\n\n  return (\n    <InputGroup size='md'>\n      <Input\n        pr='4.5rem'\n        type={show ? 'text' : 'password'}\n        placeholder='Enter password'\n      />\n      <InputRightElement width='4.5rem'>\n        <Button h='1.75rem' size='sm' onClick={handleClick}>\n          {show ? 'Hide' : 'Show'}\n        </Button>\n      </InputRightElement>\n    </InputGroup>\n  );\n}\n")),(0,o.kt)("h3",{id:"controlled-input"},"Controlled Input"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"function Example() {\n  const [value, setValue] = React.useState('');\n  const handleChange = (event) => setValue(event.target.value);\n\n  return (\n    <>\n      <Text mb='8px'>Value: {value}</Text>\n      <Input\n        value={value}\n        onChange={handleChange}\n        placeholder='Here is a sample placeholder'\n        size='sm'\n      />\n    </>\n  );\n}\n")),(0,o.kt)("h3",{id:"changing-the-focus-and-error-border-colors"},"Changing the focus and error border colors"),(0,o.kt)("p",null,"You can change the border color that shows when the input receives focus\n(",(0,o.kt)("inlineCode",{parentName:"p"},"focusBorderColor"),") and when ",(0,o.kt)("inlineCode",{parentName:"p"},"isInvalid")," is set to ",(0,o.kt)("inlineCode",{parentName:"p"},"true")," (",(0,o.kt)("inlineCode",{parentName:"p"},"errorBorderColor"),").\nThe value can be set to a color in the theme object, like ",(0,o.kt)("inlineCode",{parentName:"p"},"teal.400"),", or a raw\nCSS value."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"<Stack spacing={3}>\n  <Input focusBorderColor='lime' placeholder='Here is a sample placeholder' />\n  <Input\n    focusBorderColor='pink.400'\n    placeholder='Here is a sample placeholder'\n  />\n  <Input\n    isInvalid\n    errorBorderColor='red.300'\n    placeholder='Here is a sample placeholder'\n  />\n  <Input\n    isInvalid\n    errorBorderColor='crimson'\n    placeholder='Here is a sample placeholder'\n  />\n</Stack>\n")),(0,o.kt)("h3",{id:"styling-the-placeholder"},"Styling the placeholder"),(0,o.kt)("p",null,"The placeholder of an input can be styled by using the ",(0,o.kt)("inlineCode",{parentName:"p"},"_placeholder")," prop. Per\ndefault the placeholder has an opacity of 0.6, so it can be necessary to set the\nopacity to 1 if you want the placeholder to have a specific color."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"<Stack spacing={3}>\n  <Input placeholder='default placeholder' />\n  <Input\n    placeholder='custom placeholder'\n    _placeholder={{ opacity: 1, color: 'gray.500' }}\n  />\n  <Input\n    color='teal'\n    placeholder='custom placeholder'\n    _placeholder={{ color: 'inherit' }}\n  />\n  <Input\n    color='tomato'\n    placeholder='custom placeholder'\n    _placeholder={{ opacity: 0.4, color: 'inherit' }}\n  />\n</Stack>\n")),(0,o.kt)("h3",{id:"input-methods-other-than-text"},"Input Methods other than Text"),(0,o.kt)("p",null,"You can use different types with ",(0,o.kt)("inlineCode",{parentName:"p"},"Input")," such as dateTime, color, search, file etc."),(0,o.kt)("p",null,"Date and Time Picker"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"<Input placeholder='Select Date and Time' size='md' type='datetime-local' />\n")),(0,o.kt)("p",null,"Check for different input types available : ",(0,o.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Input#input_types"},"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Input#input_types")),(0,o.kt)("h2",{id:"props"},"Props"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"Input")," component composes ",(0,o.kt)("a",{parentName:"p",href:"/docs/components/layout/box"},"Box")," so you can\npass all ",(0,o.kt)("inlineCode",{parentName:"p"},"Box")," props, and ",(0,o.kt)("inlineCode",{parentName:"p"},"React.InputHTMLAttributes"),"."),(0,o.kt)(c,{of:"Input",mdxType:"PropsTable"}))}m.isMDXComponent=!0}}]);