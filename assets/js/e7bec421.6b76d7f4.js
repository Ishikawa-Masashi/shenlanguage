"use strict";(self.webpackChunkchakra_ui_docs=self.webpackChunkchakra_ui_docs||[]).push([[293],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>b});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),s=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=s(e.components);return a.createElement(c.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=s(n),u=r,b=d["".concat(c,".").concat(u)]||d[u]||m[u]||o;return n?a.createElement(b,l(l({ref:t},p),{},{components:n})):a.createElement(b,l({ref:t},p))}));function b(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=u;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[d]="string"==typeof e?e:r,l[1]=i;for(var s=2;s<o;s++)l[s]=n[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},99975:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>s});var a=n(87462),r=(n(67294),n(3905));const o={title:"Chakra UI + React Table",description:"Building a Data Table with Chakra UI and React Table",tags:["table","data table","react-table"],author:"TimKolberger",category:"integrations"},l=void 0,i={unversionedId:"integrations/with-react-table",id:"integrations/with-react-table",title:"Chakra UI + React Table",description:"Building a Data Table with Chakra UI and React Table",source:"@site/content/getting-started/integrations/with-react-table.mdx",sourceDirName:"integrations",slug:"/integrations/with-react-table",permalink:"/getting-started/integrations/with-react-table",draft:!1,tags:[{label:"table",permalink:"/getting-started/tags/table"},{label:"data table",permalink:"/getting-started/tags/data-table"},{label:"react-table",permalink:"/getting-started/tags/react-table"}],version:"current",lastUpdatedBy:"IshikawaMasashi",lastUpdatedAt:1675293453,formattedLastUpdatedAt:"Feb 1, 2023",frontMatter:{title:"Chakra UI + React Table",description:"Building a Data Table with Chakra UI and React Table",tags:["table","data table","react-table"],author:"TimKolberger",category:"integrations"},sidebar:"defaultSidebar",previous:{title:"Chakra UI + React Hook Form",permalink:"/getting-started/integrations/with-hook-form"},next:{title:"Chakra UI + Storybook",permalink:"/getting-started/integrations/with-storybook"}},c={},s=[],p=(d="SandpackEditor",function(e){return console.warn("Component "+d+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)});var d;const m={toc:s};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"This example shows how to build a sortable data table with Chakra UI's table\ncomponents, and the ",(0,r.kt)("a",{parentName:"p",href:"https://react-table.tanstack.com/"},"React Table library"),"."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://codesandbox.io/s/chakra-ui-data-table-vfivp?file=/src/DataTable.tsx"},"Explore this example on CodeSandbox")),(0,r.kt)(p,{dependencies:{"@tanstack/react-table":"latest"},mdxType:"SandpackEditor"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"DataTable.tsx active","DataTable.tsx":!0,active:!0},'import * as React from "react";\nimport { Table, Thead, Tbody, Tr, Th, Td, chakra } from "@chakra-ui/react";\nimport { TriangleDownIcon, TriangleUpIcon } from "@chakra-ui/icons";\nimport {\n  useReactTable,\n  flexRender,\n  getCoreRowModel,\n  ColumnDef,\n  SortingState,\n  getSortedRowModel\n} from "@tanstack/react-table";\n\nexport type DataTableProps<Data extends object> = {\n  data: Data[];\n  columns: ColumnDef<Data, any>[];\n};\n\nexport function DataTable<Data extends object>({\n  data,\n  columns\n}: DataTableProps<Data>) {\n  const [sorting, setSorting] = React.useState<SortingState>([]);\n  const table = useReactTable({\n    columns,\n    data,\n    getCoreRowModel: getCoreRowModel(),\n    onSortingChange: setSorting,\n    getSortedRowModel: getSortedRowModel(),\n    state: {\n      sorting\n    }\n  });\n\n  return (\n    <Table>\n      <Thead>\n        {table.getHeaderGroups().map((headerGroup) => (\n          <Tr key={headerGroup.id}>\n            {headerGroup.headers.map((header) => {\n              // see https://tanstack.com/table/v8/docs/api/core/column-def#meta to type this correctly\n              const meta: any = header.column.columnDef.meta;\n              return (\n                <Th\n                  key={header.id}\n                  onClick={header.column.getToggleSortingHandler()}\n                  isNumeric={meta?.isNumeric}\n                >\n                  {flexRender(\n                    header.column.columnDef.header,\n                    header.getContext()\n                  )}\n\n                  <chakra.span pl="4">\n                    {header.column.getIsSorted() ? (\n                      header.column.getIsSorted() === "desc" ? (\n                        <TriangleDownIcon aria-label="sorted descending" />\n                      ) : (\n                        <TriangleUpIcon aria-label="sorted ascending" />\n                      )\n                    ) : null}\n                  </chakra.span>\n                </Th>\n              );\n            })}\n          </Tr>\n        ))}\n      </Thead>\n      <Tbody>\n        {table.getRowModel().rows.map((row) => (\n          <Tr key={row.id}>\n            {row.getVisibleCells().map((cell) => {\n              // see https://tanstack.com/table/v8/docs/api/core/column-def#meta to type this correctly\n              const meta: any = cell.column.columnDef.meta;\n              return (\n                <Td key={cell.id} isNumeric={meta?.isNumeric}>\n                  {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                </Td>\n              );\n            })}\n          </Tr>\n        ))}\n      </Tbody>\n    </Table>\n  );\n}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"App.tsx","App.tsx":!0},'import * as React from "react";\nimport { ChakraProvider } from "@chakra-ui/react";\nimport { createColumnHelper } from "@tanstack/react-table";\nimport { DataTable } from "./DataTable";\n\ntype UnitConversion = {\n  fromUnit: string;\n  toUnit: string;\n  factor: number;\n};\n\nconst data: UnitConversion[] = [\n  {\n    fromUnit: "inches",\n    toUnit: "millimetres (mm)",\n    factor: 25.4\n  },\n  {\n    fromUnit: "feet",\n    toUnit: "centimetres (cm)",\n    factor: 30.48\n  },\n  {\n    fromUnit: "yards",\n    toUnit: "metres (m)",\n    factor: 0.91444\n  }\n];\n\nconst columnHelper = createColumnHelper<UnitConversion>();\n\nconst columns = [\n  columnHelper.accessor("fromUnit", {\n    cell: (info) => info.getValue(),\n    header: "To convert"\n  }),\n  columnHelper.accessor("toUnit", {\n    cell: (info) => info.getValue(),\n    header: "Into"\n  }),\n  columnHelper.accessor("factor", {\n    cell: (info) => info.getValue(),\n    header: "Multiply by",\n    meta: {\n      isNumeric: true\n    }\n  })\n];\n\nexport default function App() {\n  return (\n    <ChakraProvider>\n      <DataTable columns={columns} data={data} />\n    </ChakraProvider>\n  );\n}\n'))),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Many examples from the\n",(0,r.kt)("a",{parentName:"p",href:"https://react-table.tanstack.com/docs/examples/basic"},"React Table docs")," are\nportable to use Chakra UI's components by converting ",(0,r.kt)("inlineCode",{parentName:"p"},"<table />")," to\n",(0,r.kt)("inlineCode",{parentName:"p"},"<Table />"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"<td />")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"<Td />"),", etc...")))}u.isMDXComponent=!0}}]);