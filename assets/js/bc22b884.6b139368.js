"use strict";(self.webpackChunkchakra_ui_docs=self.webpackChunkchakra_ui_docs||[]).push([[3117],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),c=p(n),m=r,k=c["".concat(s,".").concat(m)]||c[m]||d[m]||o;return n?a.createElement(k,l(l({ref:t},u),{},{components:n})):a.createElement(k,l({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=c;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var p=2;p<o;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},26396:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const o={title:"useDisclosure",package:"@chakra-ui/hooks",description:"React hook to handle common open and close scenarios in UI components"},l=void 0,i={unversionedId:"hooks/use-disclosure",id:"hooks/use-disclosure",title:"useDisclosure",description:"React hook to handle common open and close scenarios in UI components",source:"@site/content/docs/hooks/use-disclosure.mdx",sourceDirName:"hooks",slug:"/hooks/use-disclosure",permalink:"/docs/hooks/use-disclosure",draft:!1,tags:[],version:"current",lastUpdatedBy:"IshikawaMasashi",lastUpdatedAt:1675135144,formattedLastUpdatedAt:"Jan 31, 2023",frontMatter:{title:"useDisclosure",package:"@chakra-ui/hooks",description:"React hook to handle common open and close scenarios in UI components"},sidebar:"defaultSidebar",previous:{title:"useDimensions",permalink:"/docs/hooks/use-dimensions"},next:{title:"useMediaQuery",permalink:"/docs/hooks/use-media-query"}},s={},p=[{value:"Import",id:"import",level:2},{value:"Return value",id:"return-value",level:2},{value:"Usage",id:"usage",level:2},{value:"Parameters",id:"parameters",level:2}],u=(d="PropsTable",function(e){return console.warn("Component "+d+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)});var d;const c={toc:p};function m(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"useDisclosure")," is a custom hook used to help handle common ",(0,r.kt)("inlineCode",{parentName:"p"},"open"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"close"),", or\n",(0,r.kt)("inlineCode",{parentName:"p"},"toggle")," scenarios. It can be used to control feedback component such as\n",(0,r.kt)("a",{parentName:"p",href:"/docs/components/overlay/modal"},"Modal"),",\n",(0,r.kt)("a",{parentName:"p",href:"/docs/components/overlay/alert-dialog"},"AlertDialog"),",\n",(0,r.kt)("a",{parentName:"p",href:"/docs/components/overlay/drawer"},"Drawer"),", etc."),(0,r.kt)("h2",{id:"import"},"Import"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import { useDisclosure } from '@chakra-ui/react'\n")),(0,r.kt)("h2",{id:"return-value"},"Return value"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"useDisclosure")," hook returns an object with the following fields:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"isOpen")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"boolean")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"false")),(0,r.kt)("td",{parentName:"tr",align:null},"If ",(0,r.kt)("inlineCode",{parentName:"td"},"true"),", it sets the controlled component to its visible state.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"onClose")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"function")),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"Callback function to set a falsy value for the ",(0,r.kt)("inlineCode",{parentName:"td"},"isOpen")," parameter.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"onOpen")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"function")),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"Callback function to set a truthy value for the ",(0,r.kt)("inlineCode",{parentName:"td"},"isOpen")," parameter.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"onToggle")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"function")),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"Callback function to toggle the value of the ",(0,r.kt)("inlineCode",{parentName:"td"},"isOpen")," parameter.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"getDisclosureProps")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"function")),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"Callback function to retrieve a set of props for the controlled component.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"getButtonProps")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"function")),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"Callback function to retrieve a set of props for the button that triggers the disclosure.")))),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("p",null,"You can use a combination of the methods and values returned by the hook for\nvarious control of the components affected by the disclosure."),(0,r.kt)("p",null,"Below is the use of returned fields of the hook without a getter to control the\n",(0,r.kt)("inlineCode",{parentName:"p"},"Drawer")," component on button toggle."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"function Example() {\n  const { isOpen, onOpen, onClose } = useDisclosure()\n\n  return (\n    <>\n      <Button onClick={onOpen}>Open Drawer</Button>\n      <Drawer placement='right' onClose={onClose} isOpen={isOpen}>\n        <DrawerOverlay />\n        <DrawerContent>\n          <DrawerHeader borderBottomWidth='1px'>Basic Drawer</DrawerHeader>\n          <DrawerBody>\n            <p>Some contents...</p>\n            <p>Some contents...</p>\n            <p>Some contents...</p>\n          </DrawerBody>\n        </DrawerContent>\n      </Drawer>\n    </>\n  )\n}\n")),(0,r.kt)("p",null,"Using the ",(0,r.kt)("inlineCode",{parentName:"p"},"getDisclosureProps")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"getButtonProps")," methods returned by the hook\nprovides the needed attributes and handlers to the respective component and\nbutton for visibility toggling and accessibility."),(0,r.kt)("p",null,"The component that uses ",(0,r.kt)("inlineCode",{parentName:"p"},"getDisclosureProps")," receives the following props:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"An ",(0,r.kt)("inlineCode",{parentName:"li"},"id")," (can optionally pass this in as a prop to the hook to render a custom\nvalue)."),(0,r.kt)("li",{parentName:"ul"},"A dynamically rendered ",(0,r.kt)("inlineCode",{parentName:"li"},"hidden")," attribute.")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"getDisclosureProps")," can directly accept any additional props for the component."),(0,r.kt)("p",null,"The button that uses ",(0,r.kt)("inlineCode",{parentName:"p"},"getButtonProps")," for toggling receives the following props:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"A dynamically rendered ",(0,r.kt)("inlineCode",{parentName:"li"},"aria-expanded")," attribute to let a screen reader know\nwhether the disclosure component is visible."),(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"aria-controls")," attribute using the ",(0,r.kt)("inlineCode",{parentName:"li"},"id")," (can optionally pass ",(0,r.kt)("inlineCode",{parentName:"li"},"id")," in as a\nprop to the hook to render a custom value). This lets a screen reader know\nwhich component is controlled by the button."),(0,r.kt)("li",{parentName:"ul"},"An onClick handler that uses the ",(0,r.kt)("inlineCode",{parentName:"li"},"onToggle")," callback along with any other\nclick events passed as an ",(0,r.kt)("inlineCode",{parentName:"li"},"onClick")," prop to ",(0,r.kt)("inlineCode",{parentName:"li"},"getButtonProps"))),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"getButtonProps")," can also directly accept any additional props for the button."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"function Basic() {\n  const { getDisclosureProps, getButtonProps } = useDisclosure()\n\n  const buttonProps = getButtonProps()\n  const disclosureProps = getDisclosureProps()\n  return (\n    <>\n      <Button {...buttonProps}>Toggle Me</Button>\n      <Text {...disclosureProps} mt={4}>\n        This text is being visibly toggled hidden and shown by the button.\n        <br />\n        (Inspect these components to see the rendered attributes)\n      </Text>\n    </>\n  )\n}\n")),(0,r.kt)("h2",{id:"parameters"},"Parameters"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"useDisclosure")," hook accepts an optional object with the following\nproperties:"),(0,r.kt)(u,{of:"useDisclosure",mdxType:"PropsTable"}))}m.isMDXComponent=!0}}]);