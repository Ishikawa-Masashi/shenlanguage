"use strict";(self.webpackChunkchakra_ui_docs=self.webpackChunkchakra_ui_docs||[]).push([[8661],{3905:(e,n,t)=>{t.d(n,{Zo:()=>m,kt:()=>h});var o=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},i=Object.keys(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=o.createContext({}),c=function(e){var n=o.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},m=function(e){var n=c(e.components);return o.createElement(s.Provider,{value:n},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},d=o.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),p=c(t),d=a,h=p["".concat(s,".").concat(d)]||p[d]||u[d]||i;return t?o.createElement(h,r(r({ref:n},m),{},{components:t})):o.createElement(h,r({ref:n},m))}));function h(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,r=new Array(i);r[0]=d;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[p]="string"==typeof e?e:a,r[1]=l;for(var c=2;c<i;c++)r[c]=t[c];return o.createElement.apply(null,r)}return o.createElement.apply(null,t)}d.displayName="MDXCreateElement"},41766:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>m,default:()=>k,frontMatter:()=>c,metadata:()=>p,toc:()=>d});var o=t(87462),a=(t(67294),t(3905));const i=(r="SandpackEditor",function(e){return console.warn("Component "+r+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",e)});var r;const l={toc:[]};function s(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,o.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)(i,{mdxType:"SandpackEditor"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"link-theme.tsx","link-theme.tsx":!0},'import { defineStyle, defineStyleConfig } from "@chakra-ui/styled-system"\n\nconst baseStyle = defineStyle({\n  fontWeight: "normal", // change the font weight to normal\n  fontFamily: "mono", // change the font family to monospaced\n  textColor:  "purple.500", // change the text color to purple\n  textTransform:\'capitalize\'\n})\n\nconst sizes = {\n  xl: defineStyle({\n    fontSize: "xl", // Change font size to sm (20px),\n  }),\n}\n\n\n// Defining a custom variant\nconst customVariant = defineStyle((props) => {\n  const { colorScheme: c } = props\n  return {\n    fontFamily: "sans-serif",\n    color: \'white\',\n    transition: \'transform 0.15s ease-out, fontWeight 0.15s ease-out\',\n    _dark: {\n      color: `${c}.500`,\n    },\n\n    _hover: {\n      transform: "scale(1.05, 1.05)",\n      fontWeight: "semibold",\n      textDecorationStyle: "wavy",\n      _dark: {\n        color: `${c}.500`,\n      },\n    },\n\n  }\n})\n\nexport const linkTheme = defineStyleConfig({\n  baseStyle,\n  sizes,\n  variants: {\n    custom: customVariant,\n  }\n})\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"link.tsx","link.tsx":!0},'import { Box, SimpleGrid, IconButton, Link, Text, useColorMode } from "@chakra-ui/react";\nimport { FaMoon, FaSun } from "react-icons/fa";\nimport { ExternalLinkIcon } from "@chakra-ui/icons";\n\nexport default function App() {\n  const { toggleColorMode, colorMode } = useColorMode();\n\n  return (\n    <Box position="relative" h="100vh">\n      <SimpleGrid gap={12} p={12} columns={2}>\n        <Link textDecoration={"underline"} href="https://chakra-ui.com">\n          themed underline link\n        </Link>\n        <Link href="https://chakra-ui.com" isExternal>\n          themed external link <ExternalLinkIcon mx="2px" />\n        </Link>\n        <Text>\n          Themed Link{" "}\n          <Link href="https://chakra-ui.com">\n            with inline text\n          </Link>\n        </Text>\n        <Link href="https://chakra-ui.com" variant="custom">\n          themed link with custom variant\n        </Link>\n        <Link href="https://chakra-ui.com" size="xl">\n          link size xl\n        </Link>\n      </SimpleGrid>\n\n      <IconButton\n        rounded="full"\n        aria-label="change theme"\n        size="xs"\n        position="absolute"\n        bottom={4}\n        left={4}\n        onClick={toggleColorMode} icon={colorMode === "dark" ? <FaSun /> : <FaMoon />}\n      />\n    </Box>\n  );\n}\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"App.tsx","App.tsx":!0},'import { ChakraProvider, extendTheme } from "@chakra-ui/react";\nimport Link from "./link";\nimport { linkTheme } from "./link-theme";\n\nconst theme = extendTheme({\n  components: {\n    Link: linkTheme,\n  }\n});\n\nconst App = () => {\n  return (\n    <ChakraProvider theme={theme}>\n      <Link />\n    </ChakraProvider>\n  );\n}\n\nexport default App;\n'))))}s.isMDXComponent=!0;const c={},m="Theming",p={unversionedId:"components/navigation/link/theming",id:"components/navigation/link/theming",title:"Theming",description:"The Link component is a single part component. All of the styling is applied",source:"@site/content/docs/components/navigation/link/theming.mdx",sourceDirName:"components/navigation/link",slug:"/components/navigation/link/theming",permalink:"/docs/components/navigation/link/theming",draft:!1,tags:[],version:"current",lastUpdatedBy:"IshikawaMasashi",lastUpdatedAt:1675293453,formattedLastUpdatedAt:"Feb 1, 2023",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"Link",permalink:"/docs/components/navigation/link/"},next:{title:"Link Overlay",permalink:"/docs/components/navigation/link-overlay/"}},u={},d=[{value:"Theming properties",id:"theming-properties",level:2},{value:"Theming utilities",id:"theming-utilities",level:2},{value:"Adding a custom size",id:"adding-a-custom-size",level:2},{value:"Adding a custom variant",id:"adding-a-custom-variant",level:2},{value:"Using a custom color scheme",id:"using-a-custom-color-scheme",level:2},{value:"Setting default properties",id:"setting-default-properties",level:2},{value:"Showcase",id:"showcase",level:2}],h={toc:d};function k(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,o.Z)({},h,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"theming"},"Theming"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"Link")," component is a single part component. All of the styling is applied\ndirectly to the ",(0,a.kt)("inlineCode",{parentName:"p"},"anchor")," element."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"To learn more about styling single part components, visit the\n",(0,a.kt)("a",{parentName:"p",href:"/docs/styled-system/theming/component-style#styling-single-part-components"},"Component Style"),"\npage.")),(0,a.kt)("h2",{id:"theming-properties"},"Theming properties"),(0,a.kt)("p",null,"The properties that affect the theming of the ",(0,a.kt)("inlineCode",{parentName:"p"},"Link")," component are:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"variant"),": The visual variant of the Link component."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"colorScheme"),": The color scheme of the Link component."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"size"),": The size of the Link component.")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Note: Theming properties for Link component are not implemented in the default\ntheme. You can\n",(0,a.kt)("a",{parentName:"p",href:"/docs/styled-system/theming/customize-theme#customizing-component-styles"},"extend the theme"),"\nto implement them.")),(0,a.kt)("h2",{id:"theming-utilities"},"Theming utilities"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"defineStyle"),": a function used to create style objects."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"defineStyleConfig"),": a function used to define the style configuration for a\nsingle part component.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},'import { defineStyle, defineStyleConfig } from "@chakra-ui/react";\n')),(0,a.kt)("h2",{id:"adding-a-custom-size"},"Adding a custom size"),(0,a.kt)("p",null,"Let's assume we want to include an extra large link size. Here's how we can do\nthat:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"import { defineStyle, defineStyleConfig } from '@chakra-ui/react'\n\nconst xl = defineStyle({\n  fontSize: 'xl',\n})\n\nexport const linkTheme = defineStyleConfig({\n  sizes: { xl },\n})\n\n// Now we can use the new `xl` size\n<Link size=\"xl\">...</Link>\n")),(0,a.kt)("p",null,"Every time you're adding anything new to the theme, you'd need to run the CLI\ncommand to get proper autocomplete in your IDE. You can learn more about the CLI\ntool ",(0,a.kt)("a",{parentName:"p",href:"/docs/styled-system/cli"},"here"),"."),(0,a.kt)("h2",{id:"adding-a-custom-variant"},"Adding a custom variant"),(0,a.kt)("p",null,"Let's assume we want to include a custom branded variant. Here's how we can do\nthat:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"import { defineStyle, defineStyleConfig } from '@chakra-ui/react'\n\nconst brandPrimary = defineStyle({\n  textDecoration: 'underline',\n  color: 'white',\n  fontFamily: 'serif',\n  fontWeight: 'normal',\n\n  // let's also provide dark mode alternatives\n  _dark: {\n    color: 'orange.800',\n  }\n})\n\nexport const linkTheme = defineStyleConfig({\n  variants: { brandPrimary },\n})\n\n// Now we can use the new `brandPrimary` variant\n<Link variant=\"brandPrimary\">...</Link>\n")),(0,a.kt)("h2",{id:"using-a-custom-color-scheme"},"Using a custom color scheme"),(0,a.kt)("p",null,"Let's assume we want to use our own custom color scale based on our brand. We'd\nneed to define the color scale first in the main theme file:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"import { extendTheme } from '@chakra-ui/react'\n\nexport const theme = extendTheme({\n  colors: {\n    brand: {\n      50: '#f7fafc',\n      ...\n      500: '#718096',\n      ...\n      900: '#171923',\n    }\n  }\n})\n")),(0,a.kt)("p",null,"Then, we can use the custom color scale as the color scheme for the Link\ncomponent:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},'<Link colorScheme="brand">...</Link>\n')),(0,a.kt)("h2",{id:"setting-default-properties"},"Setting default properties"),(0,a.kt)("p",null,"Let's assume that we want to set the default size, variant or color scheme of\nevery link in our app. Here's how we can do that:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"import { defineStyleConfig } from '@chakra-ui/react'\n\nexport const linkTheme = defineStyleConfig({\n  defaultProps: {\n    size: 'xl',\n    variant: 'brandPrimary',\n    colorScheme: 'brand',\n  },\n})\n\n// This saves you time, instead of manually setting the size,\n// variant and color scheme every time you use a Link component:\n<Link size=\"xl\" variant=\"brandPrimary\" colorScheme=\"brand\">...</Link>\n")),(0,a.kt)("h2",{id:"showcase"},"Showcase"),(0,a.kt)(s,{mdxType:"Showcase"}))}k.isMDXComponent=!0}}]);