"use strict";(self.webpackChunkchakra_ui_docs=self.webpackChunkchakra_ui_docs||[]).push([[3561],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=p(n),m=o,b=u["".concat(s,".").concat(m)]||u[m]||c[m]||r;return n?a.createElement(b,i(i({ref:t},d),{},{components:n})):a.createElement(b,i({ref:t},d))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var p=2;p<r;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},50840:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>b,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var a=n(87462),o=(n(67294),n(3905));const r={},i="Editable",l={unversionedId:"components/forms/editable/index",id:"components/forms/editable/index",title:"Editable",description:"EditableText is used for inline renaming of some text. It appears as normal UI",source:"@site/content/docs/components/forms/editable/index.mdx",sourceDirName:"components/forms/editable",slug:"/components/forms/editable/",permalink:"/shenlanguage/docs/components/forms/editable/",draft:!1,tags:[],version:"current",lastUpdatedBy:"IshikawaMasashi",lastUpdatedAt:1675135144,formattedLastUpdatedAt:"Jan 31, 2023",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"Theming",permalink:"/shenlanguage/docs/components/forms/checkbox/theming"},next:{title:"Theming",permalink:"/shenlanguage/docs/components/forms/editable/theming"}},s={},p=[{value:"Import",id:"import",level:2},{value:"Usage",id:"usage",level:2},{value:"Usage with textarea",id:"usage-with-textarea",level:3},{value:"With custom input and controls",id:"with-custom-input-and-controls",level:3},{value:"Styling the editable",id:"styling-the-editable",level:3},{value:"Props",id:"props",level:2},{value:"Editable Props",id:"editable-props",level:3}],d=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",t)},c=d("ComponentLinks"),u=d("PropsTable"),m={toc:p};function b(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"editable"},"Editable"),(0,o.kt)("p",null,"EditableText is used for inline renaming of some text. It appears as normal UI\ntext but transforms into a text input field when the user clicks or focuses on\nit."),(0,o.kt)(c,{github:{package:"editable"},npm:{package:"@chakra-ui/editable"},theme:{componentName:"editable"},mdxType:"ComponentLinks"}),(0,o.kt)("h2",{id:"import"},"Import"),(0,o.kt)("p",null,"Chakra UI exports 3 components to handle this functionality."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"Editable"),": The wrapper component that provides context value."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"EditableInput"),": The edit view of the component. It shows when you click or\nfocus on the text."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"EditableTextarea"),": Use the textarea element to handle multi line text input\nin an editable context."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"EditablePreview"),": The read-only view of the component.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import {\n  Editable,\n  EditableInput,\n  EditableTextarea,\n  EditablePreview,\n} from '@chakra-ui/react';\n")),(0,o.kt)("h2",{id:"usage"},"Usage"),(0,o.kt)("p",null,"The editable's text input and preview inherits all font styling from the root\n",(0,o.kt)("inlineCode",{parentName:"p"},"Editable")," container in order to make the edit and read view transition\nseamless."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"// Click the text to edit\n<Editable defaultValue='Take some chakra'>\n  <EditablePreview />\n  <EditableInput />\n</Editable>\n")),(0,o.kt)("h3",{id:"usage-with-textarea"},"Usage with textarea"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"// Click the text to edit\n<Editable defaultValue='Take some chakra'>\n  <EditablePreview />\n  <EditableTextarea />\n</Editable>\n")),(0,o.kt)("h3",{id:"with-custom-input-and-controls"},"With custom input and controls"),(0,o.kt)("p",null,"In some cases, you might need to use custom controls to toggle the edit and read\nmode. We use the render prop pattern to provide access to the internal state of\nthe component. You may want to customize the ",(0,o.kt)("inlineCode",{parentName:"p"},"EditableInput")," as well. This can\nbe achieved by using a custom ",(0,o.kt)("inlineCode",{parentName:"p"},"Input")," component in the ",(0,o.kt)("inlineCode",{parentName:"p"},"as")," prop."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"function CustomControlsExample() {\n  /* Here's a custom control */\n  function EditableControls() {\n    const {\n      isEditing,\n      getSubmitButtonProps,\n      getCancelButtonProps,\n      getEditButtonProps,\n    } = useEditableControls();\n\n    return isEditing ? (\n      <ButtonGroup justifyContent='center' size='sm'>\n        <IconButton icon={<CheckIcon />} {...getSubmitButtonProps()} />\n        <IconButton icon={<CloseIcon />} {...getCancelButtonProps()} />\n      </ButtonGroup>\n    ) : (\n      <Flex justifyContent='center'>\n        <IconButton size='sm' icon={<EditIcon />} {...getEditButtonProps()} />\n      </Flex>\n    );\n  }\n\n  return (\n    <Editable\n      textAlign='center'\n      defaultValue='Rasengan \u26a1\ufe0f'\n      fontSize='2xl'\n      isPreviewFocusable={false}\n    >\n      <EditablePreview />\n      {/* Here is the custom input */}\n      <Input as={EditableInput} />\n      <EditableControls />\n    </Editable>\n  );\n}\n")),(0,o.kt)("h3",{id:"styling-the-editable"},"Styling the editable"),(0,o.kt)("p",null,"Please see the ",(0,o.kt)("a",{parentName:"p",href:"/community/recipes/atlaskit-editable"},"recipe")," for a styled\nexample."),(0,o.kt)("h2",{id:"props"},"Props"),(0,o.kt)("h3",{id:"editable-props"},"Editable Props"),(0,o.kt)(u,{of:"Editable",mdxType:"PropsTable"}))}b.isMDXComponent=!0}}]);